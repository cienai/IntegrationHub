table metadata_ai_scores
	lineageTag: 8c96acad-793d-4bbe-aa0a-cbaa0c12a741

	measure 'meas.ai_scores_accts_industry' = ```
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_industry_conf])         // get the accounts average industry conf
			)
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 39d3ccd2-4aed-49b7-b32f-ac492b682508

	measure 'meas.ai_scores_accts_industry_text' = ```
			
			var _conf = [meas.ai_scores_accts_industry]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 78aa2632-8d5b-413e-8b97-c8a8861319e7

	measure 'meas.ai_scores_accts_leadsource' = ```
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_leadsource_conf])         // get the accounts average leadsource conf
			)
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 6edc7b57-1ed7-4b22-a243-e12a42d84457

	measure 'meas.ai_scores_accts_leadsource_text' = ```
			
			var _conf = [meas.ai_scores_accts_leadsource]         // get the accounts average leadsource conf  
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: a40268c5-c092-49f6-aca0-22bba83a7e70

	measure 'meas.ai_scores_adj_duration' = ```
			
			VAR _tbl = CALCULATETABLE(ssr_history, ssr_history[step_name] in {"Prospecting", "New Logo Selling", "Post-Sales Support","Existing Customer Selling"}) // Get the current table context but exclude the unthcouded stage etc
			VAR _avg = AVERAGEX(
			    _tbl,
			     SWITCH(
			        ssr_history[stkhlds_all_adj_dur_rule],
			        "133002", 0.4,  // 133002 is industry avg, not reliable
			        "133001", 0.7,   // 133001 is peer avg, okay
			        "133003", 0.97,   // 133003 is the best info from the owner
			        "133004", 0.86    // 133004 is good data but not from the primary owner
			    )
			)
			
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)^ boost_expo               // get the expo value to enhance output
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: bee85b55-4935-465e-8db3-e6991a3963ea

	measure 'meas.ai_scores_adj_duration_text' = ```
			
			var _conf = [meas.ai_scores_adj_duration]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 3b75e1b4-b1f4-4668-ba5b-cdf371189c27

	measure 'meas.ai_scores_all_list_price_items_non_default' =
			
			var total_list_items = CALCULATE(
			    count(opp_line_items[trueai_list_price]),      // non default list price items count
			    opp_line_items[trueai_list_price_rule] <> 103007
			)
			
			RETURN
			total_list_items
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 4fb9148b-5ede-4cde-b669-c1ecc2a44658

	measure 'meas.ai_scores_booking_calibration' = ```
			
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC)) 
			var factor1 = VALUE(MAXX(latest_table,companies_history[ttm_ref_date_revenue])) 
			var factor2 = VALUE(MAXX(latest_table,companies_history[di_amt_won_last12months])) 
			
			var score = (factor1 - ABS(factor1 - factor2))/factor1
			var res = IF(
			    factor1=BLANK() || factor1=0,
			    0,
			    ROUND(score*100, 0)
			)
			RETURN
			res
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: fe57f762-597f-4e7c-9903-2ed634cc1ca7

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_booking_calibration_text' = ```
			
			var _conf = [meas.ai_scores_booking_calibration]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 713391db-2600-4b35-80ff-8c4bc5d200c4

	measure 'meas.ai_scores_ci_act_capt_lvl_conf' = ```
			
			var _avg = CALCULATE(
			           AVERAGE(users_history[ci_act_capt_lvl_conf])// get the users_history average ci_act_capt_lvl conf
			)
			var boost_expo = 0.90           // exponent value 
			var _boosted_avg = (_avg)^ boost_expo     // pushes up the score slightly 
			var _conf = ROUND(_boosted_avg*100,0)  // round the number and for integar value  
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 1ae2915d-2f9a-429a-b17f-33652be146a2

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_act_capt_lvl_conf_text' = ```
			
			
			var _conf = [meas.ai_scores_ci_act_capt_lvl_conf]  // act capt lvl score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: a0481367-99c7-4060-befd-8e520e74c66a

	measure 'meas.ai_scores_ci_closing_ability' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_close_ability_num])     // get the avg closing ability conf
			var boost_expo = 0.90
			var _new_avg = (_avg)^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be  
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 4888116b-57c6-429e-8d22-8967a530b922

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_closing_ability_text' = ```
			
			var _conf = [meas.ai_scores_ci_closing_ability]     // get the avg closing ability conf
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 34ec39e3-f59e-4ce3-bbad-bf726038c2b5

	measure 'meas.ai_scores_ci_deal_maxing' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_deal_maxing_num])    // get the avg deal maximizing conf
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_avg,2)*100  // round the number and for integar value
			
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 0e74b849-e97e-41d2-a4ee-873849a195d4

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_deal_maxing_text' = ```
			
			var _conf = [meas.ai_scores_ci_deal_maxing]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 7b523337-352e-4789-a2b4-3894aa704751

	measure 'meas.ai_scores_ci_discovery_skill' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_disc_skills_num])     // get the avg discovery skill conf
			var boost_expo = 0.90
			var _new_avg = (ABS(_avg))^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = MIN(MAX(ROUND(_avg*100 ,0),0),100) // round the number and for integar value
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 05f956cc-5b30-4db1-b18d-36e82949a976

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_discovery_skill_text' = ```
			
			
			var _avg = [meas.ai_scores_ci_discovery_skill]     // get the avg discovery skill conf
			
			var boost_expo = 0.90
			var _new_avg = (ABS(_avg))^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 99d5c7fd-cd1b-48d5-a4aa-c89070bc743e

	measure 'meas.ai_scores_ci_engagement_ability' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_engmt_ability_num])   // get the avg engagement ability conf
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_avg,2)*100  // round the number and for integar value
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: d1d117c0-9de0-4ac1-87a1-4d782ed1f5e2

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_engagement_ability_text' = ```
			
			var _conf = [meas.ai_scores_ci_engagement_ability]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 65ed8704-221e-45ba-92c1-91aeddf0bc2c

	measure 'meas.ai_scores_ci_time_alloc' = ```
			
			var reps_w_ta =  [meas.reps_w_time_allocation_count]
			var reps_tot = [meas.data_logs_user_count_eop]
			var _avg =DIVIDE(reps_w_ta, reps_tot)        // get the % of reps w TA
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)*boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value  
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: b6e53d64-157d-4cbc-8e38-cd45f65edd04

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_time_alloc_text' = ```
			
			var _conf = [meas.ai_scores_ci_time_alloc]          // get the time alloc score 
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 2997cb52-b97d-48b7-8868-852384781898

	measure 'meas.ai_scores_ci_time_management' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_time_mgmt_num])
			var boost_expo = 0.90
			var _new_avg = (_avg)^ boost_expo   // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_new_avg*100,0)  // round the number and for integar value
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 38e27337-d1d7-4a2d-9f40-6ae4a69a77cd

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_time_management_text' = ```
			
			var _conf = [meas.ai_scores_ci_time_management]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 25e55507-7cf7-44b4-ae47-952662ea679a

	measure 'meas.ai_scores_ci_work_effort' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_work_effort_num])    // get the factor1
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)^ boost_expo               // get the expo value to enhance output
			var _conf = ROUND(_avg,2)*100  // round the number and for integar value
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: deabf2f9-57f3-4a97-9dea-2b23763af9ec

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_work_effort_text' = ```
			
			
			var _avg = [meas.ai_scores_ci_work_effort]     // get the avg work effort conf
			
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)^ boost_expo               // get the expo value to enhance output
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: b8b976ec-e283-4e9f-a434-b5b7a5d771b7

	measure 'meas.ai_scores_general_score' =
			
			var factor1 = [meas.ai_scores_general_score_factor1_value]            // get the factor value 1
			var res = ROUND(factor1*100,0)
			RETURN
			res
		displayFolder: _ai_scores
		lineageTag: d1e3c7ab-a026-4e6f-a235-6a3dc9a158a5

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_general_score_text' = ```
			
			
			var _conf = [meas.ai_scores_general_score]
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: e14ecee8-9790-4562-a4d4-7a9a15d977e6

	measure 'meas.ai_scores_leads_industry' = ```
			
			var _avg = AVERAGE(ssr[trueai_industry_conf])         // get the leads average leadsource conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: c3045d71-e4f5-44c6-ad52-00ff64d08878

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_leads_industry_text' = ```
			
			var _conf = [meas.ai_scores_leads_industry_factor1_value]       // get the leads average industry conf  
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 00355fe8-ba4c-408d-890b-0295703f0a98

	measure 'meas.ai_scores_leads_leadsource' = ```
			
			var _avg = AVERAGE(ssr[trueai_leadsource_conf])           // get the leads average lead source conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: b002e3a1-c0f2-4749-83d7-a51aeeaf582b

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_leads_leadsource_text' = ```
			
			var _conf = [meas.ai_scores_leads_leadsource]   
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 2eb7cf9b-e10d-425c-8c58-d48beafa285b

	measure 'meas.ai_scores_line_items_products' = ```
			
			var won_deals = CALCULATE(
			    COUNT(ssr_history[_sys_doc_id]),                // get the won deals
			    opps[trueai_is_won]=True
			)
			VAR _won_deals_w_line = CALCULATE(
			        DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			        opps[trueai_is_won] = True,                      // get the won deals count with line items
			        FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			    )
			
			var _won_ratio = DIVIDE(_won_deals_w_line,won_deals,0)         // won ratio
			
			var lost_deals =CALCULATE(
			    COUNT(ssr_history[_sys_doc_id]),                // get the lost deals
			    opps[trueai_is_won]=False
			)
			
			var _lost_deals_w_line = CALCULATE(
			        DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			        opps[trueai_is_won] = False,                      // get the lost deals count with line items
			        FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			    )
			
			var _lost_ratio = DIVIDE(_lost_deals_w_line,lost_deals,0)          // lost ratio
			
			var _won_weight = 0.70           // won weight
			var _lost_weight = 0.30         // lost deals ratio
			
			var score = (_won_ratio*_won_weight+_lost_ratio*_lost_weight)
			var res = ROUND(score*100,0)
			
			RETURN
			res
			```
		displayFolder: _ai_scores
		lineageTag: 4c75bc0f-737e-476b-96b1-b0128b90af70

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_line_items_products_text' = ```
			
			var _conf = [meas.ai_scores_line_items_products]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 8f6933b0-e052-400a-a24b-b1d24c0a50be

	measure 'meas.ai_scores_list_price' = ```
			
			var total_list_items = CALCULATE(count(opp_line_items[trueai_list_price]))      // get all the list_price count
			var total_list_items_non_default = CALCULATE( count(opp_line_items[trueai_list_price]),    opp_line_items[trueai_list_price_rule] <> 103007) // non default
			var total_list_items_default = total_list_items- total_list_items_non_default
			 
			var score = DIVIDE(total_list_items_non_default, total_list_items )* 0.49 + DIVIDE(total_list_items_default, total_list_items) // penalize non default scores
			var res = ROUND(score*100, 0)
			RETURN  res
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: e67aca4d-ec1b-45f3-8cbe-5d652675365b

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_list_price_text' = ```
			
			
			var _conf = [meas.ai_scores_list_price]         // get the list price score number
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 2f365905-809e-4430-a27f-3bc45ffd0a5f

	measure 'meas.ai_scores_new_logo_existing_customer_selling' =
			
			var _new_logo = [meas.ai_scores_pred_new_logo_selling]      // new logo sellign score
			var _existing = [meas.ai_scores_pred_existing_customer_selling]         // existing customer selling score
			var res = (_new_logo+_existing)/2
			
			RETURN
			res
		displayFolder: _ai_scores
		lineageTag: a9faa482-6fba-4410-8841-3eaf4f6451c1

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_opps_history' =
			
			VAR factor1 =
			    DISTINCTCOUNT ( open_pipeline[crm_opp_id] )   // opps that have history
			VAR factor2 =
			    DISTINCTCOUNT ( opps[_sys_doc_id] )            // all opps
			VAR res =
			    ROUND ( DIVIDE ( factor1, factor2, 0 ) * 100, 0 )
			RETURN
			    res
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 32567516-5874-4226-8182-cabb1f40e3b7

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_opps_history_text' = ```
			
			var _conf = [meas.ai_scores_opps_history]      // get the opps history score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: a425cd5e-054a-47fd-87bb-1a68b4790cdf

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_opps_industry' = ```
			
			var _avg =  AVERAGE(opps[trueai_industry_conf])         // get the opps average industry conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 1dd141b1-c365-410b-bf6d-92c294828494

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_opps_industry_text' = ```
			
			
			var _conf = [meas.ai_scores_opps_industry]   
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 6d51e2c5-39ff-4094-ba27-8846acf4c110

	measure 'meas.ai_scores_opps_leadsource' = ```
			
			var _avg =  AVERAGE(opps[trueai_industry_conf])          // get the opps average lead source conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 43a832da-356c-4608-a410-ede250550799

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_opps_leadsource_text' = ```
			
			
			var _conf = [meas.ai_scores_opps_leadsource]   
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: f0050a26-d388-426a-ab26-776640a2a21a

	measure 'meas.ai_scores_performance_tiers' =
			
			var score =  CALCULATE(AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]))        // get the avg performance tier conf
			var res = ROUND(score*100, 0)       // get the int number
			RETURN
			res
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 78a3895d-3611-4430-9285-08fd177c3411

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_performance_tiers_text' = ```
			
			var _conf = [meas.ai_scores_performance_tiers]
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 65271df5-32c1-421b-afec-ddda9492aefd

	measure 'meas.ai_scores_potential_acv' = ```
			
			// as we don't have some field to calculate the factor I am using here temporary variable for visualization purpose. need to apply the actual field while available
			var temp =0.80    // temp value for factor analysis
			var boost_expo = 0.9            // we uyse this to get the closer one value
			var score = temp^boost_expo     // boosting the actual 
			var res = ROUND(score*100, 0)
			RETURN
			res
			```
		displayFolder: _ai_scores
		lineageTag: 3edc768e-8bd8-4721-9657-09aca139c796

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_potential_acv_text' = ```
			
			
			var _conf = [meas.ai_scores_potential_acv]      // getb potential acv score
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 4e31aea8-f44e-4c52-9dac-586d20c40aeb

	measure 'meas.ai_scores_pred_existing_customer_selling' = ```
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var factor1 = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_auc])     // get the latest auc for existing customer
			var factor2 = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_r2])     // get the latest r2
			var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			var normalized_factor1  = (MAX((factor1-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var normalized_factor2  = MAX(factor2, 0) // avoid neg numbers from factor2
			
			var score  = ((normalized_factor2 + factor1)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: a9831dbf-5682-4d58-a09e-79f6ce0ad1b2

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_pred_existing_customer_selling_text' = ```
			
			
			var _conf = [meas.ai_scores_pred_existing_customer_selling] // get the existing customer selling score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 86df4483-98ea-45c3-8894-8266d69ed26c

	measure 'meas.ai_scores_pred_new_logo_selling' = ```
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var factor1 = MAXX(latest_row, companies_history[di_pred_new_logo_auc])     // get the latest auc for existing customer
			var factor2 = MAXX(latest_row, companies_history[di_pred_new_logo_r2])     // get the latest r2
			
			var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			var normalized_factor1  = (MAX((factor1-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var normalized_factor2  = MAX(factor2, 0) // avoid neg numbers from factor2
			
			var score  = ((normalized_factor2 + factor1)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 3ba649b8-a4e2-40c5-bf3f-1f5bb9013d4d

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_pred_new_logo_selling_text' = ```
			
			var _conf = [meas.ai_scores_pred_new_logo_selling] // get the new logo selling score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 633ba0fa-e512-402a-b0a9-985939b9fe60

	measure 'meas.ai_scores_pred_post_sales_support' = ```
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var factor1 = MAXX(latest_row, companies_history[di_pred_post_sales_auc])     // get the latest auc for existing customer
			var factor2 = MAXX(latest_row, companies_history[di_pred_post_sales_r2])     // get the latest r2
			
			var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			var normalized_factor1  = (MAX((factor1-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var normalized_factor2  = MAX(factor2, 0) // avoid neg numbers from factor2
			
			var score  = ((normalized_factor2 + factor1)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: a05cab4f-fb40-4494-a49f-2f96bd1b3638

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_pred_post_sales_support_text' = ```
			
			var _conf = [meas.ai_scores_pred_post_sales_support]        // get the score 
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 679a12dc-3b97-4b79-b261-cf6e09735931

	measure 'meas.ai_scores_pred_prospecting' = ```
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var factor1 = MAXX(latest_row, companies_history[di_pred_prospecting_auc])     // get the latest auc for existing customer
			var factor2 = MAXX(latest_row, companies_history[di_pred_prospecting_r2])     // get the latest r2
			
			var boost_expo = 0.65 // to get closer to one if good score after the scor has been calcualted
			var normalized_factor1  = (MAX((factor1-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var normalized_factor2  = MAX(factor2, 0) // avoid neg numbers from factor2
			
			var score  = ((normalized_factor2 + factor1)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: afb705db-0fbb-45c5-a1b2-b2608189e2fc

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_pred_prospecting_text' = ```
			
			var _conf = [meas.ai_scores_pred_prospecting] // get the prospecting pred score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: ab4f1ccc-63c1-496e-b11c-53d808d82029

	measure 'meas.ai_scores_ramping' = ```
			
			var fromDate =[meas.context_date_min] 
			var toDate = [meas.context_date_max] 
			
			var applicable_rows_tbl = CALCULATETABLE(users_history, users_history[col.ci.perf_ramping_status] ="Ramping" ,  LASTNONBLANK(users_history[_sys_filt_start_date],users_history[_sys_filt_start_date]))  // get only the last entry in each filter context period (e.g. a year)
			
			var active_users_tbl =  filter(applicable_rows_tbl, [trueai_hire_date] <  toDate   && if(isblank([trueai_termination_date]), date(2100,1,1),[trueai_termination_date]) >=  toDate) // make sure we only include reps that are in the active 
			
			var _cnt = COUNTROWS(DISTINCT(SELECTCOLUMNS(active_users_tbl, users_history[_sys_user_id]))) // get a disctinct count of users from that filter context 
			
			var ramp_rate  = MIN(_cnt/3, 1)       // get the minimum if there is no ramping reps 
			
			var perf_score =  CALCULATE(
			    AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]),       // get the avg perf conf
			    users_history[col.ci.perf_ramping_status] ="Ramping"
			)
			var boost_expo = 0.5            // we use this to get the closer one value
			var score = (ramp_rate * perf_score)^boost_expo     // boosting the actual 
			var res = ROUND(score*100, 0)+0
			RETURN
			res
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 822304c1-edef-4bc0-9017-2b3f2f278fc0

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ramping_text' = ```
			
			var _conf = [meas.ai_scores_ramping]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: d5c7810c-2058-48d5-80d6-50e28a0afc7b

	measure 'meas.ai_scores_rep_org_calibration' = ```
			
			VAR latest_table = 
			    CALCULATETABLE(
			        TOPN(1, companies_history, companies_history[_sys_processed_as_of], DESC)
			    )
			
			VAR _total_users = MAXX(latest_table, companies_history[users_sales])
			VAR users_match_hr_id = MAXX(latest_table, [users_match_hr_id])
			VAR users_hr_file = MAXX(latest_table, companies_history[users_hr_file])
			VAR users_non_match_hr_id_won_deals = MAXX(latest_table, companies_history[users_non_match_hr_id_won_deals])
			VAR users_non_match_hr_id_pipeline = MAXX(latest_table, companies_history[users_non_match_hr_id_pipeline])
			VAR users_non_match_hr_id_leads = MAXX(latest_table, companies_history[users_non_match_hr_id_leads])
			VAR users_match_hr_id_nd_role = MAXX(latest_table, companies_history[users_match_hr_id_nd_role])
			VAR users_match_hr_id_nd_group = 0  -- placeholder, unused in current calc
			
			-- Individual component scores
			VAR matched_reps_score = DIVIDE(users_match_hr_id, users_hr_file, 0)
			VAR won_deals_score = 1 - DIVIDE(users_non_match_hr_id_won_deals, _total_users, 0)
			VAR pipeline_gen_score = 1 - DIVIDE(users_non_match_hr_id_pipeline, _total_users, 0)
			VAR lead_gen_score = 1 - DIVIDE(users_non_match_hr_id_leads, _total_users, 0)
			VAR reps_w_role_score = 1 - DIVIDE(users_match_hr_id_nd_role, users_hr_file, 0)
			
			-- Weighted scoring table
			VAR Row1 = ROW("Value", matched_reps_score, "Weight", 3)
			VAR Row2 = ROW("Value", won_deals_score, "Weight", 2)
			VAR Row3 = ROW("Value", pipeline_gen_score, "Weight", 1)
			VAR Row4 = ROW("Value", lead_gen_score, "Weight", 1)
			VAR Row5 = ROW("Value", reps_w_role_score, "Weight", 2)
			
			VAR temp_tbl = UNION(Row1, Row2, Row3, Row4, Row5)
			
			-- Calculate weighted average (raw score)
			VAR _adj_calib = SUMX(temp_tbl, [Value] * [Weight])
			VAR _importance = SUMX(temp_tbl, [Weight])
			VAR raw_score = DIVIDE(_adj_calib, _importance, 0)
			
			-- Safeguard and exponent boost
			VAR boost_expo = 0.9
			VAR safe_raw_score = MIN(MAX(raw_score, 0), 1)  -- ensure score stays within 0–1
			VAR score = POWER(safe_raw_score, boost_expo)
			
			-- Final result as a percentage, clamped to 0–100
			VAR res = MIN(MAX(ROUND(score * 100, 0), 0), 100)
			
			RETURN res
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 65e27ada-7d1f-40df-8bd5-50a4fa39c4d5

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_rep_org_calibration_text' = ```
			
			var _conf = [meas.ai_scores_rep_org_calibration]
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 7e16f241-f2f5-495b-acb2-8bff3fcfebc5

	measure 'meas.ai_scores_revenue_calibration' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))  
			var factor1 = VALUE(MAXX(latest_table,companies_history[ttm_ref_date_revenue])) 
			VAR factor2 = VALUE(MAXX(latest_table,companies_history[di_amt_won_last12months]))
			var score = (factor1 - ABS(factor1 - factor2))/factor1
			
			var res = IF(
			    factor1=BLANK() || factor1=0,
			    0,
			    ROUND(score*100, 0)
			)
			
			RETURN
			res
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 8a9703ba-19d0-4204-b805-7268fdae0e11

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_revenue_calibration_text' = ```
			
			var _conf = [meas.ai_scores_revenue_calibration]
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: eaa54210-f119-4c2a-add9-0d141a20c4cf

	measure 'meas.ai_scores_ssr_industry' = ```
			
			var _avg = AVERAGE(ssr[trueai_industry_conf])         // get the ssr average industry conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: a6abcf69-3766-4bdd-a60f-4984323b5532

	measure 'meas.ai_scores_ssr_industry_text' = ```
			
			var _conf = [meas.ai_scores_ssr_industry]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 83a1764a-f48d-4431-82a2-403b9e5a5e77

	measure 'meas.ai_scores_ssr_leadsource' = ```
			
			var _avg = AVERAGE(ssr[trueai_leadsource_conf])        // get the ssr average lead source conf
			var _conf = ROUND(_avg*100,0)
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 1d6becd4-7779-4caa-8d84-d7fdf6c1e334

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ssr_leadsource_text' = ```
			
			var _conf = [meas.ai_scores_ssr_leadsource]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 9ea1b732-3eed-4543-888b-35c68286409c

	measure 'meas.ai_scores_success_factor_analysis' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var  train_score= MAXX(latest_row, companies_history[di_success_prob_training_score])     // get the latest train score
			var  validation_score= MAXX(latest_row, companies_history[di_success_prob_validation_score])     // get the latest validation score
			
			var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			var train_score_norm  = MAX(train_score, 0) // avoid neg
			var validation_score_norm  = (MAX((validation_score-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var score  = ((train_score_norm + validation_score_norm)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN
			_conf
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: c40817e6-7a7d-4281-a04b-007ed3fc01ae

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_success_factor_analysis_text' = ```
			
			var _conf = [meas.ai_scores_success_factor_analysis] // get the success factor analysis
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 306cdc51-2dee-4a88-a0e0-fb2c8340d268

	measure 'meas.ai_scores_vi' = ```
			
			var factor1 = [meas.ai_scores_vi_step_diff_factor1_value]      // get the factor 1
			var factor2 = [meas.ai_scores_vi_tuning_share_diff_factor2]         // get factor 2
			var score = (1 - (factor1+factor2)/2)
			var _conf = MIN(MAX(ROUND(score*100,0),0),100)    
			RETURN
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: cfeadcc9-0cb2-4247-9637-d0de514fa8d2

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_vi_txt' = ```
			
			var _conf = [meas.ai_scores_vi]    
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 32890bfb-0fbb-4401-b67a-b90c147f138b

	measure 'meas.ai_scores_ci_time_allocation_factor2_value' =
			
			var reps_tot = CALCULATE([meas.data_logs_user_count_eop], users[trueai_user_role_function] in {"AE", "AM", "SDR"})
			
			RETURN
			reps_tot
		formatString: 0
		displayFolder: _factor2_value
		lineageTag: fe8e4dc4-c3c2-464d-b0f2-7bd0aa9e848e

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_existing_customer_selling_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var existing_cust_r2 = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_r2])     // get the latest r2 for existing customer
			RETURN
			FORMAT(existing_cust_r2, "0.00")
		displayFolder: _factor2_value
		lineageTag: b34ca4b8-d776-45ed-abf4-257a00ba6cb3

	measure 'meas.ai_scores_line_items_products_factor2_value' = ```
			
			
			var lost_deals =CALCULATE(
			    COUNT(ssr_history[_sys_doc_id]),                // get the lost deals
			    opps[trueai_is_won]=False
			)
			
			
			var _lost_deals_w_line = CALCULATE(
			        DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			        opps[trueai_is_won] = False,                      // get the lost deals count with line items
			        FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			    )
			
			var _lost_ratio = DIVIDE(_lost_deals_w_line,lost_deals,0)          // lost ratio
			
			RETURN
			FORMAT(_lost_ratio, "0%")
			```
		displayFolder: _factor2_value
		lineageTag: 322eccea-e9fc-4cd4-a1b6-b6fe7ce95cc0

	measure 'meas.ai_scores_list_price_items_non_default_factor2_value' =
			
			var total_list_items = CALCULATE(
			    count(opp_line_items[trueai_list_price]),      // non default list price items count
			    opp_line_items[trueai_list_price_rule] <> 103007
			)
			
			RETURN
			total_list_items+0
		formatString: 0
		displayFolder: _factor2_value
		lineageTag: c5ff1078-9327-4f70-a364-ff94ac70d80d

	measure 'meas.ai_scores_new_logo_selling_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var new_logo_r2 = MAXX(latest_row, companies_history[di_pred_new_logo_r2])     // get the latest r2 for new_logo_selling
			RETURN
			FORMAT(new_logo_r2,"0.00")
		displayFolder: _factor2_value
		lineageTag: 4c4ee231-057d-4fa7-89af-0d13823b5247

	measure 'meas.ai_scores_post_sales_support_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var post_sales_r2 = MAXX(latest_row, companies_history[di_pred_post_sales_r2])     // get the latest r2 for post sales support
			RETURN
			FORMAT(post_sales_r2,"0.00")
		displayFolder: _factor2_value
		lineageTag: 231f7961-a090-4d9f-be9c-c8b5b2f33117

	measure 'meas.ai_scores_prospecting_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var prospect_r2 = MAXX(latest_row, companies_history[di_pred_prospecting_r2])     // get the latest r2 for prospecting
			RETURN
			FORMAT(prospect_r2, "0.00")
		displayFolder: _factor2_value
		lineageTag: f066aabf-c00d-4d88-b0a5-6779029d7b86

	measure 'meas.ai_scores_ramping_perf_conf_factor2_value' =
			
			var _perf = CALCULATE(
			    AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]),       // get the avg perf conf
			    users_history[col.ci.perf_ramping_status] ="Ramping"
			)
			RETURN
			_perf+0
		formatString: 0.00
		displayFolder: _factor2_value
		lineageTag: 2efec14a-78b8-40f8-97f9-9640fb62a3b6

	measure 'meas.ai_scores_success_factor_analysis_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var  valid_score= MAXX(latest_row, companies_history[di_success_prob_validation_score])     // get the latest validation score
			RETURN
			FORMAT(valid_score, "0.00")
		displayFolder: _factor2_value
		lineageTag: 41c60942-a8ee-4d5f-9a96-1574649cd7d0

	measure 'meas.ai_scores_vi_tuning_share_diff_factor2' =
			
			var diff2 = [meas.ssr_history_vi_tuning_shares_diff]        // diff 2
			
			RETURN
			FORMAT(diff2, "0.00")
		displayFolder: _factor2_value
		lineageTag: 42241314-6700-4f39-8ab0-197a961b6fc8

	measure 'meas.ai_scores_accts_industry_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_industry_conf])         // get the accounts average industry conf
			)
			RETURN
			_avg
		displayFolder: _factor1_value
		lineageTag: c64dac32-b1b6-4e5c-8888-326add4a49eb

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_accts_leadsource_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_leadsource_conf])         // get the accounts average leadsource conf
			)
			RETURN
			_avg
		displayFolder: _factor1_value
		lineageTag: 4af4dbbd-e95b-4791-af28-13336540d499

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_adj_duration_factor1_value' = ```
			
			VAR _tbl = CALCULATETABLE(ssr_history, ssr_history[step_name] in {"Prospecting", "New Logo Selling", "Post-Sales Support","Existing Customer Selling"}) // Get the current table context but exclude the unthcouded stage etc
			VAR res = AVERAGEX(
			    _tbl,
			     SWITCH(
			        ssr_history[stkhlds_all_adj_dur_rule],
			        "133002", 0.4,  // 133002 is industry avg, not reliable
			        "133001", 0.7,   // 133001 is peer avg, okay
			        "133003", 0.97,   // 133003 is the best info from the owner
			        "133004", 0.86    // 133004 is good data but not from the primary owner
			    )
			)
			
			RETURN 
			res
			```
		formatString: 0.00
		displayFolder: _factor1_value
		lineageTag: 78730502-80ca-4cce-b42d-5234fd16169f

	measure 'meas.ai_scores_ci_act_capt_lvl_conf_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_act_capt_lvl_conf])        // get the users_history average ci_act_capt_lvl
			)
			RETURN
			FORMAT(_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: 1da7cd80-ae31-496a-abfd-cdada445fdba

	measure 'meas.ai_scores_ci_closing_ability_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_close_ability_conf])        // get the avg closing ability conf
			)
			RETURN
			FORMAT(_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: cbcac673-2f14-4dbc-a705-37568fd63a3c

	measure 'meas.ai_scores_ci_deal_maxing_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_deal_maxing_conf])        // get the avg deal maximizing conf
			)
			RETURN
			_avg+0
		displayFolder: _factor1_value
		lineageTag: 641533dd-85cb-40a0-8913-51d2d2fd5f8d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_discovery_skill_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_discov_skills_conf]),        // get the avg discovery skill conf
			    users[trueai_user_role_function] in {"AE", "AM", "SDR"}
			)
			RETURN
			_avg
		displayFolder: _factor1_value
		lineageTag: 3c99cf6e-6884-423f-9b93-d1b1dd48eac0

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_engagement_ability_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_engmt_ability_conf]),        // get the avg engagement ability conf
			    users[trueai_user_role_function] in  {"AE", "AM", "SDR"}
			)
			RETURN
			_avg
		displayFolder: _factor1_value
		lineageTag: 4346bd13-950f-4f44-bc11-c472b65fe848

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_time_allocation_factor1_value' =
			
			var reps_w_ta = CALCULATE([meas.reps_w_time_allocation_count], users[trueai_user_role_function] in {"AE", "AM", "SDR"})
			RETURN
			reps_w_ta+0
		formatString: 0.00
		displayFolder: _factor1_value
		lineageTag: ea5332c7-0de2-4daf-8cb7-1c2b6695ba96

	measure 'meas.ai_scores_ci_time_management_factor1_value' = ```
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_time_mgmt_conf])      // get the avg time mgmt conf
			)
			
			RETURN 
			FORMAT(_avg, "0.00")
			```
		displayFolder: _factor1_value
		lineageTag: 5fdf05a9-0d69-418c-9ca9-866fcfecf9a3

	measure 'meas.ai_scores_ci_work_effort_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_work_effort_conf])      // get the avg work effort conf for AE, AM and SDR role
			)
			
			RETURN
			FORMAT(_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: d3d8bc69-199e-4596-bab3-1674f5efd4cb

	measure 'meas.ai_scores_existing_customer_selling_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var existing_cust_auc = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_auc])     // get the latest auc for existing customer
			RETURN
			FORMAT(existing_cust_auc, "0.00")
		displayFolder: _factor1_value
		lineageTag: 95206c4e-d225-4f46-ab3d-a9ff209b1848

	measure 'meas.ai_scores_general_score_factor1_value' =
			
			var res = 1.0
			RETURN
			res
		displayFolder: _factor1_value
		lineageTag: bcd663d2-58e2-4db4-ae3c-6ce46b4ca129

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_leads_industry_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_industry_conf])         // get the leads average industry conf
			)
			RETURN
			FORMAT(_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: 08cd9b25-205a-48a8-bb2f-79b8052291e6

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_leads_leadsource_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_leadsource_conf])         // get the leads average leadsource conf
			)
			RETURN
			FORMAT(_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: 39ebb921-3dc1-4a39-aa86-8581d8d29be8

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_line_items_products_factor1_value' = ```
			
			var won_deals = CALCULATE(
			    COUNT(ssr_history[_sys_doc_id]),                // get the won deals
			    opps[trueai_is_won]=True
			)
			
			VAR _won_deals_w_line = CALCULATE(
			        DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			        opps[trueai_is_won] = True,                      // get the won deals count with line items
			        FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			    )
			
			var _won_ratio = DIVIDE(_won_deals_w_line,won_deals,0)         // won ratio
			
			
			
			RETURN
			FORMAT(_won_ratio, "0%")
			```
		displayFolder: _factor1_value
		lineageTag: 49312bdd-1105-4544-9f95-f257873fbe76

	measure 'meas.ai_scores_list_price_items_factor1_value' = ```
			
			var total_list_items = CALCULATE(count(opp_line_items[trueai_list_price]))      // get all the list_price count 
			
			RETURN
			total_list_items+0
			```
		formatString: 0
		displayFolder: _factor1_value
		lineageTag: 60811fc7-afd2-43dd-9e9a-2762cd8a5d74

	measure 'meas.ai_scores_new_logo_selling_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var new_logo_auc = MAXX(latest_row, companies_history[di_pred_new_logo_auc])     // get the latest auc for new_logo_selling
			RETURN
			FORMAT(new_logo_auc, "0.00")
		displayFolder: _factor1_value
		lineageTag: e12ed20f-f892-45c4-aad8-7bcf1b703801

	measure 'meas.ai_scores_opps_history_factor1_value' = ```
			
			var res = [meas.total_opps_count]       // get the total opps count 
			
			RETURN
			res
			```
		formatString: 0
		displayFolder: _factor1_value
		lineageTag: 88220627-b28d-4a2f-a86e-a370dad00ede

	measure 'meas.ai_scores_opps_industry_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(opps[trueai_industry_conf])         // get the opps average industry conf
			)
			RETURN
			FORMAT(_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: 93bc9da7-c7b8-40f5-b584-8add5eb22f45

	measure 'meas.ai_scores_opps_leadsource_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(opps[trueai_leadsource_conf])         // get the opps average leadsource conf
			)
			RETURN
			FORMAT(_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: 72f92283-eb2d-4c76-9654-2f099e1c3dd3

	measure 'meas.ai_scores_performance_tiers_factor1_value' =
			
			var perf_avg = CALCULATE(AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]))        // get the avg performance tier conf
			RETURN
			FORMAT(perf_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: aabc3ea3-550c-4c76-8199-1a09266b4e3c

	measure 'meas.ai_scores_post_sales_support_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var post_sales_auc = MAXX(latest_row, companies_history[di_pred_post_sales_auc])     // get the latest auc for post sales support
			RETURN
			FORMAT(post_sales_auc, "0.00")
		displayFolder: _factor1_value
		lineageTag: 4174000b-df69-4da9-a282-a6b9eb96248a

	measure 'meas.ai_scores_potential_acv_factor1_value' =
			
			// as we don't have some field to calculate the factor I am using here temporary variable for visualization purpose. need to apply the actual field while available
			var temp = 0.80     // temp value for factor analysis
			RETURN
			temp
		displayFolder: _factor1_value
		lineageTag: c765acfb-e0f7-4ce1-9cca-f1cd0c47a018

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_prospecting_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var prospect_auc = MAXX(latest_row, companies_history[di_pred_prospecting_auc])     // get the latest auc for prospecting
			RETURN
			FORMAT(prospect_auc, "0.00")
		displayFolder: _factor1_value
		lineageTag: 0972da0d-d92d-40d3-88b6-31b91bae569f

	measure 'meas.ai_scores_ramping_count_rate_factor1_value' = ```
			
			var fromDate =[meas.context_date_min] 
			var toDate = [meas.context_date_max] 
			
			var applicable_rows_tbl = CALCULATETABLE(users_history, users_history[col.ci.perf_ramping_status] ="Ramping" ,  LASTNONBLANK(users_history[_sys_filt_start_date],users_history[_sys_filt_start_date]))  // get only the last entry in each filter context period (e.g. a year)
			
			var active_users_tbl =  filter(applicable_rows_tbl, [trueai_hire_date] <  toDate   && if(isblank([trueai_termination_date]), date(2100,1,1),[trueai_termination_date]) >=  toDate) // make sure we only include reps that are in the active 
			
			var _cnt = COUNTROWS(DISTINCT(SELECTCOLUMNS(active_users_tbl, users_history[_sys_user_id]))) // get a disctinct count of users from that filter context 
			
			var res  = MIN(_cnt/3, 1)       // get the minimum if there is no ramping reps 
			RETURN
			res+0
			```
		displayFolder: _factor1_value
		lineageTag: 9efba05e-5ee4-4205-805d-1baca8e33807

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_rep_org_calibration_factor1_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))       // grt the most latest row
			var users_match_hr_id = MAXX(latest_table, [users_match_hr_id])         
			var users_hr_file = MAXX(latest_table, companies_history[users_hr_file])           
			
			var res = (1 - DIVIDE(users_match_hr_id, users_hr_file, 0))
			RETURN
			FORMAT(res,"0%")
			```
		displayFolder: _factor1_value
		lineageTag: cb095a91-0df2-4e56-81a5-262990050f8f

	measure 'meas.ai_scores_revenue_calibration_factor1_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC)) 
			var _booking_amt = MAXX(latest_table,companies_history[ttm_ref_date_revenue]) 
			RETURN
			_booking_amt
			```
		displayFolder: _factor1_value
		lineageTag: e880eab7-5c90-4b09-a777-fa47ae818adc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ssr_industry_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_industry_conf])         // get the ssr average industry conf
			)
			RETURN
			FORMAT(_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: 90726119-0ec7-4e1e-91ee-7bbfd2da9356

	measure 'meas.ai_scores_ssr_leadsource_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_leadsource_conf])         // get the ssr average leadsource conf
			)
			RETURN
			FORMAT(_avg, "0.00")
		displayFolder: _factor1_value
		lineageTag: a4de2f14-f93d-469e-ad22-6155c5cc7c9a

	measure 'meas.ai_scores_success_factor_analysis_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var  train_score= MAXX(latest_row, companies_history[di_success_prob_training_score])     // get the latest train score
			RETURN
			FORMAT(train_score, "0.00")
		displayFolder: _factor1_value
		lineageTag: a48317f5-a775-4463-bc5c-264b79724b39

	measure 'meas.ai_scores_vi_step_diff_factor1_value' =
			
			var diff1 = [meas.ssr_history_step_diff]        // diff 1
			RETURN
			FORMAT(diff1, "0.00")
		displayFolder: _factor1_value
		lineageTag: 88399f1d-a2a5-4dc6-85ab-5d9be411da54

	measure 'meas.ai_score' = ```
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var pre_boost_value = SWITCH(
			    score_name,
			    "Prospecting Success Predictions", [meas.ai_scores_pred_prospecting],    // score_id 1
			    "New Logo Selling Success Predictions", [meas.ai_scores_pred_new_logo_selling],    // score_id 2
			    "Post-Sales Support Success Predictions", [meas.ai_scores_pred_post_sales_support],    // score_id 3
			    "Existing Customer Selling Success Predictions", [meas.ai_scores_pred_existing_customer_selling],    // score_id 4
			    "Success Factor Analysis", [meas.ai_scores_success_factor_analysis],                      // score id 5
			    "Potential ACV", [meas.ai_scores_potential_acv],                      // score id 6
			    "List Price", [meas.ai_scores_list_price],                      // score id 7
			    "Line Item Products", [meas.ai_scores_line_items_products],                      // score id 8
			    "Accounts Industry Consolidation", [meas.ai_scores_accts_industry],                // score id 9 
			    "Accounts Lead Source Consolidation", [meas.ai_scores_accts_leadsource],                // score id 10 
			    "Leads Industry Consolidation", [meas.ai_scores_leads_industry],                // score id 11 
			    "Leads Lead Source Consolidation", [meas.ai_scores_leads_leadsource],                // score id 12 
			    "Opps Industry Consolidation", [meas.ai_scores_opps_industry],                // score id 13 
			    "Opps Lead Source Consolidation", [meas.ai_scores_opps_leadsource],                // score id 14 
			    "SSR Industry Consolidation", [meas.ai_scores_ssr_industry],                // score id 15 
			    "SSR Lead Source Consolidation", [meas.ai_scores_ssr_leadsource],                // score id 16 
			    "Opportunities History", [meas.ai_scores_opps_history],                // score id 17 
			    "Activity Capture Level", [meas.ai_scores_ci_act_capt_lvl],                // score id 18 
			    "Activity Capture Level Confidence", [meas.ai_scores_ci_act_capt_lvl_conf],                // score id 18 
			    "Time Allocation", [meas.ai_scores_ci_time_alloc],                // score id 19 
			    "Adjusted Duration", [meas.ai_scores_adj_duration],                // score id 20 
			    "Closing Ability", [meas.ai_scores_ci_closing_ability],                  // score_id 21 
			    "Discovery Skill", [meas.ai_scores_ci_discovery_skill],               // score_id 22 
			    "Engagement Ability", [meas.ai_scores_ci_engagement_ability],                      // score_id 23 
			    "Work Effort", [meas.ai_scores_ci_work_effort],                      // score_id 24 
			    "Deal Maximizing", [meas.ai_scores_ci_deal_maxing],                        // score_id 25 
			    "Performance Tiers", [meas.ai_scores_performance_tiers],                            // score_id 26 
			    "Ramping Success", [meas.ai_scores_ramping],                                  // score_id 27 
			    "Time Management", [meas.ai_scores_ci_time_management],                // score_id 28 
			    "VI Amount", [meas.ai_scores_vi],               // score_id 24 
			    "Rep Organization Calibration", [meas.ai_scores_rep_org_calibration],
			    "Bookings Calibration", [meas.ai_scores_booking_calibration],
			    "Revenue Calibration", [meas.ai_scores_revenue_calibration],
			    "Leads & Accounts Completeness  Data Present",[meas.ai_scores_general_score],
			    BLANK()
			)
			
			var expo_boost = MAX(metadata_ai_scores[boost_expo])
			var post_boosted_value = pre_boost_value ^ expo_boost // // Raise the pre-boost value to the power of expo_boost (exponential boost)
			
			RETURN post_boosted_value
			```
		lineageTag: a0c3cd02-2e23-4742-8929-8b59cae71b90

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_score_formula' = ```
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Prospecting Success Predictions", "meas.ai_scores_pred_prospecting = 
			                                        var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			                                        var di_pred_prospecting_auc = MAXX(latest_row, companies_history[di_pred_prospecting_auc])     // get the latest auc 
			                                        var di_pred_prospecting_r2 = MAXX(latest_row, companies_history[di_pred_prospecting_r2])     // get the latest r2 
			                                        var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			                                        var normalized_di_pred_prospecting_auc  = (MAX((di_pred_prospecting_auc-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			                                        var normalized_di_pred_prospecting_r2  = MAX(di_pred_prospecting_r2, 0) // avoid neg numbers from factor2
			
			                                        var score  = ((normalized_di_pred_prospecting_auc + normalized_di_pred_prospecting_r2)/2) ^ boost_expo  // avg of both normalized score + boosting
			                                        var _conf = round(score * 100 ,0) // make it an integer score
			
			                                        RETURN 
			                                        _conf",
			
			    "New Logo Selling Success Predictions", "meas.ai_scores_pred_new_logo_selling = 
			                                            var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			                                            var di_pred_new_logo_auc = MAXX(latest_row, companies_history[di_pred_new_logo_auc])     // get the latest auc 
			                                            var di_pred_new_logo_r2 = MAXX(latest_row, companies_history[di_pred_new_logo_r2])     // get the latest r2 
			                                            var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			                                            var normalized_di_pred_new_logo_auc  = (MAX((di_pred_new_logo_auc-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			                                            var normalized_di_pred_new_logo_r2  = MAX(di_pred_new_logo_r2, 0) // avoid neg numbers from factor2
			
			                                            var score  = ((normalized_di_pred_new_logo_auc + normalized_di_pred_new_logo_r2)/2) ^ boost_expo  // avg of both normalized score + boosting
			                                            var _conf = round(score * 100 ,0) // make it an integer score
			
			                                            RETURN 
			                                            _conf",
			    "Post-Sales Support Success Predictions",   "meas.ai_scores_post_sales_support = 
			                                            var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			                                            var di_pred_post_sales_auc = MAXX(latest_row, companies_history[di_pred_post_sales_auc])     // get the latest auc 
			                                            var di_pred_post_sales_r2 = MAXX(latest_row, companies_history[di_pred_post_sales_r2])     // get the latest r2 
			                                            var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			                                            var normalized_di_pred_post_sales_auc  = (MAX((di_pred_post_sales_auc-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			                                            var normalized_di_pred_post_sales_r2  = MAX(di_pred_post_sales_r2, 0) // avoid neg numbers from factor2
			
			                                            var score  = ((normalized_di_pred_post_sales_auc + normalized_di_pred_post_sales_r2)/2) ^ boost_expo  // avg of both normalized score + boosting
			                                            var _conf = round(score * 100 ,0) // make it an integer score
			
			                                            RETURN 
			                                            _conf",
			    "Existing Customer Selling Success Predictions", "meas.ai_scores_pred_existing_customer_selling = 
			                                            var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			                                            var di_pred_existing_customer_selling_auc = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_auc])     // get the latest auc 
			                                            var di_pred_existing_customer_selling_r2 = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_auc])     // get the latest r2 
			                                            var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			                                            var normalized_di_pred_existing_customer_selling_auc  = (MAX((di_pred_existing_customer_selling_auc-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			                                            var normalized_di_pred_existing_customer_selling_r2  = MAX(di_pred_existing_customer_selling_r2, 0) // avoid neg numbers from factor2
			
			                                            var score  = ((normalized_di_pred_existing_customer_selling_auc + normalized_di_pred_existing_customer_selling_r2)/2) ^ boost_expo  // avg of both normalized score + boosting
			                                            var _conf = round(score * 100 ,0) // make it an integer score
			
			                                            RETURN 
			                                            _conf",    
			    "Success Factor Analysis", "meas.ai_scores_success_factor_analysis = 
			                                var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			                                var train_score = [meas.ai_scores_success_factor_analysis_factor1_value]        // latest  traing scofre
			                                var validation_score = [meas.ai_scores_success_factor_analysis_factor2_value]    // latest avg validation
			                                var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			                                var train_score_norm  = MAX(train_score, 0) // avoid neg
			                                var validation_score_norm  = (MAX((validation_score-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			                                var score  = ((train_score_norm + validation_score_norm)/2) ^ boost_expo  // avg of both normalized score + boosting
			                                var _conf = round(score * 100 ,0) // make it an integer score
			
			                                RETURN
			                                _conf
			                                    ",
			    "Potential ACV","meas.ai_scores_potential_acv = 
			                            // as we don't have some field to calculate the factor I am using here temporary variable for visualization purpose. need to apply the actual field while available
			                            var temp = 0.80     // temp value for factor analysis
			                            var boost_expo = 0.9            // we uyse this to get the closer one value
			                            var score = temp^boost_expo     // boosting the actual 
			                            var res = ROUND(score*100, 0)
			                            RETURN
			                            res",
			    "List Price", "meas.ai_scores_list_price = 
			                            var total_list_items = CALCULATE(count(opp_line_items[trueai_list_price]))      // get all the list_price count 
			                            var total_list_items_non_default = CALCULATE(
			                                count(opp_line_items[trueai_list_price]),      // non default list price items count
			                                opp_line_items[trueai_list_price_rule] <> '103007'
			                            )
			                            var score = ( total_list_items_non_default * 0.49 + (total_list_items_non_default - total_list_items) * 1) / total_list_items       // formula to calculate the list price score
			                            var res = ROUND(score*100, 0)
			                            RETURN
			                            res",
			    "Line Item Products", "meas.ai_scores_line_items_products = 
			                        var won_deals = CALCULATE(
			                            COUNT(ssr_history[_sys_doc_id]),                // get the won deals
			                            opps[trueai_is_won]=True
			                        )
			                        VAR _won_deals_w_line = CALCULATE(
			                                DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			                                opps[trueai_is_won] = True,                      // get the won deals count with line items
			                                FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			                            )
			                        var _won_ratio = DIVIDE(_won_deals_w_line,won_deals,0)            // get the won deals with line items ratio
			                        var lost_deals =CALCULATE(
			                            COUNT(ssr_history[_sys_doc_id]),                // get the lost deals
			                            opps[trueai_is_won]=False
			                        )
			                        var _lost_deals_w_line = CALCULATE(
			                                DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			                                opps[trueai_is_won] = False,                      // get the lost deals count with line items
			                                FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			                            )
			                        var _lost_ratio = DIVIDE(_lost_deals_w_line,lost_deals,0)           // get the lost deals with line items ratio
			                        var _won_weight = 0.70           // won weight
			                        var _lost_weight = 0.30         // lost deals ratio
			                        var score = (_won_ratio*_won_weight+_lost_ratio*_lost_weight)
			                        var res = ROUND(score*100,0)
			                        RETURN
			                        res",
			    "Opportunities History", "meas.ai_scores_opps_history = 
			                            var total_opps = CALCULATE(COUNT(ssr_history[entity_opp_id]))         // get the count of the opp id
			                            var opps_with_history = CALCULATE(DISTINCTCOUNT(opps_histories[crm_opp_id]))         // get the opps with Opp history
			                            var _conf = DIVIDE(opps_with_history, total_opps,0)
			                            var res = ROUND(_conf*100,0)
			                            RETURN 
			                            res",
			    "Accounts Industry Consolidation", "meas.ai_scores_accts_industry = 
			                                        var trueai_industry_conf = CALCULATE(
			                                            AVERAGE(accounts[trueai_industry_conf])         // get the accounts average industry conf
			                                        )
			                                        var _conf = ROUND(trueai_industry_conf,0)*100    
			                                        RETURN 
			                                        _conf",
			    "Accounts Lead Source Consolidation", "meas.ai_scores_accts_leadsource = 
			                            var trueai_leadsource_conf = CALCULATE(
			                                            AVERAGE(accounts[trueai_leadsource_conf])         // get the accounts average leadsource conf
			                                        )
			                            var _conf = ROUND(trueai_leadsource_conf,0)*100    
			                            RETURN 
			                            _conf", 
			    "Leads Industry Consolidation", "meas.ai_scores_leads_industry = 
			                            var trueai_industry_conf = CALCULATE(
			                                            AVERAGE(leads[trueai_industry_conf])         // get the leads average industry conf
			                                        )
			                            var _conf = ROUND(trueai_industry_conf,0)*100    
			                            RETURN 
			                            _conf",
			    "Leads Lead Source Consolidation", "meas.ai_scores_leads_leadsource = 
			                            var trueai_leadsource_conf = CALCULATE(
			                                            AVERAGE(leads[trueai_leadsource_conf])         // get the leads average leadsource conf
			                                        )
			                            var _conf = ROUND(trueai_leadsource_conf,0)*100    
			                            RETURN 
			                            _conf",
			    "Opps Industry Consolidation", "meas.ai_scores_opps_industry = 
			                            var trueai_industry_conf = CALCULATE(
			                                            AVERAGE(opps[trueai_industry_conf])         // get the opps average industry conf
			                                        )
			                            var _conf = ROUND(trueai_industry_conf,0)*100    
			                            RETURN 
			                            _conf",
			    "Opps Lead Source Consolidation", "meas.ai_scores_opps_leadsource = 
			                                var trueai_leadsource_conf = CALCULATE(
			                                            AVERAGE(opps[trueai_leadsource_conf])         // get the opps average leadsource conf
			                                        )
			                                var _conf = ROUND(trueai_leadsource_conf,0)*100    
			                                RETURN 
			                                _conf",
			    "SSR Industry Consolidation", "meas.ai_scores_ssr_industry = 
			                                var trueai_industry_conf = CALCULATE(
			                                            AVERAGE(ssr[trueai_industry_conf])         // get the ssr average industry conf
			                                        )
			                                var _conf = ROUND(trueai_industry_conf,0)*100    
			                                RETURN 
			                                _conf",
			    "SSR Lead Source Consolidation", "meas.ai_scores_ssr_leadsource = 
			                            var trueai_leadsource_conf = CALCULATE(
			                                            AVERAGE(ssr[trueai_leadsource_conf])         // get the ssr average leadsource conf
			                                        )
			                            var _conf = ROUND(trueai_leadsource_conf,0)*100
			                            RETURN 
			                            _conf",
			    "Activity Capture Level", "meas.ai_scores_ci_act_capt_lvl = 
			                            var _avg = CALCULATE(
			                                AVERAGE(users_history[ci_act_capt_lvl])         // get the users_history average ci_act_capt_lvl conf
			                            )
			                            var boost_expo = 0.90           // exponent value 
			                            var _boosted_avg = (_avg)^ boost_expo     // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			                            var _conf = ROUND(_boosted_avg,0)*100  // round the number and for integar value  
			                            RETURN 
			                            _conf",
			    "Activity Capture Level Confidence", "meas.ai_scores_ci_act_capt_lvl = 
			                            var _avg = CALCULATE(
			                                AVERAGE(users_history[ci_act_capt_lvl_conf])         // get the users_history average ci_act_capt_lvl conf
			                               
			                            )
			                            var boost_expo = 0.90           // exponent value 
			                            var _boosted_avg = (_avg)^ boost_expo     // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			                            var _conf = ROUND(_boosted_avg,0)*100  // round the number and for integar value  
			                            RETURN 
			                            _conf",
			
			    "Time Allocation", "meas.ai_scores_ci_time_alloc = 
			                        var reps_w_ta = CALCULATE([meas.reps_w_time_allocation_count], users[trueai_user_role_function] in {'AE', 'AM', 'SDR'})
			                        var reps_tot = CALCULATE([meas.data_logs_user_count_eop], users[trueai_user_role_function] in {'AE', 'AM', 'SDR'})
			                        var _avg =DIVIDE(reps_w_ta, reps_tot)        // get the % of reps w TA
			                        var boost_expo = 0.90           // exponent value 
			                        var _new_avg = (_avg)*boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			                        var _conf = ROUND(_new_avg*100,0)  // round the number and for integar value  
			                        RETURN 
			                        _conf",
			    "Adjusted Duration", "meas.ai_scores_adj_duration = 
			                        VAR _tbl = CALCULATETABLE(ssr_history, ssr_history[step_name] in {'Prospecting', 'New Logo Selling', 'Post-Sales Support','Existing Customer Selling'}) // Get the current table context but exclude the unthcouded stage etc
			                        VAR res = AVERAGEX(
			                            _tbl,
			                            SWITCH(
			                                ssr_history[stkhlds_all_adj_dur_rule],
			                                '133002', 0.4,  // 133002 is industry avg, not reliable
			                                '133001', 0.7,   // 133001 is peer avg, okay
			                                '133003', 0.97,   // 133003 is the best info from the owner
			                                '133004', 0.86    // 133004 is good data but not from the primary owner
			                            )
			                        )
			                        var boost_expo = 0.90           // exponent value 
			                        var _new_avg = (res)^ boost_expo               // get the expo value to enhance output
			                        var _conf = ROUND(_new_avg*100,0)  // round the number and for integar value
			                        RETURN 
			                        _conf", 
			    "Closing Ability", "meas.ai_scores_ci_closing_ability = 
			                var _avg = CALCULATE(
			                AVERAGE(
			                    users_history[ci_sb_close_ability_conf])        // get the avg closing ability conf
			                    
			                )
			                var boost_expo = 0.90
			                var _new_avg = (_avg)^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be  
			                var _conf = ROUND(_new_avg*100,0)  // round the number and for integar value
			                RETURN 
			                _conf",
			    "Discovery Skill", "meas.ai_scores_ci_discovery_skill = 
			               var _avg = CALCULATE(
			                    AVERAGE(users_history[ci_sb_discov_skills_conf])        // get the avg discovery skill conf
			                    
			                )
			                var boost_expo = 0.90
			                var _new_avg = (ABS(_avg))^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			                var _conf = ROUND(_avg*100 ,0) // round the number and for integar value
			                RETURN 
			                _conf",
			    "Engagement Ability", "meas.ai_scores_ci_engagement_ability = 
			                var _avg = CALCULATE(
			                    AVERAGE(users_history[ci_sb_engmt_ability_conf])        // get the avg engagement ability conf
			                    
			                )
			                var boost_expo = 0.90           // exponent value 
			                var _new_avg = (_avg)^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			                var _conf = ROUND(_avg*100,0)  // round the number and for integar value
			                RETURN 
			                _conf",
			    "Work Effort", "meas.ai_scores_ci_work_effort = 
			                    var _avg = CALCULATE(
			                        AVERAGE(users_history[ci_sb_work_effort_conf])        // get the avg work effort conf for AE, AM and SDR role
			                        
			                    )
			                    var boost_expo = 0.90           // exponent value 
			                    var _new_avg = (_avg)^ boost_expo               // get the expo value to enhance output
			                    var _conf = ROUND(_avg*100,0)  // round the number and for integar value
			                    RETURN 
			                    _conf", 
			    "Deal Maximizing", "meas.ai_scores_ci_deal_maxing = 
			                        var _avg = CALCULATE(
			                            AVERAGE(users_history[ci_sb_deal_maxing_conf])        // get the avg deal maximizing conf
			                        )
			                        var boost_expo = 0.90           // exponent value 
			                        var _new_avg = (_avg)^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			                        var _conf = ROUND(_avg*100,0)  // round the number and for integar value
			                        RETURN 
			                        _conf",
			    "Performance Tiers", "meas.ai_scores_performance_tiers = 
			                        var score = CALCULATE(AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]))        // get the avg performance tier conf
			                        var res = ROUND(score*100, 0)       // get the int number
			                        RETURN
			                        res",
			    "Ramping Success", "meas.ai_scores_ramping = 
			                    var fromDate =[meas.context_date_min] 
			                    var toDate = [meas.context_date_max] 
			                    var applicable_rows_tbl = CALCULATETABLE(users_history, users_history[col.ci.perf_ramping_status] ='Ramping' ,  LASTNONBLANK(users_history[_sys_filt_start_date],users_history[_sys_filt_start_date]))  // get only the last entry in each filter context period (e.g. a year)
			                    var active_users_tbl =  filter(applicable_rows_tbl, [trueai_hire_date] <  toDate   && if(isblank([trueai_termination_date]), date(2100,1,1),[trueai_termination_date]) >=  toDate) // make sure we only include reps that are in the active 
			                    var _cnt = COUNTROWS(DISTINCT(SELECTCOLUMNS(active_users_tbl, users_history[_sys_user_id]))) // get a disctinct count of users from that filter context 
			                    var ramp_rate  = MIN(_cnt/3, 1)       // get the minimum if there is no ramping reps
			
			                    var _perf_score = CALCULATE(
			                        AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]),       // get the avg perf conf
			                        users_history[col.ci.perf_ramping_status] ='Ramping'
			                    )
			                    var boost_expo = 0.5            // we use this to get the closer one value
			                    var score = (ramp_rate * perf_score)^boost_expo     // boosting the actual 
			                    var res = ROUND(score*100, 0)+0
			                    RETURN
			                    res",
			    "Time Management", "meas.ai_scores_ci_time_management = 
			                    var _avg = CALCULATE(
			                        AVERAGE(users_history[ci_sb_time_mgmt_conf])      // get the avg time mgmt conf
			                    )
			                    var boost_expo = 0.90
			                    var _new_avg = (_avg)^ boost_expo   // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			                    var _conf = ROUND(_new_avg*100,0)  // round the number and for integar value
			                    RETURN 
			                    _conf", 
			    "VI Amount", "meas.ai_scores_vi = 
			                var factor1 = [meas.ai_scores_vi_step_diff_factor1]      // get the factor 1
			                var _new_logo = ABS([meas.ssr_history_vi_new_logo_diff_ratio])           // get the new logo diff
			                var _existing = abs([meas.ssr_history_vi_existing_customer_diff_ratio])      // get the existing cust diff
			                var Sales_Diff = (_new_logo+_existing)
			
			                var _lead = ABS([meas.ssr_history_vi_lead_diff_ratio])           // get the lead diff
			                var _pre = ABS([meas.ssr_history_vi_pre_diff_ratio])     // get the epre diff
			                var _sell = ABS([meas.ssr_history_vi_sell_diff_ratio])       // get the sell diff
			                var VI_Tuning_Share_Diff = (_lead+_pre+_sell)            // sum 
			
			                var score = (1 - (Sales_Diff+VI_Tuning_Share_Diff)/2)
			                var _conf = ROUND(score*100,0)    
			                RETURN
			                _conf",
			    "Rep Organization Calibration", "meas.ai_scores_rep_org_calibration = 
			                    var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))       // grt the most latest row
			                    var _total_users = MAXX(latest_table,companies_history[users])          // total users
			
			                    var users_match_hr_id = MAXX(latest_table, [users_match_hr_id])         // total matched reps
			                    var users_hr_file = MAXX(latest_table, companies_history[users_hr_file])           // reps in hr file
			
			                    var users_non_match_hr_id_won_deals = MAXX(latest_table, companies_history[users_non_match_hr_id_won_deals])            // non match won deals reps
			                    var users_non_match_hr_id_pipeline = MAXX(latest_table, companies_history[users_non_match_hr_id_pipeline])          // non match pipeline gen reps
			                    var users_non_match_hr_id_leads = MAXX(latest_table, companies_history[users_non_match_hr_id_leads])          // non match lead gen reps count
			                    var users_match_hr_id_nd_role = MAXX(latest_table, companies_history[users_match_hr_id_nd_role])                  // non match reps with role
			                    var users_match_hr_id_nd_group = 0
			
			                    var matched_reps_score = DIVIDE(users_match_hr_id,users_hr_file,0)
			                    var won_deals_score = (1 - DIVIDE(users_non_match_hr_id_won_deals, _total_users, 0))
			                    var pipeline_gen_score = (1 - DIVIDE(users_non_match_hr_id_pipeline, _total_users, 0))
			                    var lead_gen_score = (1 - DIVIDE(users_non_match_hr_id_leads, _total_users, 0))               //raw score calculation for each
			                    var reps_w_role_score = (1 - DIVIDE(users_match_hr_id_nd_role,users_hr_file,0))
			                    //var reps_w_group_ratio = DIVIDE(reps_group,_hr_file_users,0)
			
			                    VAR Row1 = ROW ( 'Value', matched_reps_score, 'Weight', 3 )
			                    VAR Row2 = ROW ( 'Value', won_deals_score, 'Weight', 2 )
			                    VAR Row3 = ROW ( 'Value', pipeline_gen_score, 'Weight', 1 )          //raw score and weight  added in the table  for each reps count
			                    VAR Row4 = ROW ( 'Value', lead_gen_score, 'Weight', 1 )
			                    VAR Row5 = ROW ( 'Value', reps_w_role_score, 'Weight', 2 )
			                    VAR temp_tbl =
			                        UNION ( Row1, Row2, Row3, Row4, Row5 )          //creating the table
			
			                    var _adj_calib = SUMX(temp_tbl, [Value]*[Weight])           // get the adjusted raw score
			                    var _importance = SUMX(temp_tbl, [Weight])                  // sum of the total weight
			                    var raw_score = DIVIDE(_adj_calib, _importance,0)                 // get the score
			
			                    var boost_expo = 0.9            // we use this to get the closer one value
			                    var score = raw_score^boost_expo     // boosting the actual 
			                    var res = MIN(MAX(ROUND(score*100,0),0),100)
			                    RETURN
			                    res",
			    "Bookings Calibration", "meas.ai_scores_booking_calibration = 
			                var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))  
			                var ttm_ref_date_bookings = MAXX(latest_table,companies_history[ttm_ref_date_bookings])      ///get the ttm booking
			                var di_amt_won_last12months = MAXX(latest_table,companies_history[di_amt_won_last12months]) 
			                var score = (ttm_ref_date_bookings - ABS(ttm_ref_date_bookings - di_amt_won_last12months))/ttm_ref_date_bookings
			                var _conf = ROUND(score*100, 0)
			                RETURN
			                _conf",
			    "Revenue Calibration", "meas.ai_scores_revenue_calibration = 
			                var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC)) 
			                var ttm_ref_date_revenue = MAXX(latest_table,companies_history[ttm_ref_date_revenue]) // get the ttm revenue amt 
			                var di_amt_won_last12months = MAXX(latest_table,companies_history[di_amt_won_last12months])   
			                var score = (ttm_ref_date_revenue - ABS(ttm_ref_date_revenue - di_amt_won_last12months))/ttm_ref_date_revenue
			                var res = ROUND(score*100, 0)
			                RETURN
			                res",
			
			    "Leads & Accounts Completeness  Data Present", "meas.ai_scores_general_score = 
			            var general_score = 1.0            // get the factor value 1
			            var res = ROUND(general_score*100,0)
			            RETURN
			            res",
			    BLANK()
			)
			RETURN
			res
			```
		lineageTag: b83e36cc-b2c7-44c0-9dd6-2b8a99ddc64e

	measure 'meas.ai_score_measure_name' = ```
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Prospecting Success Predictions", "meas.ai_scores_pred_prospecting",   
			    "New Logo Selling Success Predictions", "meas.ai_scores_pred_new_logo_selling",    // score_id 2
			    "Post-Sales Support Success Predictions", "meas.ai_scores_pred_post_sales_support",    // score_id 3
			    "Existing Customer Selling Success Predictions", "meas.ai_scores_pred_existing_customer_selling",    // score_id 4
			    "Success Factor Analysis", "meas.ai_scores_factor_analysis",                      // score id 5
			    "Potential ACV", "meas.ai_scores_potential_acv",                      // score id 6
			    "List Price", "meas.ai_scores_all_list_price",                      // score id 7
			    "Line Item Products", "meas.ai_scores_line_items_products",                      // score id 8
			    "Accounts Industry Consolidation", "meas.ai_scores_accts_industry",                // score id 9 
			    "Accounts Lead Source Consolidation", "meas.ai_scores_accts_leadsource",                // score id 10 
			    "Leads Industry Consolidation", "meas.ai_scores_leads_industry",                // score id 11 
			    "Leads Lead Source Consolidation", "meas.ai_scores_leads_leadsource",                // score id 12 
			    "Opps Industry Consolidation", "meas.ai_scores_opps_industry",                // score id 13 
			    "Opps Lead Source Consolidation", "meas.ai_scores_opps_leadsource",                // score id 14 
			    "SSR Industry Consolidation", "meas.ai_scores_ssr_industry",                // score id 15 
			    "SSR Lead Source Consolidation", "meas.ai_scores_ssr_leadsource",                // score id 16 
			    "Opportunities History", "meas.ai_scores_opps_history",                // score id 17 
			    "Leads & Accounts Completeness  Data Present","meas.ai_scores_general_score",
			    "Activity Capture Level", "meas.ai_scores_ci_act_capt_lvl",                // score id 18 
			    "Time Allocation", "meas.ai_scores_ci_time_alloc",                // score id 19 
			    "Adjusted Duration", "meas.ai_scores_adj_duration",                // score id 20 
			    "Closing Ability", "meas.ai_scores_ci_closing_ability",                  // score_id 21 
			    "Discovery Skill", "meas.ai_scores_ci_discovery_skill",               // score_id 22 
			    "Engagement Ability", "meas.ai_scores_ci_engagement_ability",                      // score_id 23 
			    "Work Effort", "meas.ai_scores_ci_work_effort",                      // score_id 24 
			    "Deal Maximizing", "meas.ai_scores_ci_deal_maxing",                        // score_id 25 
			    "Performance Tiers", "meas.ai_scores_performance_tiers",                            // score_id 26 
			    "Ramping Success", "meas.ai_scores_ramping",                                  // score_id 27 
			    "Time Management", "meas.ai_scores_ci_time_management",                // score_id 28 
			    "VI Amount", "meas.ai_scores_vi",               // score_id 24 
			    "Rep Organization Calibration", "meas.ai_scores_rep_org_calibration",
			    "Bookings Calibration", "meas.ai_scores_booking_calibration",
			    "Revenue Calibration", "meas.ai_scores_revenue_calibration",
			    BLANK()
			)
			RETURN
			res
			```
		lineageTag: c8ba0855-de67-44fd-a49b-64d5bee7ddc8

	measure 'meas.ai_scores_factor1_name' = ```
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Prospecting Success Predictions", [meas.ai_scores_prospecting_factor1_name],    // score_id 1
			    "New Logo Selling Success Predictions", [meas.ai_scores_new_logo_selling_factor1_name],    // score_id 2
			    "Post-Sales Support Success Predictions", [meas.ai_scores_post_sales_factor1_name],    // score_id 3
			    "Existing Customer Selling Success Predictions", [meas.ai_scores_existing_customer_factor1_name],    // score_id 4
			    "Success Factor Analysis", [meas.ai_scores_success_analysis_factor1_name],                      // score id 5
			    "Potential ACV", [meas.ai_scores_potential_ACV_factor1_name],                      // score id 6
			    "List Price", [meas.ai_scores_list_price_items_factor1_name],                      // score id 7
			    "Line Item Products", [meas.ai_scores_line_items_products_factor1_name],                      // score id 8
			    "Opportunities History", [meas.ai_scores_opps_histories_factor1_name],
			    "Accounts Industry Consolidation", [meas.ai_scores_accts_industry_factor1_name],                // score id 9 
			    "Accounts Lead Source Consolidation", [meas.ai_scores_accts_leadsource_factor1_name],                // score id 10 
			    "Leads Industry Consolidation", [meas.ai_scores_leads_industry_factor1_name],                // score id 11 
			    "Leads Lead Source Consolidation", [meas.ai_scores_leads_leadsource_factor1_name],                // score id 12 
			    "Opps Industry Consolidation", [meas.ai_scores_opps_industry_factor1_name],                // score id 13 
			    "Opps Lead Source Consolidation", [meas.ai_scores_opps_leadsource_factor1_name],                // score id 14 
			    "SSR Industry Consolidation", [meas.ai_scores_ssr_industry_factor1_name],                // score id 15 
			    "SSR Lead Source Consolidation", [meas.ai_scores_ssr_leadsource_factor1_name],                // score id 16 
			    "Activity Capture Level", [meas.ai_scores_ci_act_capt_lvl_factor1_name],                // score  18
			    "Activity Capture Level Confidence", [meas.ai_scores_ci_act_capt_lvl_conf_factor1_name],
			    "Time Allocation", [meas.ai_scores_ci_time_alloc_factor1_name],                // score id 19 
			    "Adjusted Duration", [meas.ai_scores_adj_duration_factor1_name],                // score id 20 
			    "Closing Ability", [meas.ai_scores_ci_closing_ability_factor1_name],                  // score_id 21 
			    "Discovery Skill", [meas.ai_scores_ci_discovery_skill_factor1_name],               // score_id 22 
			    "Engagement Ability", [meas.ai_scores_ci_engagement_ability_factor1_name],                      // score_id 23 
			    "Work Effort", [meas.ai_scores_ci_work_effort_factor1_name],                      // score_id 24 
			    "Deal Maximizing", [meas.ai_scores_ci_deal_maxing_factor1_name],                        // score_id 25 
			    "Performance Tiers", [meas.ai_scores_performance_tiers_factor1_name],                            // score_id 26 
			    "Ramping Success", [meas.ai_scores_ramping_factor1_name],                                  // score_id 27 
			    "Time Management", [meas.ai_scores_ci_time_management_factor1_name],                // score_id 28 
			    "VI Amount", [meas.ai_scores_vi_factor1_name],               // score_id 24 
			    "Rep Organization Calibration", [meas.ai_scores_rep_org_calibration_factor1_name],
			    "Bookings Calibration", [meas.ai_scores_booking_calibration_factor1_name],
			    "Revenue Calibration", [meas.ai_scores_revenue_calibration_factor1_name],
			    "Leads & Accounts Completeness  Data Present", [meas.ai_scores_general_score_factor1_name],
			    "-"
			)
			
			RETURN
			res
			```
		lineageTag: b59e2b3c-8a05-46b9-96ad-9ebdb059374c

	measure 'meas.ai_scores_factor1_value' = ```
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Prospecting Success Predictions", [meas.ai_scores_prospecting_factor1_value],    // score_id 1
			    "New Logo Selling Success Predictions", [meas.ai_scores_new_logo_selling_factor1_value],    // score_id 2
			    "Post-Sales Support Success Predictions", [meas.ai_scores_post_sales_support_factor1_value],    // score_id 3
			    "Existing Customer Selling Success Predictions", [meas.ai_scores_existing_customer_selling_factor1_value],    // score_id 4
			    "Success Factor Analysis", [meas.ai_scores_success_factor_analysis_factor1_value],                      // score id 5
			    "Potential ACV", [meas.ai_scores_potential_acv_factor1_value],                      // score id 6
			    "List Price", [meas.ai_scores_list_price_items_factor1_value],                      // score id 7
			    "Line Item Products", [meas.ai_scores_line_items_products_factor1_value],                      // score id 8
			    "Opportunities History", [meas.ai_scores_opps_history_factor1_value],
			    "Accounts Industry Consolidation", [meas.ai_scores_accts_industry_factor1_value],                // score id 9 
			    "Accounts Lead Source Consolidation", [meas.ai_scores_accts_leadsource_factor1_value],                // score id 10 
			    "Leads Industry Consolidation", [meas.ai_scores_leads_industry_factor1_value],                // score id 11 
			    "Leads Lead Source Consolidation", [meas.ai_scores_leads_leadsource_factor1_value],                // score id 12 
			    "Opps Industry Consolidation", [meas.ai_scores_opps_industry_factor1_value],                // score id 13 
			    "Opps Lead Source Consolidation", [meas.ai_scores_opps_leadsource_factor1_value],                // score id 14 
			    "SSR Industry Consolidation", [meas.ai_scores_ssr_industry_factor1_value],                // score id 15 
			    "SSR Lead Source Consolidation", [meas.ai_scores_ssr_leadsource_factor1_value],                // score id 16 
			    "Activity Capture Level", FORMAT([meas.ai_scores_ci_act_capt_lvl_factor1_value],"0.00"),                // score  18 
			    "Activity Capture Level Confidence", [meas.ai_scores_ci_act_capt_lvl_conf_factor1_value],
			    "Time Allocation", FORMAT([meas.ai_scores_ci_time_allocation_factor1_value],"#,0"),                // score id 19 
			    "Adjusted Duration", FORMAT([meas.ai_scores_adj_duration_factor1_value],"0.00"),                // score id 20 
			    "Closing Ability", [meas.ai_scores_ci_closing_ability_factor1_value],                  // score_id 21 
			    "Discovery Skill", [meas.ai_scores_ci_discovery_skill_factor1_value],               // score_id 22 
			    "Engagement Ability", [meas.ai_scores_ci_engagement_ability_factor1_value],                      // score_id 23 
			    "Work Effort", [meas.ai_scores_ci_work_effort_factor1_value],                      // score_id 24 
			    "Deal Maximizing", [meas.ai_scores_ci_deal_maxing_factor1_value],                        // score_id 25 
			    "Performance Tiers", [meas.ai_scores_performance_tiers_factor1_value],                            // score_id 26 
			    "Ramping Success", [meas.ai_scores_ramping_count_rate_factor1_value],                                  // score_id 27 
			    "Time Management", [meas.ai_scores_ci_time_management_factor1_value],                // score_id 28 
			    "VI Amount", [meas.ai_scores_vi_step_diff_factor1_value],               // score_id 24 
			    "Rep Organization Calibration", FORMAT([meas.ai_scores_rep_org_calibration_factor1_value],"#,0"),
			    "Bookings Calibration", FORMAT([meas.ai_scores_booking_calibration_factor1_value],"$#,0"),
			    "Revenue Calibration", FORMAT([meas.ai_scores_revenue_calibration_factor1_value],"$#,0"),
			    "Leads & Accounts Completeness  Data Present", [meas.ai_scores_general_score_factor1_value],
			    "-"
			)
			
			RETURN
			res
			```
		lineageTag: 822233b1-79ae-4d66-b6a1-307424c79baf

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_factor2_name' = ```
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Prospecting Success Predictions", [meas.ai_scores_prospecting_factor2_name],    // score_id 1
			    "New Logo Selling Success Predictions", [meas.ai_scores_new_logo_factor2_name],    // score_id 2
			    "Post-Sales Support Success Predictions", [meas.ai_scores_post_sales_factor2_name],    // score_id 3
			    "Existing Customer Selling Success Predictions", [meas.ai_scores_existing_customer_factor2_name],    // score_id 4
			    "Success Factor Analysis", [meas.ai_scores_success_analysis_factor2_name],                      // score id 5
			    "List Price", [meas.ai_scores_list_price_items_factor2_name],                      // score id 7
			    "Line Item Products", [meas.ai_scores_line_items_products_factor2_name],                      // score id 8
			    "Opportunities History", [meas.ai_scores_opps_histories_factor2_name],
			    "Time Allocation", [meas.ai_scores_ci_time_alloc_factor2_name],                // score id 19  
			    "Ramping Success", [meas.ai_scores_ramping_factor2_name],                                  // score_id 27 
			    "VI Amount", [meas.ai_scores_vi_factor2_name],               // score_id 24 
			    "Rep Organization Calibration", [meas.ai_scores_rep_org_calibration_factor2_name],
			    "Bookings Calibration", [meas.ai_scores_booking_calibration_factor2_name],
			    "Revenue Calibration", [meas.ai_scores_revenue_calibration_factor2_name],
			    "-"
			)
			
			RETURN
			res
			```
		lineageTag: 0f4f2c54-fdd9-493c-a042-f0fbf0f14a03

	measure 'meas.ai_scores_factor2_value' = ```
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Prospecting Success Predictions", [meas.ai_scores_prospecting_factor2_value],    // score_id 1
			    "New Logo Selling Success Predictions", [meas.ai_scores_new_logo_selling_factor2_value],    // score_id 2
			    "Post-Sales Support Success Predictions", [meas.ai_scores_post_sales_support_factor2_value],    // score_id 3
			    "Existing Customer Selling Success Predictions", [meas.ai_scores_existing_customer_selling_factor2_value],    // score_id 4
			    "Success Factor Analysis", [meas.ai_scores_success_factor_analysis_factor2_value],                      // score id 5
			    "List Price", [meas.ai_scores_list_price_items_non_default_factor2_value],                      // score id 7
			    "Line Item Products", [meas.ai_scores_line_items_products_factor2_value],                      // score id 8
			    "Opportunities History", [meas.ai_scores_opps_history_factor2_value],
			    "Time Allocation", FORMAT([meas.ai_scores_ci_time_allocation_factor2_value],"#,0"),                // score id 19  
			    "Ramping Success", [meas.ai_scores_ramping_perf_conf_factor2_value],                                  // score_id 27 
			    "VI Amount", [meas.ai_scores_vi_tuning_share_diff_factor2],               // score_id 24 
			    "Rep Organization Calibration", [meas.ai_scores_rep_org_calibration_factor2_value],
			    "Bookings Calibration", FORMAT([meas.ai_scores_booking_calibration_factor2_value], "$#,0"),
			    "Revenue Calibration", FORMAT([meas.ai_scores_revenue_calibration_factor2_value], "$#,0"),
			    "-"
			)
			
			RETURN
			res
			```
		lineageTag: dbbfb553-82bb-444e-b9f9-7523d6960fe1

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_factor3_name' =
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Rep Organization Calibration", [meas.ai_scores_rep_org_calibration_factor3_name],
			    "-"
			)
			
			RETURN
			res
		lineageTag: 2a2a1c88-f694-4c0e-9a4d-141ad9979f50

	measure 'meas.ai_scores_factor3_value' =
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Rep Organization Calibration", FORMAT([meas.ai_scores_rep_org_calibration_factor3_value],"#,0"),
			    "-"
			)
			
			RETURN
			res
		lineageTag: a87d35b5-2f1a-49fd-bfbb-73176fec4bcf

	measure 'meas.ai_scores_text' = ```
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Prospecting Success Predictions", [meas.ai_scores_pred_prospecting_text],    // score_id 1
			    "New Logo Selling Success Predictions", [meas.ai_scores_pred_new_logo_selling_text],    // score_id 2
			    "Post-Sales Support Success Predictions", [meas.ai_scores_pred_post_sales_support_text],    // score_id 3
			    "Existing Customer Selling Success Predictions", [meas.ai_scores_pred_existing_customer_selling_text],    // score_id 4
			    "Success Factor Analysis", [meas.ai_scores_success_factor_analysis_text],                      // score id 5
			    "Potential ACV", [meas.ai_scores_potential_acv_text],                      // score id 6
			    "List Price", [meas.ai_scores_list_price_text],                      // score id 7
			    "Line Item Products", [meas.ai_scores_line_items_products_text],                      // score id 8
			    "Accounts Industry Consolidation", [meas.ai_scores_accts_industry_text],                // score id 9 
			    "Accounts Lead Source Consolidation", [meas.ai_scores_accts_leadsource_text],                // score id 10 
			    "Leads Industry Consolidation", [meas.ai_scores_leads_industry_text],                // score id 11 
			    "Leads Lead Source Consolidation", [meas.ai_scores_leads_leadsource_text],                // score id 12 
			    "Opps Industry Consolidation", [meas.ai_scores_opps_industry_text],                // score id 13 
			    "Opps Lead Source Consolidation", [meas.ai_scores_opps_leadsource_text],                // score id 14 
			    "SSR Industry Consolidation", [meas.ai_scores_ssr_industry_text],                // score id 15 
			    "SSR Lead Source Consolidation", [meas.ai_scores_ssr_leadsource_text],                // score id 16 
			    "Opportunities History", [meas.ai_scores_opps_history_text],                // score id 17 
			    "Activity Capture Level", [meas.ai_scores_ci_act_capt_lvl_conf_text],                // score id 18 
			    "Time Allocation", [meas.ai_scores_ci_time_alloc_text],                // score id 19 
			    "Adjusted Duration", [meas.ai_scores_adj_duration_text],                // score id 20 
			    "Closing Ability", [meas.ai_scores_ci_closing_ability_text],                  // score_id 21 
			    "Discovery Skill", [meas.ai_scores_ci_discovery_skill_text],               // score_id 22 
			    "Engagement Ability", [meas.ai_scores_ci_engagement_ability_text],                      // score_id 23 
			    "Work Effort", [meas.ai_scores_ci_work_effort_text],                      // score_id 24 
			    "Deal Maximizing", [meas.ai_scores_ci_deal_maxing_text],                        // score_id 25 
			    "Performance Tiers", [meas.ai_scores_performance_tiers_text],                            // score_id 26 
			    "Ramping Success", [meas.ai_scores_ramping_text],                                  // score_id 27 
			    "Time Management", [meas.ai_scores_ci_time_management_text],                // score_id 28 
			    "VI Amount", [meas.ai_scores_vi_txt],               // score_id 24 
			    "Rep Organization Calibration", [meas.ai_scores_rep_org_calibration_text],
			    "Bookings Calibration", [meas.ai_scores_booking_calibration_text],
			    "Revenue Calibration", [meas.ai_scores_revenue_calibration_text],
			    "Leads & Accounts Completeness  Data Present", [meas.ai_scores_general_score_text],
			    BLANK()
			
			)
			RETURN
			res
			```
		lineageTag: 7492dfc0-7677-44be-a2c6-b97c45c16627

	measure 'meas.average_ai_score' =
			
			AVERAGEX(
			    metadata_ai_scores,
			    [meas.ai_score]
			)
		formatString: 0
		lineageTag: a540bda0-c8a6-460b-9f46-e51c34c67745

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_revenue_calibration_factor2_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))   
			var _booking_amt = MAXX(latest_table,companies_history[di_amt_won_last12months]) 
			RETURN
			_booking_amt
			```
		displayFolder: _factor2_value
		lineageTag: 2782ec74-5646-4f66-a3b1-f2a0983bfd8f

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_accts_industry_factor1_name' = ```
			
			
			VAR fact1 = "trueai_industry_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 07d8a0d6-8afe-474c-859e-8d371ce720a9

	measure 'meas.ai_scores_accts_leadsource_factor1_name' = ```
			
			
			VAR fact1 = "trueai_leadsource_conf" 
			
			RETURN
			    fact1 
			    
			```
		displayFolder: _factor1_name
		lineageTag: 11921eae-220a-4a51-92df-641c07b774f7

	measure 'meas.ai_scores_adj_duration_factor1_name' = ```
			
			VAR fact1 = "Stake-holders Adjusted Duration"
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 446c39d6-7ed2-452c-a763-b01aa72ebe97

	measure 'meas.ai_scores_leads_leadsource_factor1_name' = ```
			
			
			VAR fact1 = "average of trueai_leadsource_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 247e3e43-a601-4f2f-8cf9-29ffb01343c9

	measure 'meas.ai_scores_leads_industry_factor1_name' = ```
			
			
			VAR fact1 = "average of trueai_industry_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: b31f3d9b-ad1f-4392-a97a-b5b6ba4b8b1a

	measure 'meas.ai_scores_opps_industry_factor1_name' = ```
			
			
			VAR fact1 = "average of trueai_industry_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 819945ba-fabf-43dc-b4ab-1bdf2969fb02

	measure 'meas.ai_scores_opps_leadsource_factor1_name' = ```
			
			
			VAR fact1 = "average of trueai_leadsource_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 2f947f99-69f8-49f5-bb48-96273fc3f50e

	measure 'meas.ai_scores_ssr_industry_factor1_name' = ```
			
			
			VAR fact1 = "average of trueai_industry_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: d5beb669-5c62-402e-9f6f-656c36082ba0

	measure 'meas.ai_scores_ssr_leadsource_factor1_name' = ```
			
			
			VAR fact1 = "average of trueai_leadsource_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 31866fe2-550a-45ef-976e-5629f6c352e2

	measure 'meas.ai_scores_prospecting_factor1_name' = ```
			
			VAR fact1 = "Prospecting AUC" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: a54e9a1c-7edc-4d0d-bc09-26a9aee83b9f

	measure 'meas.ai_scores_new_logo_selling_factor1_name' = ```
			
			VAR fact1 ="New Logo Selling AUC" 
			
			RETURN
			fact1
			```
		displayFolder: _factor1_name
		lineageTag: 242c7b4c-2fad-4496-9eab-f4ab3f161bbc

	measure 'meas.ai_scores_post_sales_factor1_name' = ```
			
			VAR fact1 = "Post-Sales Support AUC"    
			
			RETURN
			    fact1
			```
		displayFolder: _factor1_name
		lineageTag: 8f31b413-9488-4035-967f-e6e852510244

	measure 'meas.ai_scores_existing_customer_factor1_name' = ```
			
			VAR fact1 ="Existing Customer Selling AUC"    
			
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 2e52ba62-267b-4822-b70a-b1f5aa305614

	measure 'meas.ai_scores_success_analysis_factor1_name' = ```
			
			VAR fact1 ="Average of Success Probability Training Score"       
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 4688c23f-9e71-4507-8261-118155dab989

	measure 'meas.ai_scores_potential_ACV_factor1_name' = ```
			
			VAR fact1 ="Potential ACV"          
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 15c58e23-7ad9-4ca3-9534-d6eddb1e1f3d

	measure 'meas.ai_scores_list_price_items_factor1_name' = ```
			
			VAR fact1 ="Count of trueai_list_price items"
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 819ae50b-bd92-4420-8546-535ff9b6aaa5

	measure 'meas.ai_scores_line_items_products_factor1_name' = ```
			
			VAR fact1 ="Won Deals ratio "
			
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 44069978-c3e2-4277-b456-3b432a756dd2

	measure 'meas.ai_scores_opps_histories_factor1_name' = ```
			
			VAR fact1 ="Total Opps Count"    
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 370fba56-1e05-43e5-874c-6b138fa0c0a0

	measure 'meas.ai_scores_general_score_factor1_name' = ```
			
			
			VAR fact1 ="General AI Score"        
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 8377f5c3-e396-4963-9e15-73b4f3a70922

	measure 'meas.ai_scores_ci_act_capt_lvl_conf_factor1_name' = ```
			
			VAR fact1 ="Average of Activity Capture Level Confidence " 
			     
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: d6cd5862-74fe-4c03-9001-6138b6fc2189

	measure 'meas.ai_scores_ci_time_alloc_factor1_name' = ```
			
			VAR fact1 ="# Reps with Time Allocation"    
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: a90c5b96-08b2-45a1-8c70-b577c2e94177

	measure 'meas.ai_scores_ci_closing_ability_factor1_name' =
			
			var _avg ="average of ci_sb_close_ability_conf"
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: 33146400-056d-48e0-be1d-bde0aceec7d3

	measure 'meas.ai_scores_ci_discovery_skill_factor1_name' =
			
			var _avg = "average of ci_sb_discov_skills_conf"
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: d170abe0-ded3-455b-aaff-6fa29c0a7b7e

	measure 'meas.ai_scores_ci_engagement_ability_factor1_name' =
			
			var _avg = "average of ci_sb_engmt_ability_conf"
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: 74a079ac-d0bd-44ee-af0f-a0a985e771ab

	measure 'meas.ai_scores_ci_work_effort_factor1_name' =
			
			var _avg ="average of ci_sb_work_effort_conf"
			
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: 56e38b2f-a226-4337-993c-483e645e6e02

	measure 'meas.ai_scores_ci_deal_maxing_factor1_name' =
			
			var _avg = "average of ci_sb_deal_maxing_conf"
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: 8dcefb0b-fe4e-4622-8a61-d76488b7665e

	measure 'meas.ai_scores_performance_tiers_factor1_name' =
			
			var perf_avg = "Average of Quarterly Performance Tier Conf "
			RETURN
			perf_avg
		displayFolder: _factor1_name
		lineageTag: 9d925f3f-9404-4412-8724-a6ecc0c8b700

	measure 'meas.ai_scores_ramping_factor1_name' = ```
			
			var fact1 = " Reps Ramping Rate"
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 9befb12d-2478-4da1-b391-b1a7645ff94f

	measure 'meas.ai_scores_ci_time_management_factor1_name' = ```
			
			
			var _avg = "average of ci_sb_time_mgmt_conf"
			
			RETURN 
			_avg
			```
		displayFolder: _factor1_name
		lineageTag: 81649198-959b-4c4d-a92c-8c840b31c884

	measure 'meas.ai_scores_vi_factor1_name' =
			
			var fact1 = "Difference in sales between New Logo and Existing Customer"
			RETURN
			fact1
		displayFolder: _factor1_name
		lineageTag: 6c7914fe-f921-4b27-a8b0-343d851468d5

	measure 'meas.ai_scores_booking_calibration_factor1_name' = ```
			
			var fact1 = "Trailing Twelve Months Booking Amount"
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 4bd54950-b901-4727-8a93-2f14fe3a9e09

	measure 'meas.ai_scores_booking_calibration_factor1_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))  
			var _booking_amt = MAXX(latest_table,companies_history[ttm_ref_date_bookings]) 
			var fact1 = FORMAT(_booking_amt,"$#,0")
			RETURN
			fact1
			```
		displayFolder: _factor1_value
		lineageTag: 698f1c2b-2a28-46b9-897c-859800ef5cc5

	measure 'meas.ai_scores_revenue_calibration_factor1_name' =
			
			var fact1 = "Trailing Twelve Months Reference Revenue Amount"
			
			RETURN
			fact1
		displayFolder: _factor1_name
		lineageTag: b6316fec-bb0e-429c-ac03-493a11bb6ef6

	measure 'meas.ai_scores_rep_org_calibration_factor1_name' =
			
			var res = "Match level of HR file – did all match? "
			RETURN
			res
		displayFolder: _factor1_name
		lineageTag: b8e58666-d20d-438f-a2c8-d7cdfe5425c3

	measure 'meas.ai_scores_rep_org_calibration_factor2_name' =
			
			var res ="# of Reps with rev/pipe/lead without an HR file entry – are there unknown reps? "
			RETURN
			res
		displayFolder: _factor2_name
		lineageTag: 22392f28-f7c3-4bed-8977-cd89b9fb7457

	measure 'meas.ai_scores_rep_org_calibration_factor3_name' =
			
			
			var res  = "# of Reps with either Group/Role ND - did we not do a complete classification? "
			RETURN
			res
		displayFolder: _factor3_name
		lineageTag: 8517bc88-678d-4bbb-8145-b50a7fbe4161

	measure 'meas.ai_scores_rep_org_calibration_factor2_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))       
			var _total_users = MAXX(latest_table,companies_history[users_sales])          
			          
			var users_non_match_hr_id_won_deals = MAXX(latest_table, companies_history[users_non_match_hr_id_won_deals])        
			var users_non_match_hr_id_pipeline = MAXX(latest_table, companies_history[users_non_match_hr_id_pipeline])          
			var users_non_match_hr_id_leads = MAXX(latest_table, companies_history[users_non_match_hr_id_leads])         
			
			var _total_non_match_users = users_non_match_hr_id_won_deals + users_non_match_hr_id_pipeline + users_non_match_hr_id_leads
			
			RETURN
			_total_non_match_users
			```
		formatString: 0
		displayFolder: _factor2_value
		lineageTag: 6c5c7bdc-4060-4389-8523-828fd2b65c3a

	measure 'meas.ai_scores_rep_org_calibration_factor3_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))             
			var users_match_hr_id_nd_role = MAXX(latest_table, companies_history[users_match_hr_id_nd_role])            // get the number of reps w ND role             
			var users_match_hr_id_nd_group = 0      
			var res = users_match_hr_id_nd_role + users_match_hr_id_nd_group
			RETURN
			res
			```
		formatString: 0
		displayFolder: _factor3_value
		lineageTag: d1d45c90-f785-41cf-bb10-2ebace480a90

	measure 'meas.ai_scores_booking_calibration_factor2_name' =
			
			var fact2 = "Last 12 Months Won Amount"
			RETURN
			fact2
		displayFolder: _factor2_name
		lineageTag: aa2f79d8-e1d8-44d2-a6c0-afb706ed95d1

	measure 'meas.ai_scores_booking_calibration_factor2_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))  
			var _won_amt = MAXX(latest_table,companies_history[di_amt_won_last12months]) 
			var fact2 = FORMAT(_won_amt, "$#,0")
			RETURN
			fact2
			```
		displayFolder: _factor2_value
		lineageTag: fe0ca8bb-d25a-4122-958a-cd48c5152bbd

	measure 'meas.ai_scores_ci_time_alloc_factor2_name' = ```
			
			VAR fact2 ="Total Reps "         
			
			RETURN
			fact2
			```
		displayFolder: _factor2_name
		lineageTag: f85f196a-1a91-4369-a401-2f43ece9228f

	measure 'meas.ai_scores_existing_customer_factor2_name' = ```
			
			VAR fact2 = "Existing Customer Selling R2 "        
			
			RETURN
			fact2
			```
		displayFolder: _factor2_name
		lineageTag: 23be0fb0-9d69-441f-a649-8cdf4454be03

	measure 'meas.ai_scores_post_sales_factor2_name' = ```
			
			VAR fact2 = "Post-Sales R2"        
			
			RETURN
			fact2
			```
		displayFolder: _factor2_name
		lineageTag: b7b5f606-fa33-4cac-a4a5-827cc6347667

	measure 'meas.ai_scores_new_logo_factor2_name' = ```
			
			VAR fact2 = "New Logo Selling R2"        
			
			RETURN
			fact2
			```
		displayFolder: _factor2_name
		lineageTag: 7e193d1e-3cf7-4c23-a88b-1fb2fc74849c

	measure 'meas.ai_scores_prospecting_factor2_name' = ```
			
			VAR fact2 = "Prospecting R2"        
			
			RETURN
			fact2
			```
		displayFolder: _factor2_name
		lineageTag: d9978492-2133-47a9-b763-6a2d1e746e03

	measure 'meas.ai_scores_line_items_products_factor2_name' =
			
			VAR fact2 ="Lost Deals ratio "
			
			RETURN
			fact2
		displayFolder: _factor2_name
		lineageTag: bc524813-8ff6-49df-8329-f78ac391c618

	measure 'meas.ai_scores_opps_histories_factor2_name' = ```
			
			VAR fact2 ="Total # of opps with Opp Histories"         
			
			RETURN
			    fact2
			```
		displayFolder: _factor2_name
		lineageTag: 9b12a1b2-bba7-410a-889d-c6a35bf9f2d5

	measure 'meas.ai_scores_revenue_calibration_factor2_name' =
			
			var fact2 = "Last 12 Months Won Amount"
			RETURN
			fact2
		displayFolder: _factor2_name
		lineageTag: ef7a5f40-36d3-43c9-be57-23e8e998b772

	measure 'meas.ai_scores_success_analysis_factor2_name' = ```
			
			VAR fact2 ="Average of Success Probability Validation Score"         
			
			RETURN
			    fact2
			```
		displayFolder: _factor2_name
		lineageTag: 1bd0a9c3-de42-4d9a-9b43-b62aa0083f77

	measure 'meas.ai_scores_vi_factor2_name' =
			
			var fact2 = "VI Tuning Share Diff"
			RETURN
			fact2
		displayFolder: _factor2_name
		lineageTag: 0dc0da7e-8803-4e37-8f98-5478c5aaa7b4

	measure 'meas.ai_scores_list_price_items_factor2_name' = ```
			
			VAR fact2 ="Non-default count of trueai_list_price"         
			
			RETURN
			fact2
			```
		displayFolder: _factor2_name
		lineageTag: e8187637-0a9d-4565-a88f-62052b17b381

	measure 'meas.ai_scores_ramping_factor2_name' =
			
			var fact2 = "Average of Performance tier conf. of ramping reps"
			RETURN
			fact2
		displayFolder: _factor2_name
		lineageTag: 1a0b2cba-01a0-4404-b15e-ebec51b81c35

	measure 'meas.ai_scores_rep_org_calibration_test' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))       // grt the most latest row
			var _total_users = MAXX(latest_table,companies_history[users])          // total users
			
			var users_match_hr_id = MAXX(latest_table, [users_match_hr_id])         // total matched reps
			var users_hr_file = MAXX(latest_table, companies_history[users_hr_file])           // reps in hr file
			
			var users_non_match_hr_id_won_deals = MAXX(latest_table, companies_history[users_non_match_hr_id_won_deals])        // non match won deals reps
			var users_non_match_hr_id_pipeline = MAXX(latest_table, companies_history[users_non_match_hr_id_pipeline])          // non match pipeline gen reps
			var users_non_match_hr_id_leads = MAXX(latest_table, companies_history[users_non_match_hr_id_leads])          // non match lead gen reps count
			var users_match_hr_id_nd_role = MAXX(latest_table, companies_history[users_match_hr_id_nd_role])                  // non match reps with role
			var users_match_hr_id_nd_group = 0
			
			var matched_reps_score = DIVIDE(users_match_hr_id,users_hr_file,0)
			var won_deals_score = (1 - DIVIDE(users_non_match_hr_id_won_deals, _total_users, 0))
			var pipeline_gen_score = (1 - DIVIDE(users_non_match_hr_id_pipeline, _total_users, 0))
			var lead_gen_score = (1 - DIVIDE(users_non_match_hr_id_leads, _total_users, 0))               //raw score calculation for each
			var reps_w_role_score = (1 - DIVIDE(users_match_hr_id_nd_role,users_hr_file,0))
			//var reps_w_group_ratio = DIVIDE(reps_group,_hr_file_users,0)
			
			VAR Row1 = ROW ( "Value", matched_reps_score, "Weight", 3 )
			VAR Row2 = ROW ( "Value", won_deals_score, "Weight", 2 )
			VAR Row3 = ROW ( "Value", pipeline_gen_score, "Weight", 1 )          //raw score and weight  added in the table  for each reps count
			VAR Row4 = ROW ( "Value", lead_gen_score, "Weight", 1 )
			VAR Row5 = ROW ( "Value", reps_w_role_score, "Weight", 2 )
			VAR temp_tbl =
			    UNION ( Row1, Row2, Row3, Row4, Row5 )          //creating the table
			
			var _adj_calib = SUMX(temp_tbl, [Value]*[Weight])           // get the adjusted raw score
			var _importance = SUMX(temp_tbl, [Weight])                  // sum of the total weight
			var raw_score = DIVIDE(_adj_calib, _importance,0)                 // get the score
			
			var boost_expo = 0.9            // we use this to get the closer one value
			var score = raw_score^boost_expo     // boosting the actual 
			var res = MIN(MAX(ROUND(score*100,0),0),100)
			RETURN
			matched_reps_score
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 6e7ee0ed-34bf-446a-9ffe-e98ccb212335

	measure 'meas.ai_scores_sales_process' = ```
			
			var _count = CALCULATE(count(ssr_history[_sys_doc_id]) )
			var total_rules_applied=  If(IsBlank(_count), 0,_count)
			
			var tbl_crm_rules = calculateTable(SELECTCOLUMNS(filter(metadata_rule_list, metadata_rule_list[col.rule_is_std_crm] = true), "_sys_doc_id]", "" & [_sys_doc_id])) // get a list of just the CRM rules
			//var dd = COUNTROWS(tbl_crm_rules) // check the count
			var filt = filter(ssr_history, 
			 (
			     ssr_history[step_owner_rule] & "" IN tbl_crm_rules  &&  
			     ssr_history[step_outcome_rule] & "" IN tbl_crm_rules &&   
			      ssr_history[step_end_rule] & "" IN tbl_crm_rules  
			) 
			) // look for NONE crm rules and exclude lead gen 
			var sdt_rules_applied =  CALCULATE(count(ssr_history[_sys_doc_id]) , filt) // get the count based on correct filter
			
			
			var avg_conf_non_crm = .85  // get the avg non crm conf
			var diff = (total_rules_applied - sdt_rules_applied  ) * avg_conf_non_crm  // create a diff model
			var adjusted_ratio= divide (sdt_rules_applied +diff ,  total_rules_applied) // add the diff for the new ratio
			// return as an int between 0-100
			var res = ROUND(adjusted_ratio*100, 0)
			return res
			```
		displayFolder: _ai_scores
		lineageTag: bf45a0b8-077c-4b33-8150-8a029a875a9f

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_sales_process_text' = ```
			
			var _conf = [meas.ai_scores_sales_process]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 3a42ec1d-790d-4b85-9c19-9c16cdb61ab8

	measure 'meas.ai_scores_ci_act_capt_lvl' = ```
			
			var _avg = CALCULATE(
			           AVERAGE(users_history[ci_act_capt_lvl])// get the users_history average ci_act_capt_lvl
			)
			var boost_expo = 0.90           // exponent value 
			var _boosted_avg = (_avg)^ boost_expo     // pushes up the score slightly 
			var _conf = ROUND(_boosted_avg*100,0)  // round the number and for integar value  
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 57ff7f58-82c2-482d-b0b1-7a497dc64707

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_act_capt_lvl_text' = ```
			
			
			var _conf = [meas.ai_scores_ci_act_capt_lvl]  // act capt lvl score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 08248813-0464-4494-97ee-1a83f72301f7

	measure 'meas.ai_scores_sales_process_any_rules_count_factor1_value' =
			
			
			var total_rules_applied = CALCULATE(count(ssr_history[_sys_doc_id]) )
			var res=  If(IsBlank(total_rules_applied), 0,total_rules_applied)
			
			RETURN
			res
		formatString: 0
		displayFolder: _factor1_value
		lineageTag: 7483e4d7-59d2-431f-bd68-8c9daf3d0758

	measure 'meas.ai_scores_sales_process_any_rules_std_count_factor2_value' = ```
			
			
			var tbl_crm_rules = calculateTable(SELECTCOLUMNS(filter(metadata_rule_list, metadata_rule_list[col.rule_is_std_crm] = true), "_sys_doc_id]", "" & [_sys_doc_id])) // get a list of just the CRM rules
			//var dd = COUNTROWS(tbl_crm_rules) // check the count
			var filt = filter(ssr_history, 
			 (
			     ssr_history[step_owner_rule] & "" IN tbl_crm_rules  &&  
			     ssr_history[step_outcome_rule] & "" IN tbl_crm_rules &&   
			      ssr_history[step_end_rule] & "" IN tbl_crm_rules  
			) 
			) // look for NONE crm rules and exclude lead gen 
			var sdt_rules_applied =  CALCULATE(count(ssr_history[_sys_doc_id]) , filt) // get the count based on correct filter
			var res = sdt_rules_applied // return the res
			
			
			return If(IsBlank(res), 0,res)
			```
		formatString: 0
		displayFolder: _factor2_value
		lineageTag: 6463e2f9-58fc-4643-a70b-240574b500e0

	measure 'meas.ai_scores_ci_act_capt_lvl_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_act_capt_lvl])        // get the users_history average ci_act_capt_lvl
			)
			RETURN
			_avg
		formatString: 0.00
		displayFolder: _factor1_value
		lineageTag: a74ee032-d271-4caa-8059-cb32dde336dc

	measure 'meas.ai_scores_ci_act_capt_lvl_factor1_name' = ```
			
			VAR fact1 ="Average of Activity Capture Level Score " 
			     
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: d45afd2b-fe49-47c9-9845-81a6af53986c

	measure 'meas.ai_scores_opps_history_factor2_value' =
			
			var res = CALCULATE(DISTINCTCOUNT(open_pipeline[crm_opp_id]))         // get the opps with Opp history
			RETURN
			res
		displayFolder: _factor2_value
		lineageTag: fbd3245f-7c2f-401f-b3b5-6a3f19fa62ff

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_score_text_value' =
			
			VAR _score = [meas.average_ai_score]
			VAR _label =
			    SWITCH(
			        TRUE(),
			        _score >= 95, "Excellent",
			        _score >= 85, "Great",
			        _score >= 75, "Good",
			        _score >= 50, "Fair",
			        _score >= 0,  "Limited",
			        BLANK()
			    )
			RETURN
			    IF(ISBLANK(_label), " - ", _label)
		lineageTag: 8989505c-ff92-4181-ba3d-07b1e14dd582

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column _sys_doc_id
		dataType: string
		lineageTag: 0553404d-2d1b-483d-8165-0cda87efe66e
		summarizeBy: none
		sourceColumn: _sys_doc_id

		annotation SummarizationSetBy = Automatic

	column _sys_is_active
		dataType: string
		lineageTag: 3237ca1e-6587-4d4d-b895-9838a49499c0
		summarizeBy: none
		sourceColumn: _sys_is_active

		annotation SummarizationSetBy = Automatic

	column _sys_modified_on
		dataType: dateTime
		formatString: General Date
		lineageTag: e4929e32-cf6f-4149-93db-f3d771d03c10
		summarizeBy: none
		sourceColumn: _sys_modified_on

		variation Variation
			isDefault
			relationship: 48b7e184-c69d-4bd1-b42e-0b05677f044d
			defaultHierarchy: LocalDateTable_69fd8ce2-ea49-4d03-91e4-9a7d63e1ec7e.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column category
		dataType: string
		lineageTag: fb019989-fe9b-424c-8fd3-a7e7f2aae590
		summarizeBy: none
		sourceColumn: category

		annotation SummarizationSetBy = Automatic

	column score_name
		dataType: string
		lineageTag: a8567782-46a4-4de2-bc50-2652ade448ac
		summarizeBy: none
		sourceColumn: score_name

		annotation SummarizationSetBy = Automatic

	column description
		dataType: string
		lineageTag: b6dd3403-84ad-4b86-a3e7-cced39219da9
		summarizeBy: none
		sourceColumn: description

		annotation SummarizationSetBy = Automatic

	column sort
		dataType: int64
		formatString: 0
		lineageTag: a3bb9fb1-37ee-4f8e-bf36-e15a8efb9f3f
		summarizeBy: sum
		sourceColumn: sort

		annotation SummarizationSetBy = Automatic

	column factor_1_name
		dataType: string
		lineageTag: 9bfc524c-cd48-47a6-94b6-101d507330c9
		summarizeBy: none
		sourceColumn: factor_1_name

		annotation SummarizationSetBy = Automatic

	column factor_2_name
		dataType: string
		lineageTag: dfae5997-5f65-44ee-93e9-bc73ea5040c0
		summarizeBy: none
		sourceColumn: factor_2_name

		annotation SummarizationSetBy = Automatic

	column factor_3_name
		dataType: string
		lineageTag: a32a4896-9e4b-45df-8798-6f6e728817be
		summarizeBy: none
		sourceColumn: factor_3_name

		annotation SummarizationSetBy = Automatic

	column notes
		dataType: string
		lineageTag: 24d91298-91c6-46ec-96da-f286ca9607d6
		summarizeBy: none
		sourceColumn: notes

		annotation SummarizationSetBy = Automatic

	column boost_expo
		dataType: double
		lineageTag: 7754aa79-c7fb-4e29-b06f-8bfdc3b32657
		summarizeBy: sum
		sourceColumn: boost_expo

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column weight
		dataType: double
		lineageTag: 788f39e0-5905-4e80-9abe-f87980071ba5
		summarizeBy: sum
		sourceColumn: weight

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	partition metadata_ai_scores = m
		mode: import
		source = ```
				let
				    dbTable = getDBTable("metadata_ai_scores"),      // get the right table
				    dbTableTyped = Table.TransformColumnTypes(dbTable,{
				        {"_sys_doc_id", type text},
				{"_sys_is_active", type text},
				{"_sys_modified_on", type datetime},
				{"boost_expo", type number},
				{"category", type text},
				{"description", type text},
				{"factor_1_name", type text},
				{"factor_2_name", type text},
				{"factor_3_name", type text},
				{"notes", type text},
				{"score_name", type text},
				{"sort", Int64.Type},
				{"weight", type number}        
				        })
				   
				in
				   dbTableTyped
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

