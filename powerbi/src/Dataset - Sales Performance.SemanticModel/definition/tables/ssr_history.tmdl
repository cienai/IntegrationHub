table ssr_history
	lineageTag: c2ee1095-155a-44f5-a5af-efb2bc2dc2c5

	measure 'meas.ssr_history_success_count' = ```
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[step_success] = true)  
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: fbf78099-2fdd-4373-9016-2af11cc5f240

	measure 'meas.ssr_history_success_rate' = DIVIDE([meas.ssr_history_success_count], count(ssr_history[_sys_doc_id]))
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: cda20e0e-69cf-402d-9516-347d9e518aa3

	measure 'meas.ssr_history_rev_churned_count' = ```
			
			// get the period dates based on current filter contetxt 
			// this is a test for git
			var period_start = [meas.context_date_min]		// get the context max date 
			var period_end = [meas.context_date_max]		// get the context min dat
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			
			
			// assign the res
			var res = churned_cnt 
			return IF(isblank(res), 0, res)
			```
		formatString: #,0
		displayFolder: _rev_analysis
		lineageTag: 8c2cefc7-1bd8-4631-83ec-b79c0a044a9c

	measure 'meas.ssr_history_rev_churned_amt' = ```
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			// assign the res
			var res = churned_amt 
			return IF(isblank(res), 0, res)
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 376d313d-d479-448b-a485-756947d75d7b

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.ssr_history_rev_new_count' = ```
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			
			// assign the res
			var res = new_cnt 
			return IF(isblank(res), 0, res)
			```
		formatString: " + "0
		displayFolder: _rev_analysis
		lineageTag: e76d7667-1b75-4934-8baf-1225f9151615

	measure 'meas.ssr_history_rev_retained_amt' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			
			
			// assign the res
			var res = retained_amt 
			return IF(isblank(res), 0, res)
			```
		formatString: $ #,##0
		displayFolder: _rev_analysis
		lineageTag: 443160f6-27c9-443a-8fac-7f66e033f472

	measure 'meas.ssr_history_rev_retained_count' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			// assign the res
			var res = retained_cnt 
			return IF(isblank(res), 0, res)
			```
		formatString: #,0
		displayFolder: _rev_analysis
		lineageTag: 978a1d48-c53b-4dc6-a392-9eba28e7de90

	measure 'meas.ssr_history_rev_new_amt' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			// assign the res
			var res = new_amt 
			return IF(isblank(res), 0, res)
			```
		formatString: $ #,##0
		displayFolder: _rev_analysis
		lineageTag: 0bfc7544-f968-4cbd-ae15-f68c418e3f82

	measure 'meas.ssr_history_rev_ending_count' = ```
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			// assign the res
			var res = ending_cnt 
			return IF(isblank(res), 0, res)
			```
		formatString: #,0
		displayFolder: _rev_analysis
		lineageTag: 7303f12f-6d03-4d5d-a871-08c70ebb93d3

		changedProperty = FormatString

	measure 'meas.ssr_history_rev_starting_amount' = ```
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			
			// assign the res
			var res = starting_amt 
			return IF(isblank(res), 0, res)
			```
		formatString: $#,##0
		displayFolder: _rev_analysis
		lineageTag: 93a0fb98-0047-4f4b-ab55-a7437ff4b128

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_touched_accounts' = CALCULATE(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), ssr_history[step_name] ="Prospecting")
		formatString: ###,###,###
		displayFolder: _success_analysis
		lineageTag: 3b75013a-8883-4497-99ba-b3bdb6e87fe6

	measure 'meas.ssr_history_acct_count_untouched' = CALCULATE(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), ssr_history[step_name] ="Untouched") // gettting the disticnt count of id for Untouched
		formatString: #,0
		displayFolder: _acct_analysis
		lineageTag: d29d11db-56a4-461b-acd4-f8785d1a4b44

	measure 'meas.ssr_history_rev_churned_avg_age_months' = ```
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			
			var avg_age = AVERAGEX(churned_custs, DateDiff(ssr[col.trueai_first_purchase], ssr[col.trueai_churn_date], month))
			
			// assign the res
			var res = avg_age 
			return res
			```
		formatString: #,##0.0" Mos."
		displayFolder: _rev_analysis
		lineageTag: 8ef89d7c-8a82-4383-a075-4e495cc75645

	measure 'meas.ssr_history_rev_cagr' = ```
			
			
			
			-- annual num
			var start_year = Year([meas.context_date_min])
			var end_year = Year([meas.context_date_max]) 
			var period_years = end_year - start_year
			var start_date = date(start_year ,1,1) -- jan 1
			var start_date_end = Date(start_year, 12,31)
			
			var end_date = date(end_year , 1,1) -- jan 1 the prev  yr
			var end_date_end = Date(end_year , 12,31)
			
			var first_period_rev = calculate(sum(ssr_history[opp_won_amt]), cal_end_dates[date] >= start_date  && cal_end_dates[date] <= start_date_end  )
			var last_period_rev = calculate(sum(ssr_history[opp_won_amt]) , cal_end_dates[date] >= end_date  && cal_end_dates[date] <= end_date_end  )
			
			var cagr_growth_rate = divide(last_period_rev , first_period_rev ,blank() )  ^ (1/period_years) - 1
			return  
			cagr_growth_rate
			
			
			
			
			
			//https://powerbi.tips/2016/05/measures-calculate-cagr/
			```
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: _rev_analysis
		lineageTag: 6f5b3199-dfef-4035-bca0-faa6328035eb

	measure 'meas.ssr_history_rev_period_growth_rate' = ```
			
			var max_date = calculate(max(cal_end_dates[date]) )
			var min_date = calculate(min(cal_end_dates[date]))
			var period_days = DateDiff(min_date ,max_date  , DAY) 
			var prev_max_date = max_date - period_days 
			var prev_min_date = min_date - period_days 
			var prev_period_rev = calculate(sum(ssr_history[opp_won_amt]), cal_end_dates[date] >= prev_min_date  && cal_end_dates[date] < prev_max_date  )
			var curr_period_rev = calculate(sum(ssr_history[opp_won_amt]))
			var growth_rate = divide((curr_period_rev - prev_period_rev) , prev_period_rev, blank()) // diff dvided by orig
			return growth_rate
			
			```
		formatString: #,##0 %
		displayFolder: _rev_analysis
		lineageTag: 378487c1-d77c-4bf7-8b52-dae4d2c22c77

	measure 'meas.ssr_history_rev_retained_avg_acct_amt' = DIVIDE(ssr_history[meas.ssr_history_rev_retained_amt], ssr_history[meas.ssr_history_rev_retained_count] , blank())
		formatString: $ #,##0
		displayFolder: _rev_analysis
		lineageTag: cc9e22e3-d9a0-4a2c-82bd-b91695c00849

	measure 'meas.ssr_history_rev_retained_avg_acct_age' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			var avg_age = AVERAGEX(retained_custs, DateDiff(ssr[col.trueai_first_purchase],prev_period_end, month))
			
			// assign the res
			var res = avg_age 
			return res
			```
		formatString: #,##0.0" Mos."
		displayFolder: _rev_analysis
		lineageTag: 3043583f-174d-458b-9aca-5997c8a63a12

	measure 'meas.ssr_history_rev_new_growth_rate' = DIVIDE([meas.ssr_history_rev_new_count],[meas.ssr_history_rev_starting_count] , blank())
		formatString: #,##0%
		displayFolder: _rev_analysis
		lineageTag: 452a05a8-b520-4820-9031-905350099a81

	measure 'meas.ssr_history_rev_churned_rate' = DIVIDE(abs([meas.ssr_history_rev_churned_count]),[meas.ssr_history_rev_starting_count] , blank())
		formatString: 0%;-0%;0%
		displayFolder: _rev_analysis
		lineageTag: 71facd4a-cdb6-4b3d-bf21-c11f2259943d

		changedProperty = FormatString

	measure 'meas.ssr_history_rev_acct_ltv' = DIVIDE( [meas.ssr_history_rev_retained_avg_acct_amt],[meas.ssr_history_rev_churned_rate] )
		formatString: $ #,##0
		displayFolder: __needs_attention
		lineageTag: 73a65f10-6621-4aaf-aef7-0d24e874c170

	measure 'meas.ssr_history_rev_starting_count' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			// assign the res
			var res = starting_cnt 
			return IF(isblank(res), 0, res)
			```
		formatString: 0
		displayFolder: _rev_analysis
		lineageTag: 141956ef-eb73-49c3-b921-1eb39da38f15

	measure 'meas.ssr_history_duration_hrs_post_sales' = ```
			
			var dur = calculate(sum(ssr_history[stkhlds_all_adj_dur]), ssr_history[step_name] = "Post-Sales Support" ) / 3600 // turn to hours
			var res  = round(dur / 10, 0) * 10 // make it ten hour increments
			return res
			
			```
		formatString: #,##0 " hrs"
		displayFolder: _activity_analysis
		lineageTag: 33d54ea0-11a8-4a4f-aa42-52c794f667c6

	measure 'meas.ssr_history_duration_hrs_per_acct_prospecting' = ```
			
			var dur =  CALCULATE(sum(ssr_history[stkhlds_all_adj_dur]), ssr_history[step_name] = "Prospecting") 
			var touched_accts = CALCULATE(DISTINCTCOUNTNOBLANK(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Prospecting") 
			var res1 = DIVIDE(dur, touched_accts, BLANK())
			var res = res1/3600
			RETURN
			res
			```
		formatString: 0.0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 133006c0-0910-49ca-b45a-66be10b29c91

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_success_prob_avg' = CALCULATE(AVERAGE(ssr_history[step_success_prob]))
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: f97c3876-2f38-47de-8c1c-aa09eb9807ac

	measure 'meas.ssr_history_success_prob_avg_prospecting' = CALCULATE(AVERAGE(ssr_history[step_success_prob]), ssr_history[step_name] = "Prospecting")
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 7d577067-54d8-405c-963f-b0560d121679

	measure 'meas.ssr_history_touched_accounts_rate' =
			
			var touched = [meas.ssr_history_touched_accounts]
			var all_accts = CALCULATE(DISTINCTCOUNT(ssr_history[_sys_ssr_id]))
			var res = DIVIDE (touched,all_accts , BLANK())
			return res
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: bf001c41-18a7-4adb-b298-3c6d6669cc39

	measure 'meas.ssr_history_success_count_prospecting' = ```
			
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[step_name]= "Prospecting" && ssr_history[step_success] = true)  
			
			
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: 489504cd-dbf1-4480-97b6-8f0a66084d42

	measure 'meas.ssr_history_success_rate_prospecting' =
			
			// var total_leads = CALCULATE(distinctcount(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Untouched")
			// // step_name ="Lead Gen" will provide the total lead
			// var successful_steps = CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[step_name]= "Prospecting" && ssr_history[step_success] = true)
			// // successful_steps give the total number of converted leads.
			// var res = DIVIDE(successful_steps, total_leads, BLANK())
			// return res
			
			
			var tot_count = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Prospecting")
			var success_count = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Prospecting" && ssr_history[step_success] = true)
			var rate = DIVIDE(success_count , tot_count )
			return rate
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: cc93d44f-2424-4e6d-bf7b-bd30f2ade938

	measure 'meas.ssr_history_acct_count_prospecting' =
			CALCULATE(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), ssr_history[step_name] ="Prospecting")
			//  // gettting the disticnt count of id for Prospecting
		formatString: #,0
		displayFolder: _acct_analysis
		lineageTag: 281959ec-df9e-4941-a3fe-ad8b4a45f581

	measure 'meas.ssr_history_acct_count_new_logo' = CALCULATE(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), ssr_history[step_name] ="New Logo Selling")       //getting the distinct count of id for New Logo Selling
		formatString: #,0
		displayFolder: _acct_analysis
		lineageTag: db88fca0-04cf-46be-b689-a8ddda1bd73e

	measure 'meas.ssr_history_acct_count_post_sales' = CALCULATE(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), ssr_history[step_name] ="Post-Sales Support")       // gettting the disticnt count of id for Post-Sales Support
		formatString: #,0
		displayFolder: _acct_analysis
		lineageTag: 8492f43b-54c9-4ba7-98fe-87b4aee47405

	measure 'meas.ssr_history_acct_count_existing_customer_selling' = CALCULATE(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), ssr_history[step_name] ="Existing Customer Selling")     /// getting the distinct count of id for existing customer selling
		formatString: 0
		displayFolder: _acct_analysis
		lineageTag: c989ecbf-3b34-4989-aac7-2c6b280383c0

	measure 'meas.ssr_history_duration_hrs_new_logo' = ```
			
			var dur = calculate(sum(ssr_history[stkhlds_all_adj_dur]), ssr_history[step_name] = "New Logo Selling" ) / 3600 // turn to hours
			var res  = dur
			return res
			
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 09637608-8acf-4e31-9f19-9412a0fdda11

	measure 'meas.ssr_history_duration_hrs_existing_customer_selling' =
			
			var dur = calculate(sum(ssr_history[stkhlds_all_adj_dur]), ssr_history[step_name] = "Existing Customer Selling" ) / 3600 // turn to hours
			var res  = dur
			return res
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 27864a67-e28c-48ba-bfa4-13788b3eef17

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_per_acct_new_logo' = ```
			
			var dur =  CALCULATE(sum(ssr_history[stkhlds_all_adj_dur]), ssr_history[step_name] = "New Logo Selling") 
			var touched_accts = CALCULATE(DISTINCTCOUNTNOBLANK(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "New Logo Selling") 
			var res1 = DIVIDE(dur, touched_accts, BLANK())
			var res = res1/3600
			RETURN
			res
			
			```
		formatString: 0.0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 7dc7c026-4e0e-4dbf-97a3-a85e0f1f5fce

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_per_acct_post_sales' =
			
			var dur =  CALCULATE(sum(ssr_history[stkhlds_all_adj_dur]), ssr_history[step_name] = "Post-Sales Support") // get the post sales total dur
			var touched_accts = CALCULATE(DISTINCTCOUNTNOBLANK(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Post-Sales Support") // touched post-sales support accts
			var res = DIVIDE(dur, touched_accts, BLANK())
			return res / 3600
		formatString: 0.0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 0f05a9f5-feaa-42e7-b3ad-d16791940f8a

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_per_acct_existing_customer_selling' =
			
			var dur =  CALCULATE(sum(ssr_history[stkhlds_all_adj_dur]), ssr_history[step_name] = "Existing Customer Selling") // get existing customer selling stkhlds adj dur
			var touched_accts = CALCULATE(DISTINCTCOUNTNOBLANK(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Existing Customer Selling") // existing customer selling touched accts
			var res1 = DIVIDE(dur, touched_accts, BLANK())  // ratio
			var res = res1 / 3600
			RETURN
			res
		formatString: 0.0" hrs"
		displayFolder: _activity_analysis
		lineageTag: f362ae5a-b864-4669-8c46-d95f6746c6b8

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_success_count_existing_customer_selling' = ```
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[step_name]= "Existing Customer Selling" && ssr_history[step_success] = true)  
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: f06f428d-f392-4aef-a9c4-c442c478413e

	measure 'meas.ssr_history_success_count_post_sales' = ```
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[step_name]= "Post-Sales Support" && ssr_history[step_success] = true)  
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: 6b52da51-d03b-461e-a651-7cdf48aa8571

	measure 'meas.ssr_history_success_count_new_logo' = ```
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[step_name]= "New Logo Selling" && ssr_history[step_success] = true)  
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: 227725ab-0a51-4eb1-8eae-2cd33043dc61

	measure 'meas.ssr_history_success_prob_avg_new_logo' = CALCULATE(AVERAGE(ssr_history[step_success_prob]), ssr_history[step_name] = "New Logo Selling")
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 70e077aa-d968-4a22-951d-d5897278c58e

	measure 'meas.ssr_history_success_prob_avg_post_sales' = CALCULATE(AVERAGE(ssr_history[step_success_prob]), ssr_history[step_name] = "Post-Sales Support")
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: d0b65460-8755-47b1-b9c4-a1246bdf41a4

	measure 'meas.ssr_history_success_prob_avg_existing_customer_selling' = CALCULATE(AVERAGE(ssr_history[step_success_prob]), ssr_history[step_name] = "Existing Customer Selling")
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 69d1dcb1-a47e-49b6-bba0-b8427a360c73

	measure 'meas.ssr_history_duration_hrs_prospecting' = ```
			
			var dur = calculate(sum(ssr_history[stkhlds_all_adj_dur]), ssr_history[step_name] = "Prospecting" ) / 3600 // turn to hours
			var res  = dur
			return res
			
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 88997a9d-885f-4772-8b96-c1bcd301d29a

	measure 'meas.ssr_history_success_rate_new_logo' =
			
			var total_steps = calculate( count(ssr_history[_sys_doc_id]), ssr_history[step_name] = "New Logo Selling")
			var success_steps  = calculate( count(ssr_history[_sys_doc_id]), ssr_history[step_name] = "New Logo Selling" && ssr_history[step_success] = True)
			var res = DIVIDE(success_steps, total_steps, BLANK())
			return res
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: fa9e1151-8de3-4668-89ad-f2eaed7add14

	measure 'meas.ssr_history_success_rate_existing_customer_selling' =
			
			var total_steps = calculate( count(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Existing Customer Selling")
			var success_steps  = calculate( count(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Existing Customer Selling" && ssr_history[step_success] = True)
			var res = DIVIDE(success_steps, total_steps, BLANK())
			return res
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: e484b066-4984-4d9d-8adf-729dbb4f55c1

	measure 'meas.ssr_history_success_rate_post_sales' =
			
			var total_steps = calculate( count(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Post-Sales Support")
			var success_steps  = calculate( count(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Post-Sales Support" && ssr_history[step_success] = True)
			var res = DIVIDE(success_steps, total_steps, BLANK())
			return res
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 0e227031-78da-4670-8870-e4da03903248

	measure 'meas.ssr_history_accts_per_rep' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]))       // get the count of the id
			var reps = [meas.data_logs_user_count_eop] // get the count of the reps
			var res = divide (accounts, reps,BLANK())       // get the ratio 
			return res
			
			```
		formatString: ##0
		displayFolder: _acct_analysis
		lineageTag: ef4322d7-5c09-417f-a706-2525fea4b444

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_accts_per_rep_prospecting' =
			
			
			var accounts = CALCULATE(
			    [meas.ssr_history_step_count], //calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]),ssr_history[step_name] = "Prospecting")
			    ssr_history[step_name] = "Prospecting"
			)
			var reps = [meas.ssr_history_reps_prospecting] //calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] = "Prospecting")
			var ratio = divide (accounts, reps,BLANK())
			var res = if (ratio > 100, round(ratio / 10, 0) * 10  , round(ratio, 0) ) // clean up a little
			RETURN
			res
		formatString: 0":1"
		displayFolder: _acct_analysis
		lineageTag: 50d5b9c9-7ab5-45b2-81ff-da453cdd5bed

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_accts_per_rep_new_logo' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]),ssr_history[step_name] = "New Logo Selling")
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] = "New Logo Selling")
			var ratio = divide (accounts, reps,BLANK())
			var res = if (ratio > 100, round(ratio / 10, 0) * 10  , round(ratio, 0) ) // clean up a little
			return res
			
			```
		formatString: 0":1"
		displayFolder: _acct_analysis
		lineageTag: 5a44eab4-1830-43ad-aa21-9f856fc514e8

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_accts_per_rep_post_sales' = ```
			
			// var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]),ssr_history[step_name] = "Post-Sales Support")
			// var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] = "Post-Sales Support")
			var accounts = CALCULATE(
			    [meas.ssr_history_ssr_id_count],
			    ssr_history[step_name] = "Post-Sales Support"       // get the account counts for Post-Sales Support 
			)
			var  reps = [meas.ssr_history_reps_post_sales]      // bet the post-sales support reps count
			
			
			var ratio = divide (accounts, reps,BLANK())
			var res = if (ratio > 100, ROUND(ratio / 10, 0) * 10  , ROUND(ratio, 0) ) // clean up a little
			return res
			
			```
		formatString: 0":1"
		displayFolder: _acct_analysis
		lineageTag: e0717400-bf8f-416a-b6d2-8cf787cb0561

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_accts_per_rep_existing_customer_selling' = ```
			
			// var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]),ssr_history[step_name] = "Existing Customer Selling")
			// var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] = "Existing Customer Selling")
			
			var accounts = CALCULATE(
			    [meas.ssr_history_ssr_id_count],
			    ssr_history[step_name] = "Existing Customer Selling"
			)       // get the existing customer selling accounts count
			var reps = [meas.ssr_history_reps_existing_customer_selling]    // get the reps count of existing customer selling
			var ratio = divide (accounts, reps,BLANK())         // get the ratio
			var res = if (ratio > 100, round(ratio / 10, 0) * 10  , round(ratio, 0) ) // clean up a little
			return res
			
			```
		formatString: 0":1"
		displayFolder: _acct_analysis
		lineageTag: b82949f6-3ef5-4418-ba53-ab016e188485

	measure 'meas.ssr_history_success_rate_untouched' =
			
			var total_steps = calculate( count(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Untouched")
			var success_steps  = calculate( count(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Untouched" && ssr_history[step_success] = True)
			var res = DIVIDE(success_steps, total_steps, BLANK())
			return res
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 5dc1a400-c1a6-4398-86b2-d142517b5e22

	measure 'meas.ssr_history_duration_hrs_per_acct' = ```
			
			var dur =  CALCULATE(sum(ssr_history[stkhlds_all_adj_dur])) 
			var touched_accts = CALCULATE(DISTINCTCOUNTNOBLANK(ssr_history[_sys_ssr_id]) ) //only include steps that can have duration 
			var res = DIVIDE(dur, touched_accts, BLANK())
			return res / 3600
			
			
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: c5ab7f91-a47e-426b-869d-2e83347d9056

	measure 'meas.ssr_history_duration_hrs' = ```
			
			var dur = ssr_history[meas.ssr_history_duration_hrs_prospecting] +  ssr_history[meas.ssr_history_duration_hrs_new_logo] +  ssr_history[meas.ssr_history_duration_hrs_post_sales] +   [meas.ssr_history_duration_hrs_existing_customer_selling]
			var res  = dur
			return res
			
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 809df934-9db7-4692-b074-a1fbfe5d72d8

	measure 'meas.ssr_history_success_prob_avg_combined_prospecting_new_logo' =
			
			
			var prob1 = CALCULATE(AVERAGE(ssr_history[step_success_prob]), ssr_history[step_name] = "Prospecting")
			var prob2 = CALCULATE(AVERAGE(ssr_history[step_success_prob]), ssr_history[step_name] = "New Logo Selling")
			var res = prob1 * prob2 // p1 * p2 = p0
			return res
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 896b8c68-d240-4b07-b4b7-91f0702df8b2

	measure 'meas.ssr_history_reps_new_logo' =
			
			var total_steps = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_name] = "New Logo Selling")
			
			
			
			var rep_tbl = SUMMARIZE(CalculateTable(ssr_history, ssr_history[step_name] = "New Logo Selling"), ssr_history[step_owner_id], "step_count", count(ssr_history[_sys_doc_id]))
			var avg_rep_steps = AVERAGEX(rep_tbl, [step_count])
			var thresh = 0.03 // less than 3$ of avg count = if 100 is the norm and u did 3 do not include
			var min_count = avg_rep_steps * thresh // if u have less than C% of the avg steps do not include
			
			var res = countrows(filter(rep_tbl, [step_count] > min_count))
			
			return res
		formatString: 0
		displayFolder: _rep_analysis
		lineageTag: 7b41f432-b57b-436a-9f52-6612e682d4b1

	measure 'meas.ssr_history_reps_prospecting' =
			
			
			var total_steps = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Prospecting")
			
			
			
			var rep_tbl = SUMMARIZE(CalculateTable(ssr_history, ssr_history[step_name] = "Prospecting"), ssr_history[step_owner_id], "step_count", count(ssr_history[_sys_doc_id]))
			var avg_rep_steps = AVERAGEX(rep_tbl, [step_count])
			var thresh = 0.03 // less than 3$ of avg count = if 100 is the norm and u did 3 do not include
			var min_count = avg_rep_steps * thresh // if u have less than C% of the avg steps do not include
			
			var res = countrows(filter(rep_tbl, [step_count] > min_count))
			
			return res
		formatString: 0
		displayFolder: _rep_analysis
		lineageTag: 925a9cb6-6f14-4253-9f0a-4754b8eaf8ff

	measure 'meas.ssr_history_reps_post_sales' =
			
			var total_steps = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Post-Sales Support")
			
			
			
			var rep_tbl = SUMMARIZE(CalculateTable(ssr_history, ssr_history[step_name] = "Post-Sales Support"), ssr_history[step_owner_id], "step_count", count(ssr_history[_sys_doc_id]))
			var avg_rep_steps = AVERAGEX(rep_tbl, [step_count])
			var thresh = 0.03 // less than 3$ of avg count = if 100 is the norm and u did 3 do not include
			var min_count = avg_rep_steps * thresh // if u have less than C% of the avg steps do not include
			
			var res = countrows(filter(rep_tbl, [step_count] > min_count))
			
			return res
		formatString: 0
		displayFolder: _rep_analysis
		lineageTag: 3252972d-15e0-4bd0-9ab2-0605839107c9

	measure 'meas.ssr_history_reps_existing_customer_selling' =
			
			var total_steps = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Existing Customer Selling")
			
			
			
			var rep_tbl = SUMMARIZE(CalculateTable(ssr_history, ssr_history[step_name] = "Existing Customer Selling"), ssr_history[step_owner_id], "step_count", count(ssr_history[_sys_doc_id]))
			var avg_rep_steps = AVERAGEX(rep_tbl, [step_count])
			var thresh = 0.03 // less than 3$ of avg count = if 100 is the norm and u did 3 do not include
			var min_count = avg_rep_steps * thresh // if u have less than C% of the avg steps do not include
			
			var res = countrows(filter(rep_tbl, [step_count] > min_count))
			
			return res
		formatString: #,0
		displayFolder: _rep_analysis
		lineageTag: 7790b103-e7fd-4bb8-9d95-d8d602dea448

	measure 'meas.ssr_history_success_prob_avg_combined_post_sales_existing_customer_selling' =
			
			
			var prob1 = CALCULATE(AVERAGE(ssr_history[step_success_prob]), ssr_history[step_name] = "Post-Sales Support")
			var prob2 = CALCULATE(AVERAGE(ssr_history[step_success_prob]), ssr_history[step_name] = "Existing Customer Selling")
			var res = prob1 * prob2 // p1 * p2 = p0
			return res
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 60063365-13d7-4a50-b7eb-8f8f73ebf662

	measure 'meas.ssr_history_existing_customer_selling_annual_purchases_acct' = ```
			
			
			var reps = 2.1
			
			var res = reps
			return res
			
			```
		formatString: #,0.0
		displayFolder: __needs_attention
		lineageTag: 54a8bc24-24c5-43ac-8ee8-527b00a70f08

	measure 'meas.ssr_history_success_rate_combined_post_sales_existing_customer_selling' =
			
			
			var prob1 = [meas.ssr_history_success_rate_post_sales]
			var prob2 = [meas.ssr_history_success_rate_existing_customer_selling]
			var res = prob1 * prob2 // p1 * p2 = p0
			return res
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: _success_analysis
		lineageTag: dd868325-d5bf-4e23-a238-5f2510fede58

	measure 'meas.ssr_history_success_rate_combined_prospecting_new_logo' =
			
			
			var prob1 = [meas.ssr_history_success_rate_prospecting]
			var prob2 = [meas.ssr_history_success_rate_new_logo]
			var res = prob1 * prob2 // p1 * p2 = p0
			return res
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: _success_analysis
		lineageTag: 1ab48aca-f0c6-4596-a0cf-603a7965798d

	measure 'meas.ssr_history_rev_ending_amt' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 var overridden_dates_tbl =  CALCULATETABLE(ssr , cal_end_dates[Date] >=  date(1900,1,1) &&  cal_end_dates[Date] < date(2100,1,1)) -- get current filter context except all dates
			
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter((overridden_dates_tbl), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter((overridden_dates_tbl), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs,retained_custs)) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			
			
			// assign the res
			var res = ending_amt 
			return IF(isblank(res), 0, res)
			```
		formatString: $ #,##0
		displayFolder: _rev_analysis
		lineageTag: 93df14ad-ecb3-4bf0-8baa-da85c750bfba

	measure 'meas.ssr_history_rev_prev_date' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = calculate(MIN(cal_end_dates[date]))
			var period_end = calculate(MAX(cal_end_dates[date]))
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var prev_period_start = EDATE(period_start,period_in_months)
			var prev_period_end =   EDATE(period_end,period_in_months)
			
			 
			// get the tables - break out of filter context (AKK) and override based on first purch and churn
			var starting_custs =  Filter(ALL(ssr), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_start)  // client before start of period,  churn after period started
			var retained_custs = Filter(ALL(ssr), ssr[col.trueai_first_purchase] <= period_start && ssr[col.trueai_churn_date]  >= period_end)  // client before start of period,  churn after period end
			var churned_custs = Filter(ALL(ssr), ssr[col.trueai_churn_date] >= period_start && ssr[col.trueai_churn_date] <= period_end)  // churned after period started, before period ended
			var ending_custs =  Filter(ALL(ssr), ssr[col.trueai_first_purchase] <= period_end && ssr[col.trueai_churn_date]  >= period_end)  // // client before end of period, churn after  period ended
			
			// get the values based on temp tables
			var starting_cnt = COUNTROWS(starting_custs)
			var starting_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,starting_custs) // look at last years rev for these 
			var retained_cnt = COUNTROWS(retained_custs)
			var retained_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= prev_period_start &&  cal_end_dates[date] <= prev_period_end ,EXCEPT(starting_custs, churned_custs)) // look at last years rev for these 
			var new_cnt = COUNTROWS( EXCEPT(ending_custs,starting_custs ))
			var new_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(ending_custs,starting_custs ) ) // not sure why we cannot use new customers here
			var churned_cnt = COUNTROWS(churned_custs) * -1  
			var churned_amt = CALCULATE(SUM(ssr_history[opp_won_amt]), EXCEPT(starting_custs,retained_custs) ) * -1 
			var ending_cnt = COUNTROWS(ending_custs)
			var ending_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),  cal_end_dates[date] >= period_start &&  cal_end_dates[date] <= period_end ,ending_custs) 
			
			// assign the res
			var res = period_end & ""
			return IF(isblank(res), 0, res)
			```
		displayFolder: _rev_analysis
		lineageTag: 5735778a-7e7d-4b84-9936-8eced2bc5ad2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_rev_retention_rate' = DIVIDE([meas.ssr_history_rev_retained_amt],[meas.ssr_history_rev_starting_amount] , blank())
		formatString: #,##0%
		displayFolder: _rev_analysis
		lineageTag: 7cadf8f0-aa7c-407e-b122-98a508dcac32

	/// _success_analysis
	measure 'meas.ssr_history_leads_mkt_gen' =
			
			var res = CALCULATE(distinctcount(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Lead Gen",  users[col.user_role_dept] = "MKT") +0
			return res
		formatString: 0
		displayFolder: _lead_analysis
		lineageTag: ec970d6a-c030-434b-a510-68181449aec5

	/// _success_analysis
	measure 'meas.ssr_history_leads_mkt_gen_probability_of_conversion ' = ```
			
			var res = CALCULATE(AVERAGE(ssr_history[step_next_success_prob]), ssr_history[step_name] = "Untouched",  users[col.user_role_dept] = "MKT") 
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 2984be88-db28-48db-a80e-bd0fe2f82848

	/// _success_analysis
	measure 'meas.ssr_history_leads_mkt_gen_vi_vc' = ```
			
			var res = CALCULATE(sum(ssr[col.trueai_vi_lead_gen_value_created]), ssr_history[step_name] = "Lead Gen",  users[col.user_role_dept] = "MKT") 
			return res
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _lead_analysis
		lineageTag: 30a33c57-60bd-40cf-b6c8-8334095467ab

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	/// _success_analysis
	measure 'meas.ssr_history_leads_sales_gen_probability_of_conversion' = ```
			
			var res = CALCULATE(AVERAGE(ssr_history[step_next_success_prob]), ssr_history[step_name] = "Untouched",  users[col.user_role_dept] = "SALES") 
			
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 85919f4d-8a4b-4893-8fdb-31b8c26a0bed

	/// _success_analysis
	measure 'meas.ssr_history_leads_sales_gen_vi_vc' = ```
			
			var res = CALCULATE(sum(ssr[col.trueai_vi_lead_gen_value_created]), ssr_history[step_name] = "Lead Gen",  users[col.user_role_dept] = "SALES") 
			return res
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _lead_analysis
		lineageTag: 68d61c77-f06b-40b3-9c0e-a9249f7c7712

	/// _success_analysis
	measure 'meas.ssr_history_leads_inbound' = ```
			
			var res = CALCULATE(distinctcount(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Lead Gen",  ssr[col.trueai_leadsource_is_inbound] = true) 
			return res
			```
		formatString: 0
		displayFolder: _lead_analysis
		lineageTag: 07b5a2f7-27b1-469f-868d-c31cefd92d69

	/// _success_analysis
	measure 'meas.ssr_history_leads_outbound' = ```
			
			var res = CALCULATE(distinctcount(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Lead Gen",  ssr[col.trueai_leadsource_is_inbound] = false) 
			return res
			```
		formatString: 0
		displayFolder: _lead_analysis
		lineageTag: 9a99775f-4298-4773-a6a2-912de6c67c61

	/// _success_analysis
	measure 'meas.ssr_history_leads_inbound_probability_of_conversion' = ```
			
			var res = CALCULATE(
			    AVERAGE(
			        ssr_history[step_next_success_prob]
			    ), 
			    ssr_history[step_name] = "Untouched",  
			    ssr[col.trueai_leadsource_is_inbound] = true
			) 
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 97933b79-e8e9-4fee-83cc-6c089529895f

		changedProperty = FormatString

	/// _success_analysis
	measure 'meas.ssr_history_leads_inbound_vi_vc' = ```
			
			var res = CALCULATE(sum(ssr[col.trueai_vi_lead_gen_value_created]), ssr_history[step_name] = "Lead Gen",  ssr[col.trueai_leadsource_is_inbound] = true) 
			return res
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _lead_analysis
		lineageTag: 20033524-1e8d-474d-ac67-658a08493b6f

	/// _success_analysis
	measure 'meas.ssr_history_leads_outbound_probability_of_conversion' = ```
			
			var res = CALCULATE(AVERAGE(ssr_history[step_next_success_prob]), ssr_history[step_name] = "Untouched",  ssr[col.trueai_leadsource_is_inbound] = false) 
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: f91b2120-2233-4815-997d-7bf1e3ff416c

	/// _success_analysis
	measure 'meas.ssr_history_leads_outbound_vi_vc' = ```
			
			var res = CALCULATE(sum(ssr[col.trueai_vi_lead_gen_value_created]), ssr_history[step_name] = "Lead Gen",  ssr[col.trueai_leadsource_is_inbound] = false) 
			return res
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _lead_analysis
		lineageTag: cc6480a3-19f1-460e-911a-17de417b0814

	measure 'meas.ssr_history_vi_value_created_per_hr' = ```
			
			var vc = Calculate(sum(ssr_history[vi_value_created]))
			var res = divide( vc, [meas.ssr_history_duration_hrs], BLANK()) 
			return res 
			```
		formatString: $#,##0" /hr"
		displayFolder: _vi_analysis
		lineageTag: ed355da3-5aa1-447b-9a27-96ebb7ac194a

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_per_step' = CALCULATE(AVERAGE(ssr_history[stkhlds_all_adj_dur]))/3600
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: b7b16d19-579d-4848-a168-3b9e3547cf41

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_vi_value_created_per_rep' =
			
			var reps =[meas.ssr_history_reps]
			var val_created = CALCULATE(sum(ssr_history[vi_value_created]))
			var res = divide(val_created, reps, BLANK())
			return res
		formatString: $#,##0" /rep"
		displayFolder: _vi_analysis
		lineageTag: 5320acb5-500b-4f5b-b1a4-70e0ee28ecb0

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_rep_week' =
			
			var reps = [meas.data_logs_user_count_all]           // get the reps count
			var days = DATEDIFF(CALCULATE(MIN(cal_end_dates[Date])) , CALCULATE(MAX(cal_end_dates[Date])),DAY) +1   // getting the weeks count
			var dur = calculate(sum(ssr_history[stkhlds_all_adj_dur])) / 3600         // get the duration in  hours
			var day_dur = dur/days          // get te day wise dur
			var week_dur = day_dur*7            // get the weekly dur
			
			var res = DIVIDE(
			    week_dur, reps)     // get the time spent per rep / week
			
			
			RETURN
			res
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 5888cfd5-bc96-4d43-bd06-24f496e4dd28

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_reps' =
			//CALCULATE(DISTINCTCOUNT(ssr_history[step_owner_id]))
			var total_steps = CALCULATE(COUNT(ssr_history[_sys_doc_id]))
			var rep_tbl = SUMMARIZE(CalculateTable(ssr_history), ssr_history[step_owner_id], "step_count", count(ssr_history[_sys_doc_id]))
			var avg_rep_steps = AVERAGEX(rep_tbl, [step_count])
			var thresh = 0.03            // less than 3$ of avg count = if 100 is the norm and u did 3 do not include
			var min_count = avg_rep_steps * thresh              // if u have less than C% of the avg steps do not include
			var res = countrows(filter(rep_tbl, [step_count] > min_count))
			
			return res
		formatString: #,0
		displayFolder: _rep_analysis
		lineageTag: 9e46643b-67f5-402c-ad93-26702e13013d

	measure 'meas.ssr_history_open_pipeline_amount_eop' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = calculate(MIN(cal_end_dates[date]))
			var period_end = calculate(MAX(cal_end_dates[date]))
			
			var pipeline_sum = CALCULATE(sum(ssr_history[opp_pipeline_amt] ), 
			cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] <= date(2100,1,1) , // override the main date filter
			ssr_history[_sys_filt_start_date] <=  period_end 
			&&  ssr_history[_sys_filt_end_date] > period_start
			&& ssr_history[step_outcome] <> "any string" // one more overide
			
			) 
			var res = pipeline_sum
			return res
			
			```
		displayFolder: _pipeline_analysis
		lineageTag: 27f63b23-5ebd-424a-bddc-181050406115

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_open_pipeline_count_eop' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = [meas.context_date_min]
			var period_end = [meas.context_date_max]
			
			var pipeline_sum = CALCULATE(COUNT(ssr_history[_sys_doc_id]), 
			cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1) , // override the main date filter
			ssr_history[_sys_filt_start_date] <=  period_end 
			&&  ssr_history[_sys_filt_end_date] > period_start
			&& ssr_history[step_outcome] <> "any string" // one more overide
			) 
			var res = pipeline_sum
			return res
			
			```
		formatString: #,0
		displayFolder: _pipeline_analysis
		lineageTag: f7fcb329-3cac-4f58-ba2b-2db92c94d035

	measure 'meas.ssr_history_step_cycle_avg' = ```
			
			var days = CALCULATE(AVERAGE(ssr_history[step_length_in_days]))
			var res = days
			return res
			
			```
		formatString: #" days"
		displayFolder: _success_analysis
		lineageTag: 6dba8979-d78b-4b05-98c7-c5033d4a21e8

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_step_cycle_avg_success' = ```
			
			var days = CALCULATE(AVERAGE(ssr_history[step_length_in_days]),ssr_history[step_success]=true)
			var res = days
			return res
			
			```
		formatString: #,##0" days"
		displayFolder: _success_analysis
		lineageTag: f1a6a6e3-3dc0-4831-85c7-d36fce3e9ab3

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_step_cycle_avg_failure' = ```
			
			var days = CALCULATE(AVERAGE(ssr_history[step_length_in_days]),ssr_history[step_success]=false)
			var res = days
			return res
			
			```
		formatString: #,##0" days"
		displayFolder: _success_analysis
		lineageTag: adf00d52-b307-402d-809b-9876f61f8e6d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_success_rate_sply' = ```
			
			// get the same period last year SPLY
			var sply_start = date(Year(Min(cal_end_dates[Date])) -1, Month(Min(cal_end_dates[Date])), Day(Min(cal_end_dates[Date])))
			var sply_end = date(Year(MAX(cal_end_dates[Date])) -1, Month(MAX(cal_end_dates[Date])), Day(MAX(cal_end_dates[Date])))
			
			var cnt = CALCULATE(Count(ssr_history[_sys_doc_id]), cal_end_dates[Date] >= sply_start &&  cal_end_dates[Date] <= sply_end)  
			
			var res =DIVIDE([meas.ssr_history_success_count_sply], cnt)
			
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: ce3840cd-9d3f-4e2b-8abc-4eda39583b5b

	measure 'meas.ssr_history_success_count_sply' = ```
			
			// get the same period last year SPLY by overriding the cal dates
			var sply_start = date(Year(Min(cal_end_dates[Date])) -1, Month(Min(cal_end_dates[Date])), Day(Min(cal_end_dates[Date])))
			var sply_end = date(Year(MAX(cal_end_dates[Date])) -1, Month(MAX(cal_end_dates[Date])), Day(MAX(cal_end_dates[Date])))
			
			var res = CALCULATE(Count(ssr_history[_sys_doc_id]), cal_end_dates[Date] >= sply_start &&  cal_end_dates[Date] <= sply_end,  ssr_history[step_success] = true)  
			
			return res 
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: 32e673fd-99e4-4352-a4be-e87d182368b7

	measure 'meas.ssr_history_rev_avg_won_amt' = CALCULATE(Average(ssr_history[opp_won_amt]), ssr_history[opp_won_amt] > 0 )
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: d7f8ae5b-7978-4a21-9ee6-d21ffaa5d886

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_open_pipeline_win_rate' = ```
			
			
			var res = divide(ssr_history[meas.ssr_history_success_count] , ssr_history[meas.ssr_history_open_pipeline_count_eop])
			return 
			res
			```
		formatString: 0%;-0%;0%
		displayFolder: _pipeline_analysis
		lineageTag: 91097d31-3c50-4ba6-972c-d452503d205b

	measure 'meas.ssr_history_step_count' = ```
			
			var res = CALCULATE(
			    count(ssr_history[_sys_doc_id])
			    )
			return res
			
			```
		formatString: ###,###,###
		displayFolder: _success_analysis
		lineageTag: 0d6d1a64-7077-4e08-a775-44717142940e

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_step_count_sply' = ```
			
			
			// get the same period last year SPLY
			var sply_start = date(Year(Min(cal_end_dates[Date])) -1, Month(Min(cal_end_dates[Date])), Day(Min(cal_end_dates[Date])))
			var sply_end = date(Year(MAX(cal_end_dates[Date])) -1, Month(MAX(cal_end_dates[Date])), Day(MAX(cal_end_dates[Date])))
			
			var res = CALCULATE(Count(ssr_history[_sys_doc_id]), cal_end_dates[Date] >= sply_start &&  cal_end_dates[Date] <= sply_end)  
			return res
			
			```
		formatString: 0
		displayFolder: _success_analysis
		lineageTag: 63f037f8-37fe-40a5-82bd-4d44e6c0b684

	measure 'meas.ssr_history_step_cycle_initially_expected' = ```
			
			var days = CALCULATE(AVERAGE(ssr_history[col.step_length_in_days_initially_expected]))
			var res = days
			return res
			
			```
		formatString: 0" days"
		displayFolder: _success_analysis
		lineageTag: 90554d4d-b498-48e5-a7f1-b7d51490027d

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_qual_bucket_highest_count' = ```
			
			var cnt = CALCULATE(count(ssr_history[_sys_doc_id]), ssr_history[entity_qual_bucket] ="Highest")
			var res =  if(ISBLANK(cnt), 0,cnt)
			return res
			
			```
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: 83bf4bc6-9008-4230-9bc7-892068a85101

	measure 'meas.ssr_history_qual_bucket_high_count' = ```
			
			var cnt = CALCULATE(count(ssr_history[_sys_doc_id]), ssr_history[entity_qual_bucket] ="High")
			var res =  if(ISBLANK(cnt), 0,cnt)
			return res
			
			```
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: b89cd289-ae47-4719-83b6-b3627e025365

	measure 'meas.ssr_history_qual_bucket_mid_count' = ```
			
			var cnt = CALCULATE(count(ssr_history[_sys_doc_id]), ssr_history[entity_qual_bucket] ="Mid")
			var res =  if(ISBLANK(cnt), 0,cnt)
			return res
			
			```
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: 29752d36-9fce-46f1-b418-98a1f1adf9e0

	measure 'meas.ssr_history_qual_bucket_low_count' = ```
			
			var cnt = CALCULATE(count(ssr_history[_sys_doc_id]), ssr_history[entity_qual_bucket] ="Low")
			var res =  if(ISBLANK(cnt), 0,cnt)
			return res
			
			```
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: 8996fec3-d2fc-4257-87db-4b9764bde5a5

	measure 'meas.ssr_history_qual_bucket_lowest_count' = ```
			
			var cnt = CALCULATE(count(ssr_history[_sys_doc_id]), ssr_history[entity_qual_bucket] ="Lowest")
			var res =  if(ISBLANK(cnt), 0,cnt)
			return res
			
			```
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: 97d31ed8-f041-46e6-9c9c-abb5c61f6cdb

	measure 'meas.ssr_history_duration_hrs_per_prior_step' = ```
			
			var steps =  CALCULATE(DISTINCTCOUNT(ssr_history[_sys_doc_id])) 
			var res= divide([meas.ssr_history_duration_prior_step_hrs], steps , blank()) 
			return res
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 88bb1aea-7472-47b6-b5eb-eb012e8ba6fb

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_failure_lost_stage_early_count' = ```
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[opp_lost_stage] = "Early")  
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: 0cb89f94-40dd-4194-be19-5849222a1213

	measure 'meas.ssr_history_failure_lost_stage_late_count' = ```
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[opp_lost_stage] = "Late")  
			```
		formatString: 0
		displayFolder: _success_analysis
		lineageTag: 968f5ca0-d732-4fe0-aa11-f8ddf917d428

	measure 'meas.ssr_history_failure_lost_stage_mid_count' = ```
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[opp_lost_stage] = "Mid")  
			```
		formatString: 0
		displayFolder: _success_analysis
		lineageTag: 83496208-85a5-4cdc-a9c2-22f3bb1712da

	measure 'meas.ssr_history_all_activity_engagement_rate' =
			
			var acts =  ROUND([meas.ssr_history_all_activity_avg_count],0)  // get the all act average count
			var eng_acts =  ROUND([meas.ssr_history_all_activity_avg_eng_count],0)      // get all all act eng avg count
			var res = DIVIDE(eng_acts, acts,0)
			RETURN
			res
		formatString: 0%;-0%;0%
		displayFolder: _activity_analysis
		lineageTag: 07f0bcbd-09b4-4256-81eb-0fe9c36321e9

		changedProperty = FormatString

	measure 'meas.ssr_history_all_phone_call_avg_count' =
			
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_call_count]))
			return res
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: b3ee97de-3e57-4a20-a33a-41240324546b

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_phone_call_engagement_rate' =
			
			var acts =  ROUND([meas.ssr_history_all_phone_call_avg_count],0)
			var eng_acts = ROUND([meas.ssr_history_all_phone_call_avg_eng_count],0)
			var res = DIVIDE(eng_acts, acts, 0)
			RETURN
			res
		formatString: 0%;-0%;0%
		displayFolder: _activity_analysis
		lineageTag: 9c1b7a96-94c7-443a-968d-3e59661cbeda

		changedProperty = FormatString

	measure 'meas.ssr_history_all_email_avg_count' =
			
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_email_count]))  // all act email count
			return res
		formatString: #,0
		displayFolder: _activity_analysis
		lineageTag: a77b7987-2efa-4bdf-8f6c-d4820b8c1d7c

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_social_media_avg_count' =
			VAR res =
			    CALCULATE ( AVERAGE ( ssr_history[stkhlds_all_social_count] ) )
			RETURN
			    res
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: b151566d-bd91-47c8-9d31-234e5a500a38

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_meeting_avg_count' =
			//stkhlds_all_act_type_meeting_count
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_meeting_count]))
			return res
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: e8e9076c-5d7c-484e-bb26-ea81fe3f046c

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_email_engagement_rate' =
			
			var acts =  ROUND([meas.ssr_history_all_email_avg_count],0)   // get the all email avg count
			var eng_acts = ROUND([meas.ssr_history_all_email_avg_eng_count],0)      // get teh all email eng count
			var res = DIVIDE(eng_acts, acts, 0)
			return res
		formatString: 0%;-0%;0%
		displayFolder: _activity_analysis
		lineageTag: c6c32254-8a7c-4415-b1e5-067337ce250e

		changedProperty = FormatString

	measure 'meas.ssr_history_all_social_media_engagement_rate' =
			
			var acts =  ROUND([meas.ssr_history_all_social_media_avg_count],0)
			var eng_acts =  ROUND([meas.ssr_history_all_social_media_avg_eng_count],0)
			var res = DIVIDE(eng_acts, acts, 0)
			RETURN
			res
		formatString: 0%;-0%;0%
		displayFolder: _activity_analysis
		lineageTag: 0c764738-d390-40fb-b929-75d1c0b0f1c4

		changedProperty = FormatString

	measure 'meas.ssr_history_all_meeting_engagement_rate' =
			
			var acts =  ROUND([meas.ssr_history_all_meeting_avg_count],0)       // get th total meeting counts
			var eng_acts =  ROUND([meas.ssr_history_all_meeting_avg_eng_count],0)  // get the ttoal eng counts
			var res = DIVIDE(eng_acts, acts, 0)
			return res
		formatString: 0%;-0%;0%
		displayFolder: _activity_analysis
		lineageTag: 269b9229-384c-4d0f-8114-be68bf1b5196

		changedProperty = FormatString

	measure 'meas.ssr_history_stakeholders_title_function_most_common' = ```
			
			    var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_most_common_title_dept])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			
			    // pick the value we're interested in
			    var res = top_cat
			    return res
			
			```
		displayFolder: _stakeholder_analysis
		lineageTag: 79ae3d07-ca22-4aec-ad89-0882f1042150

		changedProperty = FormatString

	measure 'meas.ssr_history_stakeholders_title_level_most_common' = ```
			
			    var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_most_common_title_seniority])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			
			    // pick the value we're interested in
			    var res = top_cat
			    return res
			
			```
		displayFolder: _stakeholder_analysis
		lineageTag: 90c790dd-d83d-4281-951b-c641cc53d5f0

	measure 'meas.ssr_history_stakeholders_title_function_most_common_portion' = ```
			
			       var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_most_common_title_dept])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			    // pick the value we're interested in
			    var res = top_ratio
			    return res
			
			```
		formatString: 0%;-0%;0%
		displayFolder: _stakeholder_analysis
		lineageTag: 08fbc4b1-e367-4361-99a9-ab97e6a4ac19

		changedProperty = FormatString

	measure 'meas.ssr_history_stakeholders_title_level_most_common_portion' = ```
			
			    var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_most_common_title_seniority])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			
			    // pick the value we're interested in
			    var res = top_ratio
			    return res
			
			```
		formatString: 0%;-0%;0%
		displayFolder: _stakeholder_analysis
		lineageTag: 2b9b5569-b438-4530-824d-2959f18d9e50

		changedProperty = FormatString

	measure 'meas.ssr_history_stakeholders_title_function_second_common' = ```
			
			
			    var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_most_common_title_dept])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			
			    // pick the value we're interested in
			    var res = second_cat
			    return res
			
			```
		displayFolder: _stakeholder_analysis
		lineageTag: bff42cea-e836-4f43-9ab6-8d0c92d9173f

	measure 'meas.ssr_history_stakeholders_title_level_second_common' = ```
			
			    var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_most_common_title_seniority])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			
			    // pick the value we're interested in
			    var res = second_cat
			    return res
			
			```
		displayFolder: _stakeholder_analysis
		lineageTag: 321c65f7-0650-4c3b-8541-d95c04e84f5f

	measure 'meas.ssr_history_stakeholders_title_function_second_common_portion' = ```
			
			    var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_most_common_title_seniority])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			
			    // pick the value we're interested in
			    var res = second_ratio
			    return res
			
			```
		formatString: 0%;-0%;0%
		displayFolder: _stakeholder_analysis
		lineageTag: 596c4227-ccad-436a-b9de-9851c1631d4f

		changedProperty = FormatString

	measure 'meas.ssr_history_stakeholders_title_level_second_common_portion' = ```
			
			    var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_most_common_title_dept])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			
			    
			    // pick the value we're interested in
			    var res = second_ratio
			    return res
			
			```
		formatString: 0%;-0%;0%
		displayFolder: _stakeholder_analysis
		lineageTag: ff04f1ed-9f46-4360-90a5-070cd3e0a102

		changedProperty = FormatString

	measure 'meas.ssr_history_row_filler' = ""
		displayFolder: _filler
		lineageTag: 5e6711da-ea74-4e7e-84c8-c0c9d9c5517f

	measure 'meas.ssr_history_stakeholders_title_level__most_common_highest' = ```
			
			  var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_max_title_seniority])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			
			    // pick the value we're interested in
			    var res = top_cat
			    return res
			
			```
		displayFolder: _stakeholder_analysis
		lineageTag: db711453-ed69-4fc8-a303-d39ca6dc3990

	measure 'meas.ssr_history_stakeholders_title_level__most_common_highest_portion' = ```
			
			  var tbl_context_filt_data1 = SELECTCOLUMNS( CALCULATETABLE(ssr_history), "cat", ssr_history[stkhlds_all_max_title_seniority])  // get the current context data w/ filters as a single col table    
			    var tbl_context_filt_data = Filter(tbl_context_filt_data1,ISBLANK([cat]) = false && [cat] <> "" )   //filter out blank and null
			
			    var all_filt_data_count = countrows(tbl_context_filt_data)  // get the count of the current filtered data w/ out grouping context for the "all" set
			    var tbl_context_filt_data_sum = SUMMARIZE((tbl_context_filt_data), [cat], "cat_count", count([cat])) // summarize by category
			    var tbl_context_filt_data_ranked = ADDCOLUMNS(tbl_context_filt_data_sum, "cat_rank", Rankx(tbl_context_filt_data_sum, [cat_count],,DESC,Dense)) // add ranking function on summarized table
			    
			    //now we have the data - now filter by rank to get the specific values we need
			    var top_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat_count]) 
			    var top_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank]=1), [cat])
			    var top_ratio =  DIVIDE(top_count, all_filt_data_count, BLANK())
			    // same for the second values
			    var second_count = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat_count])
			    var second_cat = MAXX(FILTER(tbl_context_filt_data_ranked,[cat_rank] =2), [cat])
			    var second_ratio =  DIVIDE(second_count, all_filt_data_count, BLANK())
			    
			
			    // pick the value we're interested in
			    var res = top_ratio
			    return res
			
			```
		formatString: 0%;-0%;0%
		displayFolder: _stakeholder_analysis
		lineageTag: 6e1e3b55-e54a-49b7-9f79-1462d0e42fc5

		changedProperty = FormatString

	measure 'meas.ssr_history_duration_prior_step_hrs' = ```
			
			var dur = calculate(sum(ssr_history[col.adjusted_duration_prior_step]) ) / 3600 // turn to hours
			var res  = round(dur / 1, 0) * 1 // make it ten hour increments
			return res
			
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 79165f69-9a8f-48b0-8cde-46cf77f873b2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_duration_hrs_prosp_new_logo' = ```
			
			var dur = ssr_history[meas.ssr_history_duration_hrs_prospecting] +  ssr_history[meas.ssr_history_duration_hrs_new_logo] 
			var res  = dur
			return res
			
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: ad36d322-cb74-4f0c-89b5-ca7bb837786f

	measure 'meas.ssr_history_duration_hrs_post_sales_existing_customer_selling' = ```
			
			var dur =  ssr_history[meas.ssr_history_duration_hrs_post_sales] +   [meas.ssr_history_duration_hrs_existing_customer_selling]  // sum
			var res  = dur
			return res
			
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: f401a9df-009d-444b-9f92-5fbd2773eb60

	/// _success_analysis
	measure 'meas.ssr_history_leads' = ```
			
			var res = CALCULATE(distinctcount(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Lead Gen") 
			return res
			```
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: ec696141-f095-45ca-97b3-aa96d8f0371f

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_success_count_untouched' = ```
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[step_name]= "Untouched" && ssr_history[step_success] = true)  
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: cbf6c741-ae9a-40da-93a8-27f45ed6b82d

	measure 'meas.ssr_history_success_count_lead_gen' = ```
			CALCULATE(
			    count(ssr_history[_sys_doc_id]),
			    ssr_history[step_name]= "Untouched" &&  ssr_history[step_success] = true
			)  
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: b860dff0-c471-4766-baf2-6afd2409b174

	measure 'meas.ssr_history_success_count_for_new_logo_and_existing_customer_selling' = ```
			
			var res = [meas.ssr_history_success_count_new_logo] + [meas.ssr_history_success_count_existing_customer_selling] 
			return res
			```
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: 1ce6780c-a8c6-4ee3-85f3-d89142728f2d

	measure 'meas.ssr_history_success_rate_combined_new_logo_and_existing_customer_selling' = ```
			
			
			var prob1 = [meas.ssr_history_success_rate_new_logo]
			var prob2 = [meas.ssr_history_success_rate_existing_customer_selling]
			var res = (prob1 + prob2) / 2 -- p1 + p2 / 2 = p0
			return res
			
			```
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: f13ec5a7-b5e5-482a-ad06-a51a365a9d5c

		changedProperty = FormatString

	measure 'meas.ssr_history_rev_ending_avg_acct_amt' =
			
			
			var res = DIVIDE([meas.ssr_history_rev_ending_amt],[meas.ssr_history_rev_ending_count])
			return res
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: cef552ff-98d0-4ced-a54a-e556e23e1138

		changedProperty = FormatString

	measure 'meas.ssr_history_rev_ending_max_acct_amt' = ```
			
			var  tbl_data = CALCULATETABLE(SUMMARIZE(ssr_history, ssr_history[_sys_ssr_id], "opp_won_amount", sum(ssr_history[opp_won_amt]))) // group by account
			var res = MAXX(tbl_data, [opp_won_amount]) // pick the max nums
			return  res 
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 530470ab-eedd-4fb4-91a6-7657af49ffe6

		changedProperty = FormatString

	measure 'meas.ssr_history_rev_pareto_count' = ```
			
			var period_start = calculate(MIN(cal_end_dates[Date]))
			var period_end = calculate(MAX(cal_end_dates[Date]))
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var  filt = CALCULATETABLE(SUMMARIZE(Filter(ALLSELECTED(ssr_history),ssr_history[opp_won_amt] <> 0 && RELATED(cal_end_dates[Date]) >= period_start &&  (RELATED(cal_end_dates[Date]) <= period_end )), ssr_history[_sys_ssr_id], "acct_won_amount", sum(ssr_history[opp_won_amt]))) // group by account
			var filt_ranked = ADDCOLUMNS(filt, "acct_won_rank",  RANKX(filt, [acct_won_amount]))    -- rank by amount
			var filt_ranked_totaled = ADDCOLUMNS(filt_ranked, "acct_won_run_tot",  SUMX(FIlter(filt_ranked, [acct_won_rank] >= EARLIER([acct_won_rank])), [acct_won_amount]) ) -- running total sorted by rank   
			var tot_amt = SUMX(filt, [acct_won_amount]) // get the total amount for all 
			var tot_count = COUNTX(filt,[acct_won_amount])  // get the total count for all
			var pareto = tot_amt * .2  // calculate the top pareto amount inverted
			var count_to_pareto = COUNTX(FILTER(filt_ranked_totaled, [acct_won_run_tot] >= pareto ), [acct_won_amount]) // apply a filter to the count where the running total is still less than bottom pareto
			
			var res  = count_to_pareto // get the inverse of that count
			
			return res// return count needed to get to 80%))))
			```
		formatString: #,0
		displayFolder: _rev_analysis
		lineageTag: 644b1d6c-2bbc-4511-9b05-286cf268c3b2

	measure 'meas.ssr_history_rev_pareto_count_tot' = ```
			
			var period_start = calculate(MIN(cal_end_dates[Date]))
			var period_end = calculate(MAX(cal_end_dates[Date]))
			var period_in_months =  DATEDIFF(period_start, period_end + 1, month) * -1
			var  filt = CALCULATETABLE(SUMMARIZE(Filter(ALLSELECTED(ssr_history), ssr_history[opp_won_amt] <> 0 && RELATED(cal_end_dates[Date]) >= period_start &&  (RELATED(cal_end_dates[Date]) <= period_end )), ssr_history[_sys_ssr_id], "acct_won_amount", sum(ssr_history[opp_won_amt]))) // group by account
			--var filt_ranked = ADDCOLUMNS(filt, "rank",  RANKX(filt, [acct_won_amount]))    -- rank by amount
			--var filt_ranked_totaled = ADDCOLUMNS(filt_ranked, "run_tot",  SUMX(FIlter(filt_ranked, [rank] >= EARLIER([rank])), [acct_won_amount]) ) -- running total sorted by rank   
			var tot_amt = SUMX(filt, [acct_won_amount]) // get the total amount for all 
			var tot_count = COUNTX(filt,[acct_won_amount])  // get the total count for all
			--var pareto = tot_amt * .2  // calculate the top pareto amount inverted
			--var count_to_pareto = COUNTX(FILTER(filt_ranked_totaled, [run_tot] >= pareto ), [acct_won_amount]) // apply a filter to the count where the running total is still less than bottom pareto
			
			var res  = tot_count // get the inverse of that count
			
			return res// return count
			```
		formatString: #,0
		displayFolder: _rev_analysis
		lineageTag: f0cafd0e-5577-480e-a997-65a7d8a1a90f

	measure 'meas.ssr_history_rev_pareto_percentage' =
			
			
			var res  = DIVIDE([meas.ssr_history_rev_pareto_count],[meas.ssr_history_rev_pareto_count_tot]) // get the inverse of that count
			
			return res// return count needed to get to 80%))))
		formatString: 0%;-0%;0%
		displayFolder: _rev_analysis
		lineageTag: 9f3db7b5-5eea-46d5-b6f5-26076181b516

		changedProperty = FormatString

	measure 'meas.ssr_history_rev_pareto_percentage_remaining' =
			
			
			var res  = 1-[meas.ssr_history_rev_pareto_percentage] //DIVIDE([meas.ssr_history_rev_pareto_count],[meas.ssr_history_rev_pareto_count_tot]) // get the inverse of that count
			
			return res// return count needed to get to 80%))))
		formatString: 0%;-0%;0%
		displayFolder: _rev_analysis
		lineageTag: 8e23c96a-3bab-4f8d-a259-dc16f82760ca

		changedProperty = FormatString

	measure 'meas.ssr_history_rep_users_avg' = CALCULATE(AVERAGE(ssr_history[step_users_tot]))
		formatString: 0.0
		displayFolder: _rep_analysis
		lineageTag: 8d5be987-4951-4d7c-8fb1-3f0ba5b79891

		changedProperty = FormatString

	measure 'meas.ssr_history_rep_users_mgr_involved_percentage' = ```
			
			 var deals_w_mgr = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_mgr_involved] = True) +0
			 var total_deals = CALCULATE(COUNT(ssr_history[_sys_doc_id]))
			 var res = DIVIDE(deals_w_mgr , total_deals)
			 return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _rep_analysis
		lineageTag: 8bb5a079-e469-4244-af3f-9d05b8371096

		changedProperty = FormatString

	measure 'meas.ssr_history_pipeline_amt_user_eop_avg' =
			
			DIVIDE(
			        SUM('ssr_history'[opp_pipeline_amt]),
			        [meas.data_logs_user_count_eop]
			)
		formatString: \$#,0.00;(\$#,0.00);\$#,0.00
		displayFolder: _pipeline_analysis
		lineageTag: 838bf620-5611-403a-bb27-813970e9a674

		changedProperty = FormatString

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_accts_per_rep_new_business' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), 
			        ssr_history[step_name] IN {"Untouched", "Prospecting", "New Logo Selling"}
			       )  // all outcomes 
			        
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] IN {"Untouched", "Prospecting", "New Logo Selling"}) // keep all reps here
			var res = divide (accounts, reps,BLANK())
			return res
			
			
			```
		formatString: ##0
		displayFolder: _acct_analysis
		lineageTag: 265e994c-c0e4-4472-8908-0ea7991efb2a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_accts_per_rep_existing_business' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), 
			        ssr_history[step_name] IN {"Post-Sales Support", "Existing Customer Selling"})      // distinct count of Post-Sales support and Existing Customer Selling
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),
			        ssr_history[step_name] IN {"Post-Sales Support", "Existing Customer Selling"})      // total reps count of Post-Sales Support and Existing Customer Selling
			var res = divide (accounts, reps,BLANK())       // get the ratio
			return res
			
			```
		formatString: ##0
		displayFolder: _acct_analysis
		lineageTag: c34c403e-3ce2-4614-a1ed-f6d0bf23a513

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_accts_per_rep_new_business_sold_to' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), 
			        ssr_history[step_name] IN {"Untouched", "Prospecting", "New Logo Selling"}
			        && ssr_history[step_outcome] IN {
			        "Converted",
			        "Disqualified",
			        "Closed Lost",
			        "Closed Won"
			       
			        })  // all outcomes post coverting 
			        
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] IN {"Untouched", "Prospecting", "New Logo Selling"}) // keep all reps here
			var res = divide (accounts, reps,BLANK())
			return res
			```
		formatString: ##0
		displayFolder: _acct_analysis
		lineageTag: 330f4c5b-b9c0-414e-bf3f-2ef9de3f97ee

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_accts_per_rep_new_business_won' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), 
			        ssr_history[step_name] IN {"Untouched", "Prospecting", "New Logo Selling"}
			        && ssr_history[step_outcome] IN {
			        
			        "Closed Won"
			       
			        })  // all outcomes post coverting 
			        
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] IN {"Untouched", "Prospecting", "New Logo Selling"}) // keep all reps here
			var res = divide (accounts, reps,BLANK())
			return res
			
			
			```
		formatString: ##0
		displayFolder: _acct_analysis
		lineageTag: 1cbb449b-5d59-4159-ade6-0e30ee8c9243

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_accts_per_rep_new_business_prospected_to' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), 
			        ssr_history[step_name] IN {"Untouched", "Prospecting", "New Logo Selling"}
			        && ssr_history[step_outcome] IN {
			       "Prospecting",
			        "Abandoned",
			        "Converted",
			        "Disqualified",
			        "Closed Lost",
			        "Closed Won"
			       
			        })  // all outcomes post touching 
			        
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] IN {"Untouched", "Prospecting", "New Logo Selling"}) // keep all reps here
			var res = divide (accounts, reps,BLANK())
			return res
			
			
			```
		formatString: ##0
		displayFolder: _acct_analysis
		lineageTag: 8527246d-5818-4209-90ed-5a1f62d87070

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_accts_per_rep_existing_business_supported' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), 
			        ssr_history[step_name] IN {"Post-Sales Support", "Existing Customer Selling"}
			        && ssr_history[step_outcome] IN {
			        "Churned",
			        "Started Existing Customer Selling",
			        "Closed Lost",
			        "Closed Won"}
			       ) // all outcomes for the step filtering with Post-Sales Support and Existing Customer Selling
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),
			        ssr_history[step_name] IN {"Post-Sales Support", "Existing Customer Selling"})      // get the reps count filtering with Post-Sales Support and Existing Customer Selling
			var res = divide (accounts, reps,BLANK())           // ratio
			return res
			
			```
		formatString: ##0
		displayFolder: _acct_analysis
		lineageTag: 57dcb8af-de2e-466a-b153-569c7a1a92a2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_accts_per_rep_existing_business_upsold_to' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), 
			        ssr_history[step_name] IN {"Post-Sales Support", "Existing Customer Selling"}
			        && ssr_history[step_outcome] IN {
			        "Started Upselling",
			        "Closed Lost",
			        "Closed Won"}
			       ) // all started selling filtering with Post-Sales Support and Existing Customer Selling
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),
			        ssr_history[step_name] IN {"Post-Sales Support", "Existing Customer Selling"})      // get the reps count for Post-Sales Support and Existing Customer Selling
			var res = divide (accounts, reps,BLANK())       // get the ratio
			return res
			
			```
		formatString: ##0
		displayFolder: _acct_analysis
		lineageTag: 47a71e53-bb47-4a05-9924-8b66d20ba88d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_accts_per_rep_existing_business_won' = ```
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), 
			        ssr_history[step_name] IN {"Post-Sales Support", "Existing Customer Selling"}
			        && ssr_history[step_outcome] IN {
			        "Closed Won"}
			       ) // only won count for Post-Sales Support and Existing Customer Selling
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),
			        ssr_history[step_name] IN {"Post-Sales Support", "Existing Customer Selling"})  // get the reps count for Post-Sales Support and Existing Customer Selling
			var res = divide (accounts, reps,BLANK())       // get thr ratio
			return res
			
			```
		formatString: ##0
		displayFolder: _acct_analysis
		lineageTag: 6afcbc34-3eac-478b-a7b7-2cfcb101e981

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ytd_sales' = ```
			
			var curr_date = CALCULATE(MAX(cal_end_dates[Date]))
			var start_date = date(Year(curr_date),1,1)
			var res =  CALCULATE(SUM(ssr_history[opp_won_amt]), ssr_history[_sys_filt_end_date] >=  start_date) +0
			return res
			
			
			```
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 9e32be2a-91fe-4bcc-8265-4b97fe42e434

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_step_success_count_true' =
			
			var res = CALCULATE(
				COUNT('ssr_history'[_sys_filt_end_date]),
				'ssr_history'[step_success] IN { TRUE }
			)
			return res * +1
		displayFolder: _success_analysis
		lineageTag: bc103e98-ef6c-43ff-8440-82ec573a1f46

		extendedProperty MeasureTemplate =
				{
				  "daxTemplateName": "FilteredMeasure",
				  "version": 0
				}

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_step_success_count_false' =
			
			var res = CALCULATE(
				COUNT('ssr_history'[_sys_filt_end_date]),
				'ssr_history'[step_success] IN { FALSE }
			)
			return res * -1
		displayFolder: _success_analysis
		lineageTag: e8e4c099-726a-4c96-9bc6-caafe721ade8

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_success_prob_avg_combined_prospecting_post_sales_support' = ```
			
			
			var prob1 = CALCULATE(AVERAGE(ssr_history[step_next_success_prob]), ssr_history[step_name] in { "Prospecting", "Post-Sales Support"})
			var res = prob1 
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: e3454434-bc96-450e-be11-ea505436bad6

	measure 'meas.ssr_history_success_prob_avg_combined_prospecting_post_sales_support_sply' = ```
			
			// get the same period last year SPLY by overriding the cal dates
			var sply_start = date(Year(Min(cal_end_dates[Date])) -1, Month(Min(cal_end_dates[Date])), Day(Min(cal_end_dates[Date])))
			var sply_end = date(Year(MAX(cal_end_dates[Date])) -1, Month(MAX(cal_end_dates[Date])), Day(MAX(cal_end_dates[Date])))
			
			var res = CALCULATE((ssr_history[meas.ssr_history_success_prob_avg_combined_prospecting_post_sales_support]), cal_end_dates[Date] >= sply_start &&  cal_end_dates[Date] <= sply_end)  
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 2e1dec62-4a99-460e-9b36-7c56d3e606ba

	measure 'meas.ssr_history_leads_gen_vi_vc' = ```
			
			var res = CALCULATE(sum(ssr_history[vi_value_created]), ssr_history[step_name] = "Lead Gen") 
			return res
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _lead_analysis
		lineageTag: 135977e1-081c-4d5e-b650-929c34bce57e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	/// _success_analysis
	measure 'meas.ssr_history_leads_probability_of_conversion' = ```
			
			var lead_gen_tbl = CALCULATETABLE(ssr_history,ssr_history[step_name] = "Lead Gen")  // all the applicable lead gen steps 
			
			var lead_gen_tbl_prosp_conv_prob = ADDCOLUMNS(
			    lead_gen_tbl, 
			    "prospecting_step_success_prob", AVERAGEX(
			            filter(
			                All(
			                    ssr_history
			                ), 
			            [step_name] = "Prospecting" && [_sys_ssr_id] =  EARLIER([_sys_ssr_id])
			        ),
			        [step_success_prob]
			    )
			)  
			
			// AVERAGEX(FIlter(filt_ranked, [acct_won_rank] >= EARLIER([acct_won_rank])), [acct_won_amount]) ) -- running total sorted by rank   
			--var prospecting_tbl = CALCULATETABLE ( ssr_history,ssr_history[step_name] = "Prospecting") 
			var res = AVERAGEX(lead_gen_tbl_prosp_conv_prob, [prospecting_step_success_prob]) // read the prospecting vale 
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 237758aa-3025-4731-8ff8-0b6a02ac0280

	measure 'meas.ssr_history_leads_touched' =
			
			var start_date = [meas.filter_date_min]
			var end_date =[meas.filter_date_max]
			var filt_ssr = CALCULATETABLE(ssr, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1)) // get rid of date context
			
			--var filt_ssr_hist = Filter(filt_ssr, ssr[_sys_doc_id] in SELECTColumn([_sys_ssr_id], inbound_leads)
			var test_tbl = filter(filt_ssr, ssr[trueai_first_touch] >=  start_date &&  ssr[trueai_first_touch] < end_date && ssr[trueai_leadsource_is_inbound]=true && ssr[col.trueai_time_to_touch_days] <21) // get the new date range
			var touch_cnt = COuntX(test_tbl, ssr[trueai_first_touch]   )
			var res = touch_cnt
			return res
		formatString: 0
		displayFolder: _lead_analysis
		lineageTag: 77ee3377-edf4-46bb-9c63-a4705d88e2bf

	measure 'meas.ssr_history_leads_touched_ratio' =
			
			
			var res = divide([meas.ssr_history_leads_w_first_touch] ,  [meas.ssr_history_leads_count])
			return res
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 08b11d5a-215e-408d-bbe2-2b620e31307a

	measure 'meas.ssr_history_leads_touched_avg_days' =
			
			var start_date = [meas.filter_date_min]
			var end_date =[meas.filter_date_max]
			var filt_ssr = CALCULATETABLE(ssr, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1)) // get rid of date context
			
			--var filt_ssr_hist = Filter(filt_ssr, ssr[_sys_doc_id] in SELECTColumn([_sys_ssr_id], inbound_leads)
			var test_tbl = filter(filt_ssr, ssr[trueai_first_touch] >=  start_date &&  ssr[trueai_first_touch] < end_date ) // get the new date range
			var avg_days = AVERAGEX(test_tbl, ssr[trueai_first_touch] -ssr[trueai_added_on]  )
			var res = avg_days
			RETURN
			res
		displayFolder: _lead_analysis
		lineageTag: 8afc9039-8ae4-4dbd-85ad-6b923d90360a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_is_open_pipeline' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			
			var res = CountX(filt_tbl, ssr_history[_sys_doc_id])
			
			return res
			
			```
		formatString: 0
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: b1408735-c46c-4347-9c31-95c7c08c2b5a

	measure 'meas.ssr_history_asof_open_pipeline_win_prob' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			var res = AVERAGEX(filt_tbl, ssr_history[step_success_prob])
			return res
			
			```
		formatString: 0%
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 8dffda52-ba9e-4f29-9bfd-fe337a5615ad

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_count' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			var res = COuntX(filt_tbl, ssr_history[_sys_doc_id]) -- do the actual operation
			
			return res
			
			```
		formatString: #,##0
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 77fbdffe-9696-448c-b340-331f1b00aec3

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_amt' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			
			var res = SUMX(filt_tbl, ssr_history[opp_booking_amt])
			
			return 
			res+0
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 10ba11d0-7424-40a9-8f87-3c8532da0acd

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_adj_amt' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			
			var res = SUMX(filt_tbl, ssr_history[opp_booking_amt] * ssr_history[step_success_prob] )
			
			return res
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 3e7a8222-2799-460d-8845-36a663d40bdb

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_age' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			
			var res = AVERAGEX(filt_tbl, ssr_history[step_length_in_days])
			
			return res
			
			```
		formatString: 0 " days";
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: b0360d0b-ed06-4957-91ca-b2917b8e4806

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_days_pushed' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			
			var res = AVERAGEX(filt_tbl, [col.days_pushed_pulled])
			
			return res
			
			```
		formatString: "+"0 " days";"-"0 " days";
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: f76d7526-63d0-41c4-9ec8-605decc0c0e6

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_count_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_asof_open_pipeline_count]  - [meas.ssr_history_asof_open_pipeline_count_sply], [meas.ssr_history_asof_open_pipeline_count_sply])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: cfedbbac-382e-4395-a90e-8a32847b2996

	measure 'meas.ssr_history_asof_open_pipeline_count_sply' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var temp_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var end_date  = DATE(Year(Temp_date) -1, MONTH(temp_date), DAY(temp_date)) -- shift one year older
			
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			var res = COuntX(filt_tbl, ssr_history[_sys_doc_id]) -- do the actual operation
			
			return res
			
			```
		formatString: #,##0
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 03028548-00c9-44e3-abd2-cf201868c034

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_amt_sply' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var temp_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var end_date  = DATE(Year(Temp_date) -1, MONTH(temp_date), DAY(temp_date)) -- shift one year older
			
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			
			var res = SUMX(filt_tbl, ssr_history[opp_booking_amt])
			
			return res
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 6f412172-41e9-400d-9804-efbbb2ecc1cc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_age_sply' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var temp_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var end_date  = DATE(Year(Temp_date) -1, MONTH(temp_date), DAY(temp_date)) -- shift one year older
			
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			
			var res = AVERAGEX(filt_tbl, ssr_history[step_length_in_days])
			
			return res
			
			```
		formatString: 0 " days";
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: a456146e-7f59-433e-a8a2-71a8c8c76944

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_adj_amt_sply' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var temp_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var end_date  = DATE(Year(Temp_date) -1, MONTH(temp_date), DAY(temp_date)) -- shift one year older
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			
			var res = SUMX(filt_tbl, ssr_history[opp_booking_amt] * ssr_history[step_success_prob] )
			
			return res
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 94babb38-218b-4e9f-abb1-b558b2083582

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_days_pushed_sply' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var temp_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var end_date  = DATE(Year(Temp_date) -1, MONTH(temp_date), DAY(temp_date)) -- shift one year older
			
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			
			var res = AVERAGEX(filt_tbl, [col.days_pushed_pulled])
			
			return res
			
			```
		formatString: "+"0 " days";"-"0 " days";
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: bf4ae9f6-2a61-4a5a-a1d8-af1f799f6827

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_win_prob_sply' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var temp_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var end_date  = DATE(Year(Temp_date) -1, MONTH(temp_date), DAY(temp_date)) -- shift one year older
			
			var all_dates_tbl = CALCULATETABLE(ssr_history, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}  && ssr_history[_sys_filt_end_date] >= end_date &&  ssr_history[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			var res = AVERAGEX(filt_tbl, ssr_history[step_success_prob])
			return res
			
			```
		formatString: 0%
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 2eb329a9-6295-4b8e-99e2-07599cc4c8fc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_asof_open_pipeline_win_prob_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_asof_open_pipeline_win_prob]  - [meas.ssr_history_asof_open_pipeline_win_prob_sply], [meas.ssr_history_asof_open_pipeline_win_prob_sply])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 156fe47a-7b82-4e46-81df-1c73051fddca

	measure 'meas.ssr_history_asof_open_pipeline_adj_amt_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_asof_open_pipeline_adj_amt]  - [meas.ssr_history_asof_open_pipeline_adj_amt_sply], [meas.ssr_history_asof_open_pipeline_adj_amt_sply])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 0c9f60d3-721a-47f3-b68d-6df412d7e41d

	measure 'meas.ssr_history_asof_open_pipeline_age_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_asof_open_pipeline_age]  - [meas.ssr_history_asof_open_pipeline_age_sply], [meas.ssr_history_asof_open_pipeline_age_sply])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 2ee3c1a8-4e31-421c-a0c0-0c4da1c0949c

	measure 'meas.ssr_history_asof_open_pipeline_amt_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_asof_open_pipeline_amt]  - [meas.ssr_history_asof_open_pipeline_amt_sply], [meas.ssr_history_asof_open_pipeline_amt_sply])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 5ec7238b-ad7b-4bc8-a10e-82ee6705e09e

	measure 'meas.ssr_history_asof_open_pipeline_days_pushed_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_asof_open_pipeline_days_pushed]  - [meas.ssr_history_asof_open_pipeline_days_pushed_sply], [meas.ssr_history_asof_open_pipeline_days_pushed_sply])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_open_pipeline
		lineageTag: 6438bfc6-f66f-4ef3-a8b4-75ff8b37b245

	measure 'meas.opps_asof_open_pipeline_count' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(opps, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,  opps[_sys_filt_end_date] >= end_date &&  opps[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			var res = COuntX(filt_tbl, opps[_sys_doc_id]) -- do the actual operation
			
			return res
			
			```
		formatString: 0
		displayFolder: _mgmt_rpt_open_opps
		lineageTag: 53bdd58e-765e-4eef-a190-03f93a1cad3e

	measure 'meas.ssr_history_won_amt' =
			
			var res = CALCULATE(
			    SUM(ssr_history[opp_won_amt])
			)
			
			RETURN
			res
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 9be6f782-209d-4cec-aa66-1362abfbff5e

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.ssr_history_booking_amt' = CALCULATE(SUM(ssr_history[opp_booking_amt]))
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _pipeline_analysis
		lineageTag: 92a3c741-d17a-4347-aaf0-288818678c26

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.ssr_history_pipeline_amt' = CALCULATE(SUM(ssr_history[opp_pipeline_amt]))
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _pipeline_analysis
		lineageTag: c90289f7-2d1f-4b90-87aa-bec736bee192

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_all_won_amt' = CALCULATE(SUM(ssr_history[opp_won_amt]), ssr_history[step_name] IN {"New Logo Selling", "Existing Customer Selling"} && ssr_history[step_success] = True)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: 50750b8f-83a6-40a2-807b-7b7548131ab7

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_all_won_deals' = CALCULATE(Count(ssr_history[_sys_doc_id]), ssr_history[step_name] IN {"New Logo Selling", "Existing Customer Selling"} && ssr_history[step_success] = True)
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: f6e886e6-762f-49cd-93b1-4a358b9acf56

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_last_year_won_amt' = CALCULATE([meas.exp_rpts_all_won_amt], time_intelligence[filt_item] = "LAST_YEAR")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: 32f70dd6-4526-47f0-ac34-7706d052ef01

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_all_closed_deals' = CALCULATE(Count(ssr_history[_sys_doc_id]), ssr_history[step_name] IN {"New Logo Selling", "Existing Customer Selling"} )
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: b100be7d-d67b-468d-847b-b914ce609621

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_all_expected_win_rate' = CALCULATE(AVERAGE(ssr_history[step_success_prob]), ssr_history[step_name] IN {"New Logo Selling", "Existing Customer Selling"} )
		formatString: 0%;-0%;0%
		displayFolder: _export_rpts
		lineageTag: 3d03ff4c-6242-429e-9415-aaf2c596a467

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_all_new_logo_won_amt' = CALCULATE(SUM(ssr_history[opp_won_amt]), ssr_history[step_name] IN {"New Logo Selling"} && ssr_history[step_success] = True)       // New Logo sum of won amt
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: 2b1aa109-0b9f-4a6a-8f2f-984579123fed

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_all_new_logo_won_deals' = CALCULATE(Count(ssr_history[_sys_doc_id]), ssr_history[step_name] IN {"New Logo Selling"} && ssr_history[step_success] = True)       // new logo won deals count
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 0854f468-8224-4f7a-9524-2791124a4dfd

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_all_pipeline_amt' = CALCULATE(SUM(ssr_history[opp_pipeline_amt]), ssr_history[step_name] IN {"Prospecting", "Post-Sales Support"} && ssr_history[step_success] = True)     // get the pipeline amt for prospecting and post-sales support
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: f94c30c4-f4d4-41f2-8d41-e3880af480f1

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_all_lead_gen' = CALCULATE(Count(ssr_history[_sys_doc_id]), ssr_history[step_name] IN {"Lead Gen"} && ssr_history[step_success] = True)     // count of lead gen
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 706e4ef5-4e2d-402a-aa7b-b663bfa6f45c

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_last_year_won_deals' = CALCULATE([meas.exp_rpts_all_won_deals], time_intelligence[filt_item] = "LAST_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 3708be56-e1f2-45d8-9c59-edcebf36d4b9

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_last_year_closed_deals' = CALCULATE([meas.exp_rpts_all_closed_deals], time_intelligence[filt_item] = "LAST_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 2f29e818-516d-44f2-9e1f-b9bcb80c7f48

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_last_year_expected_win_rate' = CALCULATE([meas.exp_rpts_all_expected_win_rate], time_intelligence[filt_item] = "LAST_YEAR")
		formatString: 0%;-0%;0%
		displayFolder: _export_rpts
		lineageTag: 613d8d10-5728-4b0f-9492-8b3ac66ee73d

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_last_year_new_logo_won_amt' = CALCULATE([meas.exp_rpts_all_new_logo_won_amt], time_intelligence[filt_item] = "LAST_YEAR")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: 1ccdb4cd-ce16-4371-9aa3-2d4f816d2a05

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_last_year_new_logo_won_deals' = CALCULATE([meas.exp_rpts_all_new_logo_won_deals], time_intelligence[filt_item] = "LAST_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 4434ebaa-6efa-45bb-9cdd-488a323c3f6d

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_last_year_pipeline_amt' = CALCULATE([meas.exp_rpts_all_pipeline_amt], time_intelligence[filt_item] = "LAST_YEAR")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: 40c8fe3c-592c-4e8e-bc39-42783ffb6ed6

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_last_year_lead_gen' = CALCULATE([meas.exp_rpts_all_lead_gen], time_intelligence[filt_item] = "LAST_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 35f4f5d5-057f-47a1-8d7c-d8a47934fb94

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_prior_to_last_year_won_deals' = CALCULATE([meas.exp_rpts_all_won_deals], time_intelligence[filt_item] = "PRIOR_TO_LAST_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 4f2aeb85-498e-4080-9cc7-409800357399

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_prior_to_last_year_closed_deals' = CALCULATE([meas.exp_rpts_all_closed_deals], time_intelligence[filt_item] = "PRIOR_TO_LAST_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 93be0ee4-9387-4d7d-8f98-610c7dc5d87a

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_prior_to_last_year_expected_win_rate' = CALCULATE([meas.exp_rpts_all_expected_win_rate], time_intelligence[filt_item] = "PRIOR_TO_LAST_YEAR")
		formatString: 0%;-0%;0%
		displayFolder: _export_rpts
		lineageTag: 52a64580-2b52-4fe2-8a13-d78c7138be3c

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_prior_to_last_year_new_logo_won_amt' = CALCULATE([meas.exp_rpts_all_new_logo_won_amt], time_intelligence[filt_item] = "PRIOR_TO_LAST_YEAR")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: e10ebb6a-1a1c-4a4d-a6b2-921514eae783

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_prior_to_last_year_new_logo_won_deals' = CALCULATE([meas.exp_rpts_all_new_logo_won_deals], time_intelligence[filt_item] = "PRIOR_TO_LAST_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 84fa3dd4-ba35-4cc6-a5a9-0af6d578a8f9

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_prior_to_last_year_pipeline_amt' = CALCULATE([meas.exp_rpts_all_pipeline_amt], time_intelligence[filt_item] = "PRIOR_TO_LAST_YEAR")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: f23c1481-3a5f-4a21-86f2-b9bb4af03635

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_prior_to_last_year_lead_gen' = CALCULATE([meas.exp_rpts_all_lead_gen], time_intelligence[filt_item] = "PRIOR_TO_LAST_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 0697d214-0480-4bb1-a5f2-7f0e25ae4798

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_prior_to_last_year_won_amt' = CALCULATE([meas.exp_rpts_all_won_amt], time_intelligence[filt_item] = "PRIOR_TO_LAST_YEAR")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: 52fbdd61-9df5-4a49-889f-9c6902ecd8ca

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_current_year_won_deals' = CALCULATE([meas.exp_rpts_all_won_deals], time_intelligence[filt_item] = "CURRENT_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 5e30d797-e5a5-44f2-9344-17ea864b2db1

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_current_year_closed_deals' = CALCULATE([meas.exp_rpts_all_closed_deals], time_intelligence[filt_item] = "CURRENT_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 68938634-1f61-4f81-97c5-73b8fa26cba5

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_current_year_expected_win_rate' = CALCULATE([meas.exp_rpts_all_expected_win_rate], time_intelligence[filt_item] = "CURRENT_YEAR")
		formatString: 0%;-0%;0%
		displayFolder: _export_rpts
		lineageTag: 20984fd1-7f88-40b2-a6e8-a81305f96746

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_current_year_new_logo_won_amt' = CALCULATE([meas.exp_rpts_all_new_logo_won_amt], time_intelligence[filt_item] = "CURRENT_YEAR")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: 03828b70-a8d5-4005-b733-0f85b7174fb5

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_current_year_new_logo_won_deals' = CALCULATE([meas.exp_rpts_all_new_logo_won_deals], time_intelligence[filt_item] = "CURRENT_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: 54a425a5-dadd-4645-8d25-c41fb1fbeb86

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_current_year_pipeline_amt' = CALCULATE([meas.exp_rpts_all_pipeline_amt], time_intelligence[filt_item] = "CURRENT_YEAR")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: e146e65e-c422-4da2-900d-a336d3c9a353

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_current_year_lead_gen' = CALCULATE([meas.exp_rpts_all_lead_gen], time_intelligence[filt_item] = "CURRENT_YEAR")
		formatString: #,##0
		displayFolder: _export_rpts
		lineageTag: edb3e3dc-a55c-492e-82eb-6f3c0298dfe3

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.exp_rpts_current_year_won_amt' = CALCULATE([meas.exp_rpts_all_won_amt], time_intelligence[filt_item] = "CURRENT_YEAR")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _export_rpts
		lineageTag: 0e7e50ad-cfa9-49ca-baf0-7e91f8c14f05

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.ssr_history_vi_value_created' = ```
			
			var val_created = CALCULATE(sum(ssr_history[vi_value_created]))
			var res = val_created
			return res 
			```
		formatString: $#,##0
		displayFolder: _vi_analysis
		lineageTag: 7ea0a643-b965-4564-98e1-990702eee8c7

		changedProperty = FormatString

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_pipeline_post_sales_amt' = CALCULATE(SUM(ssr_history[opp_pipeline_amt]), ssr_history[step_name] = "Post-Sales Support")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _pipeline_analysis
		lineageTag: 461e38b9-90f2-4475-81f1-fafcae841bde

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.ssr_history_pipeline_prospecting_amt' = CALCULATE(SUM(ssr_history[opp_pipeline_amt]), ssr_history[step_name] = "Prospecting")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _pipeline_analysis
		lineageTag: e5b37a35-4b11-4b2c-806a-c84de06f970b

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.ssr_history_pipeline_post_sales_renewals_amt' = CALCULATE(SUM(ssr_history[opp_pipeline_amt]), ssr_history[step_name] = "Post-Sales Support" && ssr_history[opp_sale_type] = "Renewal")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _pipeline_analysis
		lineageTag: 3a4f0f8f-8663-41b3-9a36-d767ce8560e5

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.ssr_history_pipeline_post_sales_expansion_sale_amt' = CALCULATE(SUM(ssr_history[opp_pipeline_amt]), ssr_history[step_name] = "Post-Sales Support" && ssr_history[opp_sale_type] = "Expansion Sale")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _pipeline_analysis
		lineageTag: c08641bd-9afd-41de-af3d-3d4189c62fc4

		annotation PBI_FormatHint = {"currencyCulture":""}

	measure 'meas.ssr_history_avg_won_amt' = ```
			CALCULATE(
			    AVERAGE(
			        ssr_history[opp_won_amt]
			    ), 
			    ssr_history[step_success] = True
			)
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: f27b957e-a77c-4cfd-af9d-0aeae573b453

	measure 'meas.ssr_history_avg_booking_amt' =
			//CALCULATE(AVERAGE(ssr_history[opp_booking_amt]))
			CALCULATE(
			    AVERAGE(
			        ssr_history[opp_booking_amt]
			    ),
			    ssr_history[step_name] in {"Existing Customer Selling", "New Logo Selling" },
			    ssr_history[step_success] = true
			)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 64ceec30-0380-4ac5-b98c-1b74b418b5ad

	measure 'meas.ssr_history_avg_won_new_logo_amt' = CALCULATE(AVeRAGE(ssr_history[opp_won_amt]), ssr_history[step_name] in {"New Logo Selling"} && ssr_history[step_success] = true)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 061ae59d-e0b7-4c1a-82a0-ab3503292fed

	measure 'meas.ssr_history_avg_won_existing_customer_selling_amt' = CALCULATE(AVeRAGE(ssr_history[opp_won_amt]), ssr_history[step_name] in {"Existing Customer Selling"} && ssr_history[step_success] = true)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 841e7554-5672-47ce-82f7-231f2f465cc6

	measure 'meas.ssr_history_lost_amt' = CALCULATE(AVeRAGE(ssr_history[opp_booking_amt]), ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} && ssr_history[step_success] = false)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 9ef348ad-aa72-411d-9c0e-8eef6d8a473d

	measure 'meas.ssr_history_table_row_count' =
			
			COUNTROWS(ssr_history)
		formatString: 0
		displayFolder: _opps_detail
		lineageTag: dc7e490b-52b1-4f80-9f71-b5180617d959

	measure 'OLD.meas.ssr_history_duration_hrs_per_step' =
			
			var steps =  CALCULATE(DISTINCTCOUNT(ssr_history[_sys_doc_id]))
			var res= divide([meas.ssr_history_duration_hrs], steps , blank())
			return res
		displayFolder: _activity_analysis
		lineageTag: c9c4e360-28ab-42d1-a28a-8cae208d53cf

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_stakeholders_most_common_first_act' = CALCULATE(MAX(ssr_history[stkhlds_all_first_act]))
		formatString: General Date
		displayFolder: _stakeholder_analysis
		lineageTag: 565752fc-5b9d-4ce9-8617-0b736a9e85fb

	measure 'meas.ssr_history_won_amt_new_logo' = CALCULATE(SUM(ssr_history[opp_won_amt]), ssr_history[step_name]="New Logo Selling")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: ce1ae8db-dff4-42eb-93f8-f415e2244252

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_won_amt_existing_customer_selling' = CALCULATE(SUM(ssr_history[opp_won_amt]), ssr_history[step_name]="Existing Customer Selling")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 938a4223-accc-457b-80df-c69c7bba8cb3

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_rev_avg_won_amt_new_logo' = CALCULATE(Average(ssr_history[opp_won_amt]), ssr_history[opp_won_amt] > 0 ,ssr_history[step_name]="New Logo Selling")
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 999b1c1a-1115-459a-b75c-b5260af3c37c

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_rev_avg_won_amt_existing_customer_selling' = CALCULATE(Average(ssr_history[opp_won_amt]), ssr_history[opp_won_amt] > 0 ,ssr_history[step_name]="Existing Customer Selling")
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _rev_analysis
		lineageTag: eb2870aa-01db-4a40-abae-a5327161ca28

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_adj_dur_conf' =
			
			VAR temp_tbl = CALCULATETABLE(ssr_history, ssr_history[step_name] in {"Prospecting", "New Logo Selling", "Post-Sales Support","Existing Customer Selling"}) // Get the current table context but exclude the unthcouded stagVAR res = AVERAGEX(
			VAR res = AVERAGEX(
			    temp_tbl,
			     SWITCH(
			        ssr_history[stkhlds_all_adj_dur_rule],
			        "133002", 0.4,  // 133002 is industry avg, not reliable
			        "133001", 0.7,   // 133001 is peer avg, okay
			        "133003", 0.97,   // 133003 is the best info from the owner
			        "133004", 0.86    // 133004 is good data but not from the primary owner
			    )
			)
			RETURN res  // Return the result
		displayFolder: _opps_detail
		lineageTag: db6706ac-f4f2-4238-b52a-3d87b0fe2183

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_active_list_reps_count' =
			
			
			var latest_date =  CALCULATE(max(cal_end_dates[Date])) // Getting the max date
			var res = CALCULATE(DISTINCTCOUNT(ssr_history[step_owner_id]), ssr_history[_sys_filt_end_date]=latest_date)   // get the total reps filtered latest date
			
			RETURN res
		formatString: 0
		displayFolder: active_list
		lineageTag: 27d669a1-18c6-4a0f-b32a-14dd256c9c17

	measure 'meas.ssr_history_active_tot_open_pipeline_amt' =
			
			var latest_date = CALCULATE(MAX(cal_end_dates[Date]))   // get the latest date from cal_end_date (period latest)
			var res = CALCULATE(SUM(ssr_history[opp_pipeline_amt]), ssr_history[step_success]=true, ssr_history[_sys_filt_end_date]=latest_date)    // calculating sum filtered with latest_date
			RETURN res
		formatString: 0
		displayFolder: active_list
		lineageTag: f4722bf5-190f-4a8c-afb9-581647444256

	measure 'meas.ssr_history_active_opps_count' = ```
			
			var latest_date = CALCULATE(MAX(cal_end_dates[Date])) // getting the latest date from cal_end_date table (period_max)
			var res = CALCULATE(count(users_history[_sys_doc_id]), users_history[_sys_is_active] = true  && users_history[_sys_filt_end_date]=latest_date)   // count of opp filtering with latest_date
			return res
			
			```
		formatString: 0
		displayFolder: active_list
		lineageTag: a7a673b7-8dde-42bf-873a-d0595e4d5352

	measure 'meas.ssr_history_active_user_booking_amt_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in{"Existing Customer Selling", "New Logo Selling"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_won_amt])
			
			return res
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: active_list
		lineageTag: 63902af5-2cda-4f56-8000-c777a53a4373

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_active_user_booking_amt_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Existing Customer Selling", "New Logo Selling"})
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_won_amt])
			
			return res
			
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: active_list
		lineageTag: 4c6b84a1-d8f6-45e7-af4d-00981c7b2d01

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_active_user_booking_amt_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Existing Customer Selling", "New Logo Selling"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_won_amt])
			
			return res
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: active_list
		lineageTag: 58a45363-ca17-4cdf-bbb1-8fe12ec55f43

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_active_deal_size' = ```
			
			var latest_date = CALCULATE(MAX(cal_end_dates[Date]))  //get the latest date from cal_end_date(period last date)
			var sum_amt = CALCULATE(SUM(ssr_history[opp_pipeline_amt]), ssr_history[_sys_filt_end_date]=latest_date)  // sum the opp_pipeline_amt
			var total_deals = [meas.ssr_history_active_opps_count]     // get the total deals
			var res = DIVIDE(sum_amt, total_deals)   // get the avg deals size
			RETURN res
			
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: active_list
		lineageTag: 31d26300-e8f3-4bb4-afc6-337e60de7dc9

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_active_avg_sales_cycle' = ```
			
			var latest_date = CALCULATE(MAX(cal_end_dates[Date]))   //  get the latest date from cal_end_date (period_latest)
			var res = CALCULATE(AVERAGE(ssr_history[step_length_in_days]), ssr_history[_sys_filt_end_date]=latest_date)       // get the avg days length
			return res
			
			```
		formatString: 0
		displayFolder: active_list
		lineageTag: 21923fe7-074a-44ee-af96-5b935f3a1682

	measure 'meas.ssr_history_active_open_pipe_amt' =
			
			var latest_date = CALCULATE(MAX(cal_end_dates[Date]))                  // get the latest date frm cal_end_dates (period_max)
			var res = CALCULATE(SUM(ssr_history[opp_pipeline_amt]), ssr_history[step_success]=true && ssr_history[_sys_filt_end_date]=latest_date)   // get the pipeline sum
			RETURN res
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: active_list
		lineageTag: b03f4e48-0665-4e26-9d0b-645bc040d2b3

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.active_list_owner_user_role_aliased' =
			
			var userdId = CALCULATE(MAX(ssr_history[step_owner_id])) // getting the userid current owner of the record
			var res = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]), users[_sys_doc_id]=userdId)  // getting the role
			RETURN res
		displayFolder: active_list
		lineageTag: 1b9f1cc1-0d93-484c-aee6-43d84902a246

	measure 'meas.ssr_history_active_user_full_name_role_group' = ```
			
			var full_name = CALCULATE(MAX(users[col.full_name]))   // getting the full name 
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			RETURN
			full_name & ",  " & user_role_aliased & ",  " & user_group
			```
		displayFolder: active_list
		lineageTag: f5dd494a-1b49-4eb9-a3d2-c5f48eefb5c6

	measure 'meas.user_history_active_hire_date' = ```
			
			var step_owner_id = CALCULATE(MAX(ssr_history[step_owner_id]))     // get the step owner id 
			var res = CALCULATE(MAX(users_history[trueai_hire_date]), users_history[_sys_user_id] = step_owner_id)
			RETURN res
			```
		formatString: mm/dd/yyyy
		displayFolder: active_list
		lineageTag: 414e49fc-78ce-4e1a-b5f0-7e04a60538d8

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_active_deals_count' = CALCULATE(COUNT(ssr_history[_sys_doc_id]))
		formatString: 0
		displayFolder: active_list
		lineageTag: f0d9b2ce-8bfd-4372-b871-fce1e339d852

	measure 'meas.manager_direct_active_mgr_full_name' =
			
			var first_name = CALCULATE(MAX(managers_direct[crm_first_name]))    // get the first name from manager_total table
			var last_name = CALCULATE(MAX(managers_direct[crm_last_name]))       // get the last name from manager_total table
			RETURN
			
			first_name & " " & last_name
		displayFolder: active_list
		lineageTag: 6b66ee8d-d54b-4b14-83c6-4f5de8d767ab

	measure 'meas.ssr_history_active_user_pipeline_amt_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"})
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt])
			
			return res
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: active_list
		lineageTag: dd7b34a9-1f0a-4429-a02d-2655005bc99b

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_active_user_pipeline_amt_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in{"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt])
			
			return res
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: active_list
		lineageTag: 939c6e5b-47c5-43b7-bfe5-d36adbfd226f

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_active_user_pipeline_amt_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt])
			
			return res
			
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: active_list
		lineageTag: 79d4dc90-88a1-4a22-909b-f571beb4b122

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.peer_booking_amt_mtd' = ```
			
			var user_role = [meas.step_owner_user_role_aliased]
			var user_group = [meas.step_owner_group]
			var res = CALCULATE(
			    AVERAGEX(
			        FILTER(
			            ssr_history,
			            ssr_history[step_owner_user_role]=user_role && ssr_history[col.step_owner_group]=user_group && ssr_history[step_success] = true && ssr_history[step_name] in{"Existing Customer Selling", "New Logo Selling"}
			        )
			        , ssr_history[opp_booking_amt]), 
			    ALL())
			
			return res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: active_list
		lineageTag: d3268ec6-e079-45d1-8c53-9f06934f917c

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_user_peers_avg_booking_amt_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			
			var reps = CALCULATE(
			    COUNTROWS(DISTINCT(SELECTCOLUMNS(FILTER(
			        users,
			        users[trueai_user_role]=user_role_aliased &&
			        users[trueai_group]=user_group
			    ),
			    [_sys_doc_id]))),
			   ALL()
			)
			var book_amt = CALCULATE(
			    SUMX(
			        FILTER(
			            ssr_history,
			            ssr_history[_sys_filt_end_date] >=  start_date_mtd &&  ssr_history[_sys_filt_end_date] <= end_date && 
			            ssr_history[step_success] = true && ssr_history[step_name] in{"Existing Customer Selling", "New Logo Selling"} &&
			            ssr_history[step_owner_user_role]=user_role_aliased && ssr_history[col.step_owner_group]=user_group
			        ),
			        ssr_history[opp_booking_amt]
			    ),
			    ALL()
			)
			var res = DIVIDE(
			    book_amt,
			    reps
			)
			
			return res
			
			```
		formatString: \$#,0.00;(\$#,0.00);\$#,0.00
		displayFolder: active_list
		lineageTag: 80b998a6-d323-485a-97df-a073dbe29410

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_user_peers_avg_booking_amt_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			
			var reps = CALCULATE(
			    COUNTROWS(DISTINCT(SELECTCOLUMNS(FILTER(
			        users,
			        users[trueai_user_role]=user_role_aliased &&
			        users[trueai_group]=user_group
			    ),
			    [_sys_doc_id]))),
			   ALL()
			)
			var book_amt = CALCULATE(
			    SUMX(
			        FILTER(
			            ssr_history,
			            ssr_history[_sys_filt_end_date] >=  start_date_qtd &&  ssr_history[_sys_filt_end_date] <= end_date && 
			            ssr_history[step_success] = true && ssr_history[step_name] in{"Existing Customer Selling", "New Logo Selling"} &&
			            ssr_history[step_owner_user_role]=user_role_aliased && ssr_history[col.step_owner_group]=user_group
			        ),
			        ssr_history[opp_booking_amt]
			    ),
			    ALL()
			)
			var res = DIVIDE(
			    book_amt,
			    reps
			)
			
			return res
			
			```
		formatString: \$#,0.00;(\$#,0.00);\$#,0.00
		displayFolder: active_list
		lineageTag: 9c76fa6e-7151-460c-aabd-6ee179293803

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_user_peers_avg_booking_amt_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			
			var reps = CALCULATE(
			    COUNTROWS(DISTINCT(SELECTCOLUMNS(FILTER(
			        users,
			        users[trueai_user_role]=user_role_aliased &&
			        users[trueai_group]=user_group
			    ),
			    [_sys_doc_id]))),
			   ALL()
			)
			var book_amt = CALCULATE(
			    SUMX(
			        FILTER(
			            ssr_history,
			            ssr_history[_sys_filt_end_date] >=  start_date_ytd &&  ssr_history[_sys_filt_end_date] <= end_date && 
			            ssr_history[step_success] = true && ssr_history[step_name] in{"Existing Customer Selling", "New Logo Selling"} &&
			            ssr_history[step_owner_user_role]=user_role_aliased && ssr_history[col.step_owner_group]=user_group
			        ),
			        ssr_history[opp_booking_amt]
			    ),
			    ALL()
			)
			var res = DIVIDE(
			    book_amt,
			    reps
			)
			
			return res
			```
		formatString: \$#,0.00;(\$#,0.00);\$#,0.00
		displayFolder: active_list
		lineageTag: f07b580d-c943-4db3-89b1-099045349b3f

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_user_peers_avg_pipeline_amt_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			
			var reps = CALCULATE(
			    COUNTROWS(DISTINCT(SELECTCOLUMNS(FILTER(
			        users,
			        users[trueai_user_role]=user_role_aliased &&
			        users[trueai_group]=user_group
			    ),
			    [_sys_doc_id]))),
			   ALL()
			)
			var pipeline_amt = CALCULATE(
			    SUMX(
			        FILTER(
			            ssr_history,
			            ssr_history[_sys_filt_end_date] >=  start_date_mtd &&  ssr_history[_sys_filt_end_date] <= end_date && 
			            ssr_history[step_success] = true && ssr_history[step_name] in{"Prospecting", "Post-Sales Support"} &&
			            ssr_history[step_owner_user_role]=user_role_aliased && ssr_history[col.step_owner_group]=user_group
			        ),
			        ssr_history[opp_pipeline_amt]
			    ),
			    ALL()
			)
			var res = DIVIDE(
			    pipeline_amt,
			    reps
			)
			
			return res
			```
		formatString: \$#,0.00;(\$#,0.00);\$#,0.00
		displayFolder: active_list
		lineageTag: c575af43-6deb-4fe9-bba8-4cc43155c4cc

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_user_peers_avg_pipeline_amt_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			
			var reps = CALCULATE(
			    COUNTROWS(DISTINCT(SELECTCOLUMNS(FILTER(
			        users,
			        users[trueai_user_role]=user_role_aliased &&
			        users[trueai_group]=user_group
			    ),
			    [_sys_doc_id]))),
			   ALL()
			)
			var pipeline_amt = CALCULATE(
			    SUMX(
			        FILTER(
			            ssr_history,
			            ssr_history[_sys_filt_end_date] >=  start_date_qtd &&  ssr_history[_sys_filt_end_date] <= end_date && 
			            ssr_history[step_success] = true && ssr_history[step_name] in{"Prospecting", "Post-Sales Support"} &&
			            ssr_history[step_owner_user_role]=user_role_aliased && ssr_history[col.step_owner_group]=user_group
			        ),
			        ssr_history[opp_pipeline_amt]
			    ),
			    ALL()
			)
			var res = DIVIDE(
			    pipeline_amt,
			    reps
			)
			
			return res
			```
		formatString: \$#,0.00;(\$#,0.00);\$#,0.00
		displayFolder: active_list
		lineageTag: 4216379f-b3ad-4ec1-89cc-b7aa26f29764

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_user_peers_avg_pipeline_amt_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			
			var reps = CALCULATE(
			    COUNTROWS(DISTINCT(SELECTCOLUMNS(FILTER(
			        users,
			        users[trueai_user_role]=user_role_aliased &&
			        users[trueai_group]=user_group
			    ),
			    [_sys_doc_id]))),
			   ALL()
			)
			var pipeline_amt = CALCULATE(
			    SUMX(
			        FILTER(
			            ssr_history,
			            ssr_history[_sys_filt_end_date] >=  start_date_ytd &&  ssr_history[_sys_filt_end_date] <= end_date && 
			            ssr_history[step_success] = true && ssr_history[step_name] in{"Prospecting", "Post-Sales Support"} &&
			            ssr_history[step_owner_user_role]=user_role_aliased && ssr_history[col.step_owner_group]=user_group
			        ),
			        ssr_history[opp_pipeline_amt]
			    ),
			    ALL()
			)
			var res = DIVIDE(
			    pipeline_amt,
			    reps
			)
			
			return res
			```
		formatString: \$#,0.00;(\$#,0.00);\$#,0.00
		displayFolder: active_list
		lineageTag: 3435aa8f-337a-4a6f-98e8-a7283543b060

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.users_full_name' = CALCULATE(MAX(users[col.full_name]))
		displayFolder: active_list
		lineageTag: 7ce8b6cd-e3e4-412b-b838-12869981ecfd

	measure 'meas.ssr_history_duration_hrs_rep_day' =
			
			var reps = ssr_history[meas.ssr_history_reps]
			var days = CALCULATE(MAX(users_history[_sys_filt_end_date])) - CALCULATE(MIN(users_history[_sys_filt_end_date]))    //get the days
			var dur = ssr_history[meas.ssr_history_duration_hrs]  // dur in hrs
			var denom = reps * days
			var res = divide(dur,denom, blank())        // ratio
			return res
		displayFolder: _activity_analysis
		lineageTag: d459c6d4-c663-40db-a361-20d3c81c621d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_success_count_new_logo_pros' =
			
			var new_logo_lead = [meas.ssr_history_success_count_new_logo]
			var prospect_lead = [meas.ssr_history_success_count_prospecting]
			var res = new_logo_lead + prospect_lead
			RETURN
			res
		formatString: 0
		displayFolder: _success_analysis
		lineageTag: 528ca789-f654-4c73-9419-84612436a9a6

	measure 'meas.ssr_history_step_count_prospecting' = ```
			
			var res = CALCULATE(
			    count(ssr_history[_sys_doc_id]),
			    ssr_history[step_name] = "Prospecting"
			    )
			return res
			
			```
		formatString: 0
		displayFolder: _success_analysis
		lineageTag: 814944be-5892-4bcf-aa68-23a2f085fba6

	measure 'meas.ssr_history_ssr_id_count' =
			CALCULATE(
			    COUNT(
			        ssr_history[_sys_ssr_id]
			    )
			)
		formatString: #,0
		displayFolder: _success_analysis
		lineageTag: b17b0224-6e9f-4970-a4ca-717a5429f2c2

	measure 'meas.ssr_history_leads_avg_mkt_sales_probability_of_conversion' =
			
			var res = CALCULATE(
			    [meas.ssr_history_leads_probability_of_conversion],
			    users_history[trueai_user_role_dept] in {"MKT","SALES"}
			)
			
			
			RETURN
			res
		displayFolder: _lead_analysis
		lineageTag: 579e11d7-7152-4f03-b817-2015ffd56a2b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_unique_reps_count' =
			
			
			var rep_tbl = SUMMARIZE(ssr_history, ssr_history[step_owner_id], "step_count", DISTINCTCOUNT(ssr_history[_sys_doc_id]))
			var res = countrows(rep_tbl)
			
			// VAR res = CALCULATE(
			//     DISTINCTCOUNT(
			//         ssr_history[step_owner_id]
			//     )
			// )
			
			return res
		formatString: 0
		displayFolder: _rep_analysis
		lineageTag: 2ff04fca-801e-4005-929f-9f8af7419725

	measure 'meas.ssr_history_unique_reps_avg_count' =
			
			CALCULATE(
			    AVERAGEX(
			        cal_end_dates,
			        [meas.ssr_history_unique_reps_count]
			    )
			)
		formatString: 0
		displayFolder: _rep_analysis
		lineageTag: 6639d8ce-262d-4e28-a860-098b5867e003

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_reps_count' =
			
			CALCULATE(
			    COUNT(
			        ssr_history[step_owner_id]
			    )
			)
		formatString: 0
		displayFolder: _rep_analysis
		lineageTag: f7e039ba-ace4-4063-be16-78b850cf9a6e

	measure 'meas.ssr_history_duration_hrs_per_acct_post_sales_existing_customer_selling' =
			
			var post_sales_dur = [meas.ssr_history_duration_hrs_per_acct_post_sales]    // post-sales support dur
			var existing_dur = [meas.ssr_history_duration_hrs_per_acct_existing_customer_selling]      // get the existing custimer selling dur
			
			var res = post_sales_dur + existing_dur
			RETURN
			res
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: a6f23b9a-4c2b-4c30-8a39-c8ece64ec6d3

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_per_acct_prospect_new_logo' =
			
			var prospect_dur = [meas.ssr_history_duration_hrs_per_acct_prospecting]   // prospect dur
			var newlogo_dur = [meas.ssr_history_duration_hrs_per_acct_new_logo]       // new logo dur
			
			var res = prospect_dur + newlogo_dur
			RETURN
			res
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 238e1d2a-76a8-45b0-a69d-a16c4aef9afe

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.users_spent_avg_dur_hr_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(users_history , cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date)
			
			
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        dates_tbl,
			        users_history[ci_time_alloc_tot]
			    )
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 8339cdab-219b-41a2-ac15-80d4e83d2dd7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_spent_avg_eng_dur_hr_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(users_history , cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date)
			
			
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        dates_tbl,
			        users_history[ci_time_alloc_tot_eng]
			    )
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 2664dc8a-bd4a-43f4-9fb9-0f0d47e573ad

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_spent_weekly_avg_non_eng_dur_hr_mtd' =
			
			var _tot_dur = [meas.users_spent_avg_dur_hr_mtd]
			var _eng_dur = [meas.users_spent_avg_eng_dur_hr_mtd]
			var res = _tot_dur-_eng_dur
			RETURN
			res
		displayFolder: active_list
		lineageTag: b60d4bed-cde2-4ecf-9178-dacf902318b1

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_dur_hr_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 92710018-ef11-4ba1-83be-ed1d1a6c562a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_eng_dur_hr_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot_eng]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 2955de6f-091b-4708-be9a-037d0819976d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_dur_hr_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 7a0d79b9-9cab-49ea-a5a5-da5ffee13916

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_eng_dur_hr_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot_eng]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 6c1e2271-ab34-4e62-9428-d907224c3908

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_dur_hr_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 9d34a8f0-d693-4ea8-9da0-07e52299798b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_eng_dur_hr_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot_eng]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: fe7d98aa-9edf-4ac2-94fe-db3d70bfc505

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_non_eng_dur_hr_mtd' =
			
			
			VAR _tot_dur = [meas.users_weekly_avg_dur_hr_mtd]
			VAR _eng_dur = [meas.users_weekly_avg_eng_dur_hr_mtd]
			
			VAR res = _tot_dur-_eng_dur
			
			RETURN
			res
		displayFolder: active_list
		lineageTag: f0d36d3a-6d75-4f8f-808d-a09f47e4e4f3

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_non_eng_dur_hr_qtd' =
			
			
			VAR _tot_dur = [meas.users_weekly_avg_dur_hr_qtd]
			VAR _eng_dur = [meas.users_weekly_avg_eng_dur_hr_qtd]
			
			VAR res = _tot_dur-_eng_dur
			
			RETURN
			res
		displayFolder: active_list
		lineageTag: 7573df13-51af-403d-9678-86ae2a52098e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_non_eng_dur_hr_ytd' =
			
			
			VAR _tot_dur = [meas.users_weekly_avg_dur_hr_ytd]
			VAR _eng_dur = [meas.users_weekly_avg_eng_dur_hr_ytd]
			
			VAR res = _tot_dur-_eng_dur
			
			RETURN
			res
		displayFolder: active_list
		lineageTag: 0196bc45-8765-4174-a00c-d696cbee13d2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_avg_eng_rate_mtd' =
			
			
			VAR _tot_dur = [meas.users_weekly_avg_dur_hr_mtd]
			VAR _eng_dur = [meas.users_weekly_avg_eng_dur_hr_mtd]
			
			VAR res = DIVIDE(_eng_dur, _tot_dur,0)
			
			RETURN
			IF(
			    res = BLANK(),
			    0,
			    res
			)
		formatString: 0%;-0%;0%
		displayFolder: active_list
		lineageTag: 89d0f795-c17c-46f3-94ce-cbae7b0574cc

	measure 'meas.users_weekly_avg_eng_rate_qtd' =
			
			
			VAR _tot_dur = [meas.users_weekly_avg_dur_hr_qtd]
			VAR _eng_dur = [meas.users_weekly_avg_eng_dur_hr_qtd]
			
			VAR res = DIVIDE(_eng_dur, _tot_dur,0)
			
			RETURN
			IF(
			    res = BLANK(),
			    0,
			    res
			)
		formatString: 0%;-0%;0%
		displayFolder: active_list
		lineageTag: 85c2e664-6b49-4019-8158-e4069342910e

	measure 'meas.users_weekly_avg_eng_rate_ytd' =
			
			
			VAR _tot_dur = [meas.users_weekly_avg_dur_hr_ytd]
			VAR _eng_dur = [meas.users_weekly_avg_eng_dur_hr_ytd]
			
			VAR res = DIVIDE(_eng_dur, _tot_dur,0)
			
			RETURN
			IF(
			    res = BLANK(),
			    0,
			    res
			)
		formatString: 0%;-0%;0%
		displayFolder: active_list
		lineageTag: 4db926fd-a1ea-45d3-8e0e-5b1745a47f24

	measure 'meas.users_weekly_peers_avg_eng_rate_mtd' = ```
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			
			var _tot_dur = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd && users_history[_sys_filt_start_date] <=end_date,
			    users_history[col.trueai_user_role_coid_aliased]=user_role_aliased && users_history[trueai_group]=user_group,
			    ALL()
			)
			
			var _eng_dur = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot_eng]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd && users_history[_sys_filt_start_date] <=end_date,
			    users_history[col.trueai_user_role_coid_aliased]=user_role_aliased && users_history[trueai_group]=user_group,
			    ALL()
			)
			var res = DIVIDE(_eng_dur, _tot_dur,0)
			
			RETURN
			IF(res=BLANK(), 0, res)
			```
		formatString: 0%;-0%;0%
		displayFolder: active_list
		lineageTag: f8b4fe4d-7036-480f-9a44-9990484ccd63

	measure 'meas.users_weekly_peers_avg_eng_rate_qtd' = ```
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			
			var _tot_dur = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd && users_history[_sys_filt_start_date] <=end_date,
			    users_history[col.trueai_user_role_coid_aliased]=user_role_aliased && users_history[trueai_group]=user_group,
			    ALL()
			)
			
			var _eng_dur = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot_eng]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd && users_history[_sys_filt_start_date] <=end_date,
			    users_history[col.trueai_user_role_coid_aliased]=user_role_aliased && users_history[trueai_group]=user_group,
			    ALL()
			)
			var res = DIVIDE(_eng_dur, _tot_dur,0)
			
			RETURN
			IF(res=BLANK(), 0, res)
			```
		formatString: 0%;-0%;0%
		displayFolder: active_list
		lineageTag: 60f6356b-eb5c-4bab-9f45-e4ef7ba3c3b3

	measure 'meas.users_weekly_peers_avg_eng_rate_ytd' = ```
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var user_role_aliased = CALCULATE(MAX(users[col.trueai_user_role_coid_aliased]))      // get the user role aliased
			var user_group = CALCULATE(MAX(users[trueai_group])) // get the step_owner_user group
			
			var _tot_dur = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd && users_history[_sys_filt_start_date] <=end_date,
			    users_history[col.trueai_user_role_coid_aliased]=user_role_aliased && users_history[trueai_group]=user_group,
			    ALL()
			)
			
			var _eng_dur = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_tot_eng]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd && users_history[_sys_filt_start_date] <=end_date,
			    users_history[col.trueai_user_role_coid_aliased]=user_role_aliased && users_history[trueai_group]=user_group,
			    ALL()
			)
			var res = DIVIDE(_eng_dur, _tot_dur,0)
			
			RETURN
			IF(res=BLANK(), 0, res)
			```
		formatString: 0%;-0%;0%
		displayFolder: active_list
		lineageTag: d9c928d6-4fa0-4e39-bb41-e876fc973b19

	measure 'meas.users_weekly_new_logo_avg_dur_hr_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_new_logo]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 6b1f3059-719c-453e-93c5-beebb9a37958

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_prospecting_avg_dur_hr_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_prospecting]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 175c4dd7-6a3a-4257-a0b5-a68ba2ed8904

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_existing_customer_selling_avg_dur_hr_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_existing_customer_selling]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 998ed3d7-7020-436f-9243-f1053bb8b53c

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_post_sales_avg_dur_hr_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_post_sales]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 23e8ca18-37aa-4c3a-ae0d-9f77cf6af57d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_internal_avg_dur_hr_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_internal]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: e461466a-f927-4126-952d-4acb82a1aa30

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_new_logo_avg_dur_hr_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_new_logo]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 9e2cd7ec-604b-4ca6-a705-56bc3c0f95c7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_prospecting_avg_dur_hr_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_prospecting]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 4fc4623b-4b5f-43e8-8479-e3f05b8ed753

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_post_sales_avg_dur_hr_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_post_sales]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 949b14af-7224-4c50-b401-6235fbfd8fa4

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_existing_customer_selling_avg_dur_hr_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_existing_customer_selling]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: ef0ac80a-cdca-4e0b-bd31-3d9b1c6bdbec

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_internal_avg_dur_hr_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_internal]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 3de2b69f-ee1b-448d-877b-aa4c685d8a7a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_new_logo_avg_dur_hr_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_new_logo]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: d7a82da6-c0b4-4762-b709-b8b04626bd85

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_prospecting_avg_dur_hr_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_prospecting]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: de92c6db-5750-4d82-8655-0fda6befffe7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_post_sales_avg_dur_hr_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_post_sales]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: a00e5674-4777-42d7-96f5-3cee0b45d13d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_existing_customer_selling_avg_dur_hr_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_existing_customer_selling]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 84ee7b61-e9e1-4757-8286-27e9eb9ea643

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_internal_avg_dur_hr_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_internal]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: aa64ffeb-7ab4-4918-9f66-b41b9e1ffba4

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_internal_avg_dur_hr_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var end_date_mtd_qtd_sply = date(start_year -1, start_month, DAY(curr_date))
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			var end_date_mtd_mtd_sply = date(start_year -1, start_month, DAY(curr_date))
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_internal]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 07d5cd8d-6a5f-44a0-a3a0-67abf0e71a67

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_new_logo_avg_dur_hr_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_new_logo]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 6ef4e207-9872-42f0-9ba4-d808d77c1d96

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_prospecting_avg_dur_hr_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_prospecting]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 38a4d689-320c-4a1c-a542-0ba0559515af

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_post_sales_avg_dur_hr_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_post_sales]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 1b143a17-8538-40b3-a775-2015a6a0082c

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_existing_customer_selling_avg_dur_hr_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_existing_customer_selling]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_mtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: eb3c8ed4-cc35-48e9-bd2f-b7a14627b6fb

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_internal_avg_dur_hr_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_internal]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 54a233ca-80e9-4f68-b575-ee73c8def2fb

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_new_logo_avg_dur_hr_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_new_logo]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 91b7bb09-bf10-4dec-a36a-dcc2fd6c5fb4

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_prospecting_avg_dur_hr_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_prospecting]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 344ce72c-69b2-422d-b528-0a6ac96bd462

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_post_sales_avg_dur_hr_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_post_sales]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 099b7689-8d8b-48aa-a454-2004e0944f0f

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_existing_customer_selling_avg_dur_hr_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_existing_customer_selling]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_qtd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 5d9d31cd-8f99-4634-b1aa-c7a4fe34b81e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_internal_avg_dur_hr_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_internal]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 87352cd2-f16c-4cad-ae81-44d0fe4d224a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_new_logo_avg_dur_hr_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_new_logo]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 1e115d3c-5d41-4324-88e5-df61070e9c91

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_prospecting_avg_dur_hr_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_prospecting]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 005701b7-6202-4954-8ad4-e13650ab63a5

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_post_sales_avg_dur_hr_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_post_sales]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 904f7aa8-5b2e-4abe-b65f-c27848ca72a9

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.users_weekly_existing_customer_selling_avg_dur_hr_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1) 
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    AVERAGEX(
			        users_history,
			        users_history[ci_time_alloc_existing_customer_selling]
			    ),
			    users_history[_sys_filt_start_date] >=start_date_ytd_sply && users_history[_sys_filt_start_date] <=end_date
			)
			RETURN
			res
			```
		displayFolder: active_list
		lineageTag: 96a7ba24-1ebb-42e6-8701-6a96df1dd3da

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_leads_updated' = ```
			
			
			var lead_gen_tbl = CALCULATETABLE(ssr_history,ssr_history[step_name] = "Lead Gen")  // all the applicable lead gen steps 
			
			var lead_gen_tbl_prosp_conv_prob = ADDCOLUMNS(
			    lead_gen_tbl, 
			    "prospecting_step_success_prob", AVERAGEX(
			            filter(
			                All(
			                    ssr_history
			                ), 
			            [step_name] = "Prospecting" && [_sys_ssr_id] =  EARLIER([_sys_ssr_id])
			        ),
			        [step_success_prob]
			    )
			)  
			
			// AVERAGEX(FIlter(filt_ranked, [acct_won_rank] >= EARLIER([acct_won_rank])), [acct_won_amount]) ) -- running total sorted by rank   
			--var prospecting_tbl = CALCULATETABLE ( ssr_history,ssr_history[step_name] = "Prospecting") 
			var res = AVERAGEX(lead_gen_tbl_prosp_conv_prob, [prospecting_step_success_prob]) // read the prospecting vale 
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 945ef526-000a-41e3-a8fd-a0075b8e49f7

	measure 'meas.ssr_history_mkt_leads_probability_of_conversion' =
			
			VAR _mkt_count = CALCULATE(
			    [meas.ssr_history_leads],
			    users_history[trueai_user_role_dept]="MKT"
			)
			
			VAR _total_count  = [meas.ssr_history_leads]
			
			VAR _pct = DIVIDE(_mkt_count, _total_count, 0)
			
			VAR _mkt_poc = CALCULATE(
			    [meas.ssr_history_leads_probability_of_conversion],
			    users_history[trueai_user_role_dept]="MKT"
			)
			
			RETURN
			IF(
			    _pct = BLANK(),
			    BLANK(),
			    IF(
			        _pct<= 0.03 && _pct >=0,
			        "N/A",
			        FORMAT(_mkt_poc, "#0%")
			    )
			)
		displayFolder: _lead_analysis
		lineageTag: 350624f7-0478-4550-800c-02e07055a982

	measure 'meas.ssr_history_sales_leads_probability_of_conversion' =
			
			VAR _mkt_count = CALCULATE(
			    [meas.ssr_history_leads],
			    users_history[trueai_user_role_dept]="SALES"
			)
			
			VAR _total_count  = [meas.ssr_history_leads]
			
			VAR _pct = DIVIDE(_mkt_count, _total_count, 0)
			
			VAR _mkt_poc = CALCULATE(
			    [meas.ssr_history_leads_probability_of_conversion],
			    users_history[trueai_user_role_dept]="SALES"
			)
			
			RETURN
			IF(
			    _pct = BLANK(),
			    BLANK(),
			    IF(
			        _pct<= 0.03 && _pct >=0,
			        "N/A",
			        FORMAT(_mkt_poc, "#0%")
			    )
			)
		displayFolder: _lead_analysis
		lineageTag: 2ee6541e-7e57-476a-a032-4160088c398d

	measure 'meas.ssr_history_duration_hrs_new_logo_sales_process_step' = ```
			
			var dur = calculate(
			    sum(
			        ssr_history[stkhlds_all_adj_dur]
			    ), 
			    KEEPFILTERS(
			        ssr_history[step_name] = "New Logo Selling"
			    )
			) / 3600 // turn to hours
			var res  = dur
			return res
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: b87c62e3-8d3f-4ec4-a8f8-b45f588ea9a7

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_prospecting_sales_process_step' = ```
			
			var dur = calculate(
			    sum(
			        ssr_history[stkhlds_all_adj_dur]
			    ), 
			    KEEPFILTERS(
			        ssr_history[step_name] = "Prospecting"
			    )
			) / 3600 // turn to hours
			var res  = dur
			return res
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 56d914c8-1356-4e5e-84fd-4a60fd2ce515

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_post_sales_sales_process_step' = ```
			
			var dur = calculate(
			    sum(
			        ssr_history[stkhlds_all_adj_dur]
			    ), 
			    KEEPFILTERS(
			        ssr_history[step_name] = "Post-Sales Support" 
			    )
			) / 3600       // turn to hours
			var res  = round(dur / 10, 0) * 10 // make it ten hour increments
			return res
			
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 8ae2c3a1-521b-4861-92da-86d04f394c87

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_existing_customer_selling_sales_process_step' = ```
			
			var dur = calculate(
			    sum(
			        ssr_history[stkhlds_all_adj_dur]
			    ), 
			    KEEPFILTERS(
			        ssr_history[step_name] = "Existing Customer Selling" 
			    )
			) / 3600 // turn to hours
			var res  = dur
			return res
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: b2ef2938-3680-412b-8478-920cf57ca4aa

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_leads_probability_of_conversion_w_thresh' = ```
			
			VAR _proba = [meas.ssr_history_leads_probability_of_conversion]
			//this measure helps you filter out small segments of a result so they don't "pollute" the result. Use this is a filter measure and make the condition "greater than 0"
			// first get the current count but remove the groupiing filter context 
			var all_current_val =  CALCULATE(count(ssr_history[_sys_ssr_id]), ssr_history[_sys_ssr_id] <> "abc") // abc is a value that will never exist in the db
			// get the regular count in the current filter context
			var count_current_val = CALCULATE(distinctcount(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Lead Gen") 
			// see the ration of this value
			var ratio = DIVIDE(count_current_val, all_current_val)
			// set the threshold - in htis case 10%
			var thresh = 0.03
			// determine if the ratio is over the threshhold and resturn o
			var res  = IF(ratio >= thresh, _proba)
			return res
			```
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: _lead_analysis
		lineageTag: d8113038-a6ce-4505-9139-59956793fea5

	measure 'meas.ssr_history_accts_per_rep_new_logo_prospecting' =
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]),ssr_history[step_name] in {"Prospecting", "New Logo Selling"})
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] in {"Prospecting", "New Logo Selling"})
			var ratio = divide (accounts, reps,BLANK())
			var res = if (ratio > 100, round(ratio / 10, 0) * 10  , round(ratio, 0) ) // clean up a little
			return res
		formatString: 0":1"
		displayFolder: _acct_analysis
		lineageTag: 723c7a5a-4472-405e-b795-f6ef8ceb3ced

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_accts_per_rep_post_sales_existing_customer_selling' =
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]),ssr_history[step_name] in  {"Post-Sales Support", "Existing Customer Selling"})        // get the post-sales support and existing customer selling account counts
			var reps = calculate(DISTINCTCOUNT(ssr_history[step_owner_id]),ssr_history[step_name] in {"Post-Sales Support", "Existing Customer Selling"}) // get the post-sales support and existing customer selling reps
			var ratio = divide (accounts, reps,BLANK())     // get the ratio
			var res = if (ratio > 100, ROUND(ratio / 10, 0) * 10  , ROUND(ratio, 0) ) // clean up a little
			RETURN
			res
		formatString: 0":1"
		displayFolder: _acct_analysis
		lineageTag: 6e51518c-1072-4e64-b829-407709d6a1bb

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_created_first_touched_age' = ```
			
			var _max_date = CALCULATE(MAX(cal_start_dates[Date]))   /// get the context current max date
			var _added_date = [meas.ssr_open_leads_accts_added_date]           // get the date when the leads added
			var _first_touched_date = [meas.ssr_open_leads_accts_first_touch_date]         // get the first touch date
			
			
			VAR _creatd_age = DATEDIFF(_added_date, _max_date, DAY)
			VAR _res_create = IF(
			    _creatd_age = 0,        // concate strings
			    "-",
			    _creatd_age & " Days"
			)
			
			var _first_touch = DATEDIFF(_first_touched_date, _max_date, DAY)            // get the diff in days 
			
			VAR _res_first = IF(
			    _first_touch <= 0,
			    "-",
			    _first_touch & " Days"              // concate day strings
			)
			
			RETURN
			_res_create & " / " & _res_first
			```
		displayFolder: target_screen
		lineageTag: 93636c7a-41a2-42f0-8f1c-aa6bd54d201a

	measure 'meas.ssr_history_total_adj_duration_hrs' =
			
			var dur = calculate(sum(ssr_history[stkhlds_all_adj_dur])) / 3600 // turn to hours
			var res  = dur
			return res
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: c2ad5daf-4051-40e0-804d-eb894820bca3

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_engagement_rate' =
			
			VAR _eng_rate = [meas.ssr_history_all_activity_engagement_rate]
			
			RETURN
			SWITCH(
			    TRUE(),
			    ISBLANK(_eng_rate), "NA",
			    _eng_rate <= 0.03, "Low",
			    _eng_rate > 0.03 && _eng_rate <= 0.10, "Fair",
			    _eng_rate > 0.10 && _eng_rate <= 0.20, "Good",
			    _eng_rate > 0.20, "Great",
			    "Other"
			)
		displayFolder: target_screen
		lineageTag: 34157429-5bd8-465c-be96-95b14f3d4b9f

	measure 'meas.ssr_history_last_engage_age_days' =
			
			var _max_date = CALCULATE(MAX(cal_start_dates[Date]))           // get the latest slicer date
			var last_act_date = [meas.ssr_history_open_lead_accts_last_act]           // get the last act date
			VAR _last_act = DATEDIFF(last_act_date, _max_date, DAY)  // get the difference in date
			VAR _res_act = IF(
			    _last_act <= 0 || _last_act =BLANK(),
			    "NA",
			    _last_act & " Days"
			)
			RETURN
			_res_act
		displayFolder: target_screen
		lineageTag: 40fe084d-25fb-4833-95ea-7fc917adc2c9

	measure 'meas.ssr_history_target_qual_bucket' =
			
			CALCULATE(
			    MAX(
			        ssr_history[entity_qual_bucket]
			    )
			)
		displayFolder: target_screen
		lineageTag: 883604d1-88f8-4a90-a36b-528ee69e7bc0

	measure 'meas.ssr_target_acct_count' =
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]))
			RETURN
			accounts
		formatString: 0
		displayFolder: target_screen
		lineageTag: 7b3d9e70-1602-459b-b559-9d6784b1eaed

	measure 'meas.ssr_history_target_acct_count_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date)
			
			var _accts = CALCULATE(
			    [meas.ssr_target_acct_count],
			    cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( _accts = BLANK(), 0, _accts)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: c39d3fd5-0a01-441b-be3f-5073037e0252

	measure 'meas.ssr_history_target_acct_count_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var _accts = CALCULATE(
			    [meas.ssr_target_acct_count],
			    cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( _accts = BLANK(), 0, _accts)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 1c74476c-6756-47bb-8f16-9fcaf1cb3cc2

	measure 'meas.ssr_history_target_acct_count_qtd' = ```
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			VAR _accts = CALCULATE(
			    [meas.ssr_target_acct_count],
			    cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( _accts = BLANK(), 0, _accts)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 2d66d18b-d4b5-4fa9-84a4-2b1f4d231b4a

	measure 'meas.ssr_history_target_acct_count_qtd_sply' = ```
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			VAR _accts = CALCULATE(
			    [meas.ssr_target_acct_count],
			    cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( _accts = BLANK(), 0, _accts)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 1c5c9cbe-1015-44e2-b920-8a9107f71e75

	measure 'meas.ssr_history_target_acct_count_ytd' = ```
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			VAR _accts = CALCULATE(
			    [meas.ssr_target_acct_count],
			    cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( _accts = BLANK(), 0, _accts)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: c113589c-b7b8-4213-a7f6-5df6b25a0e89

	measure 'meas.ssr_history_target_acct_count_ytd_sply' = ```
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			VAR _accts = CALCULATE(
			    [meas.ssr_target_acct_count],
			    cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( _accts = BLANK(), 0, _accts)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: e5b92766-c5d2-4b67-85d5-65b587372047

	measure 'meas.ssr_history_target_acct_count_mtd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_target_acct_count_mtd] - [meas.ssr_history_target_acct_count_mtd_sply],
			    [meas.ssr_history_target_acct_count_mtd_sply]
			)
			RETURN
			IF(res=BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: cf513a61-cfb4-4a47-875f-183939f12996

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_count_qtd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_target_acct_count_qtd] - [meas.ssr_history_target_acct_count_qtd_sply],
			    [meas.ssr_history_target_acct_count_qtd_sply]
			)
			RETURN
			IF(res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: c6b82c06-1902-4d2f-ad46-189958b1561d

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_count_ytd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_target_acct_count_ytd] - [meas.ssr_history_target_acct_count_ytd_sply],
			    [meas.ssr_history_target_acct_count_ytd_sply]
			)
			RETURN
			IF(res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 23552dd5-0d36-42f4-88ce-bfd38fb9b58c

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_pred_conv_rate_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date)
			
			var res = CALCULATE(
			    AVERAGEX(
			        dates_tbl,
			        ssr_history[step_success_prob]
			    )
			)
			
			RETURN 
			IF( res = BLANK(), 0, res)
			```
		formatString: 0%;-0%;0%
		displayFolder: target_screen
		lineageTag: ac0cd725-07ac-4db9-a159-df88318d12bf

	measure 'meas.ssr_history_avg_pred_conv_rate_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			
			var res = CALCULATE(
			    AVERAGEX(
			        dates_tbl,
			        ssr_history[step_success_prob]
			    )
			)
			
			RETURN 
			IF( res = BLANK(), 0, res+0)
			```
		formatString: 0%;-0%;0%
		displayFolder: target_screen
		lineageTag: feceac64-d5e2-45b9-9ee6-20b389097999

	measure 'meas.ssr_history_avg_pred_conv_rate_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date)
			
			var res = CALCULATE(
			    AVERAGEX(
			        dates_tbl,
			        ssr_history[step_success_prob]
			    )
			)
			
			RETURN
			IF( res = BLANK(), 0, res+0)
			```
		formatString: 0%;-0%;0%
		displayFolder: target_screen
		lineageTag: a7661ea2-dd6b-47da-85bd-6bc082ba7577

	measure 'meas.ssr_history_avg_pred_conv_rate_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			
			var res = CALCULATE(
			    AVERAGEX(
			        dates_tbl,
			        ssr_history[step_success_prob]
			    )
			)
			
			RETURN
			IF( res = BLANK(), 0, res+0)
			```
		formatString: 0%;-0%;0%
		displayFolder: target_screen
		lineageTag: 95aee519-49ef-40f5-9321-cf9872337c92

	measure 'meas.ssr_history_avg_pred_conv_rate_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date)
			
			var res = CALCULATE(
			    AVERAGEX(
			        dates_tbl,
			        ssr_history[step_success_prob]
			    )
			)
			
			RETURN
			IF( res = BLANK(), 0, res+0)
			```
		formatString: 0%;-0%;0%
		displayFolder: target_screen
		lineageTag: 5ee5441d-db62-4f4b-835f-a6ad359bcec4

	measure 'meas.ssr_history_avg_pred_conv_rate_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			
			var res = CALCULATE(
			    AVERAGEX(
			        dates_tbl,
			        ssr_history[step_success_prob]
			    )
			)
			
			RETURN
			IF( res = BLANK(), 0, res+0)
			```
		formatString: 0%;-0%;0%
		displayFolder: target_screen
		lineageTag: c60e975b-7f86-4ff8-840b-a3c1ed85c572

	measure 'meas.ssr_history_avg_pred_conv_rate_mtd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_avg_pred_conv_rate_mtd] - [meas.ssr_history_avg_pred_conv_rate_mtd_sply],
			    [meas.ssr_history_avg_pred_conv_rate_mtd_sply]
			)
			RETURN
			IF( res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: f1cc6965-f61e-43bb-836d-a29a05254b8b

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_pred_conv_rate_qtd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_avg_pred_conv_rate_qtd] - [meas.ssr_history_avg_pred_conv_rate_qtd_sply],
			    [meas.ssr_history_avg_pred_conv_rate_qtd_sply]
			)
			RETURN
			IF( res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 3d95bd9f-7317-4e35-b417-458c58089eed

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_pred_conv_rate_ytd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_avg_pred_conv_rate_ytd] - [meas.ssr_history_avg_pred_conv_rate_ytd_sply],
			    [meas.ssr_history_avg_pred_conv_rate_ytd_sply]
			)
			RETURN
			IF( res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 160108aa-9552-4a62-b9f9-e3b804b6605d

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_time_spent_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],
			    cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF(_accts = BLANK(), 0, _accts)
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 32040deb-e9f8-49b6-86d4-57d274234256

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_time_spent_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			
			var _accts = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],
			    cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			_accts
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 97a47477-106d-4fbc-94ad-8a4eb21fd63e

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_time_spent_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			
			var _accts = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],
			    cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			_accts
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: a2d6cb51-d02b-466c-aa6a-8737b0995034

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_time_spent_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			
			var _accts = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],
			    cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			_accts
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 8fd1dc27-6150-4b61-a905-baacd541115d

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_time_spent_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			
			var _accts = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],
			    cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			_accts
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 4ca0a8c0-3c99-4732-9486-b36a1c2c588e

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_time_spent_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],
			    cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			_accts
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 4fc68dc7-d398-4de4-ab99-96511cd16559

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_time_spent_mtd_sply_dif' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _mtd = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],   // get the mtd spent time
			    cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date
			)
			
			var _mtd_sply = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],
			    cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply    // get the mtd sply
			)
			
			var res  = DIVIDE(_mtd - _mtd_sply, _mtd_sply)
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 2d7a19bb-7501-4274-86db-3426fd45ec88

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_time_spent_qtd_sply_dif' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _qtd = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],   // get the qtd spent time
			    cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date
			)
			
			var _qtd_sply = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],
			    cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply    // get the qtd sply
			)
			
			var res  = DIVIDE(_qtd - _qtd_sply, _qtd_sply)
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 33460b2c-2ea9-43cb-946d-acf900f42965

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_time_spent_ytd_sply_dif' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _mtd = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],   // get the mtd spent time
			    cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date
			)
			
			var _mtd_sply = CALCULATE(
			    [meas.ssr_history_total_adj_duration_hrs],
			    cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply    // get the mtd sply
			)
			
			var res  = DIVIDE(_mtd - _mtd_sply, _mtd_sply)
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 631335ad-b12a-4d85-a97d-3d3162239995

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_eng_time_spent_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _mtd = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],
			    cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( _mtd = BLANK(), 0, _mtd)
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: c1fdf665-23be-4b47-9ece-5f6efc1f940d

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_total_adj_eng_duration_hrs' =
			
			var dur = calculate(sum(ssr_history[stkhlds_all_adj_eng_dur])) / 3600 // turn to hours
			var res  = dur
			return res
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 1b88eb49-8c1d-40de-83dc-189eb3ba890c

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_eng_time_spent_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _mtd = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],
			    cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( _mtd = BLANK(), 0, _mtd)
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 0252effd-9c6b-4b15-bd68-5a03e6702c58

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_eng_time_spent_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _mtd = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],
			    cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( _mtd = BLANK(), 0, _mtd)
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 5675147a-db14-46cd-bae1-9dc788fb34a6

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_eng_time_spent_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _mtd = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],
			    cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( _mtd = BLANK(), 0, _mtd)
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 9defea10-d04b-4710-ab20-1f7332450c45

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_eng_time_spent_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _mtd = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],
			    cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( _mtd = BLANK(), 0, _mtd)
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 7721302c-0a36-4357-a16c-b1129e9faf51

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_eng_time_spent_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _mtd = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],
			    cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( _mtd = BLANK(), 0, _mtd)
			```
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: e1e1dca6-cc8b-4157-b71f-6edf3be20da2

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_eng_time_spent_mtd_sply_dif' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _mtd = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],   // get the mtd spent time
			    cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date
			)
			
			var _mtd_sply = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],
			    cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply    // get the mtd sply
			)
			
			var res  = DIVIDE(_mtd - _mtd_sply, _mtd_sply)
			RETURN
			IF(res = BLANK(), 0, res)
			```
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 7270933f-ddcc-4616-9963-ccc4dd8cfa30

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_eng_time_spent_qtd_sply_dif' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _qtd = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],   // get the mtd spent time
			    cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date
			)
			
			var _qtd_sply = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],
			    cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply    // get the mtd sply
			)
			
			var res  = DIVIDE(_qtd - _qtd_sply, _qtd_sply)
			RETURN
			IF(res = BLANK(), 0, res)
			```
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 41623be1-c53b-4dc5-8725-d7b4940734ba

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_acct_eng_time_spent_ytd_sply_dif' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _ytd = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],   // get the mtd spent time
			    cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date
			)
			
			var _ytd_sply = CALCULATE(
			    [meas.ssr_history_total_adj_eng_duration_hrs],
			    cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply    // get the mtd sply
			)
			
			var res  = DIVIDE(_ytd - _ytd_sply, _ytd_sply)
			RETURN
			IF(res = BLANK(), 0, res)
			```
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 4c42b7fe-7426-43e7-8f36-5dbaf5db33f7

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_converted_acct_count_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_target_converted_acct_count],
			    cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			_accts
			```
		displayFolder: target_screen
		lineageTag: 3ee7bf3a-73df-4062-87e9-cd889dc5bfed

	measure 'meas.ssr_target_converted_acct_count' =
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), ssr_history[step_outcome] = "Converted" )
			RETURN
			accounts
		formatString: 0
		displayFolder: target_screen
		lineageTag: 12b62739-c09b-405a-9eef-b836936389cf

	measure 'meas.ssr_history_target_converted_acct_count_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_target_converted_acct_count],
			    cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			_accts
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 326dd2e4-46bc-4d10-9f1c-42fdd310db49

	measure 'meas.ssr_history_target_converted_acct_count_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_target_converted_acct_count],
			    cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			_accts
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 8ee150f8-fbb0-4e6a-be6c-ba341c30c0fa

	measure 'meas.ssr_history_target_converted_acct_count_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_target_converted_acct_count],
			    cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			_accts
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 450a6ff1-3fc7-45ca-a8d1-e58b520bdc14

	measure 'meas.ssr_history_target_converted_acct_count_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_target_converted_acct_count],
			    cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			_accts
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 83833cec-127d-4213-aaf1-dfd4afe880cf

	measure 'meas.ssr_history_target_converted_acct_count_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_target_converted_acct_count],
			    cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			_accts
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: b8d6c7a5-facf-4d7d-8ef2-8e31b1c21ad8

	measure 'meas.ssr_history_target_converted_acct_count_mtd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_target_converted_acct_count_mtd] - [meas.ssr_history_target_converted_acct_count_mtd_sply],
			    [meas.ssr_history_target_converted_acct_count_mtd_sply]
			)
			RETURN
			res
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: b3e0f498-ccbd-4266-b8d3-c0eb374fde75

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_converted_acct_count_qtd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_target_converted_acct_count_qtd] - [meas.ssr_history_target_converted_acct_count_qtd_sply],
			    [meas.ssr_history_target_converted_acct_count_qtd_sply]
			)
			RETURN
			res
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 7cdcc461-041e-4fc2-a30e-434f606b9b73

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_converted_acct_count_ytd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_target_converted_acct_count_ytd] - [meas.ssr_history_target_converted_acct_count_ytd_sply],
			    [meas.ssr_history_target_converted_acct_count_ytd_sply]
			)
			RETURN
			res
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 4a2bf27e-f4eb-4ddd-ab66-2319952f87fc

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_target_abandoned_acct_count' =
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), ssr_history[step_outcome] = "Abandoned" )
			RETURN
			accounts
		formatString: 0
		displayFolder: target_screen
		lineageTag: e58328c2-f765-4fd9-8c5e-77bd9eaa8c57

	measure 'meas.ssr_history_target_abandoned_acct_count_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_abandoned_acct_count],
			    cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 1f958466-f35b-4399-955c-f456ffde17fe

	measure 'meas.ssr_history_target_abandoned_acct_count_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_abandoned_acct_count],
			    cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 33f838ce-0d16-4f39-838c-e44cc4af0407

	measure 'meas.ssr_history_target_abandoned_acct_count_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_abandoned_acct_count],
			    cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: b7544d42-7f44-415e-8749-e930f1490d6a

	measure 'meas.ssr_history_target_abandoned_acct_count_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_abandoned_acct_count],
			    cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 1a88026c-6b8a-4d44-8afc-179515e9bf1c

	measure 'meas.ssr_history_target_abandoned_acct_count_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_abandoned_acct_count],
			    cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 4922a4a6-eff2-4fdd-b28f-749cacd61405

	measure 'meas.ssr_history_target_abandoned_acct_count_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_target_abandoned_acct_count],
			    cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			_accts
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 6d6c29f6-35ee-42fd-b36c-5b6d3e8ca898

	measure 'meas.ssr_history_target_abandoned_acct_count_mtd_sply_diff' =
			
			
			var res = DIVIDE(
			    [meas.ssr_history_target_abandoned_acct_count_mtd] - [meas.ssr_history_target_abandoned_acct_count_mtd_sply],
			    [meas.ssr_history_target_abandoned_acct_count_mtd_sply]
			)
			RETURN
			IF( res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 4bf15356-30b5-4e8c-bf48-72047a8c3045

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_abandoned_acct_count_qtd_sply_diff' =
			
			
			var res = DIVIDE(
			    [meas.ssr_history_target_abandoned_acct_count_qtd] - [meas.ssr_history_target_abandoned_acct_count_qtd_sply],
			    [meas.ssr_history_target_abandoned_acct_count_qtd_sply]
			)
			RETURN
			IF( res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: c2657f84-d706-49a0-977d-dda775155be7

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_abandoned_acct_count_ytd_sply_diff' =
			
			
			var res = DIVIDE(
			    [meas.ssr_history_target_abandoned_acct_count_ytd] - [meas.ssr_history_target_abandoned_acct_count_ytd_sply],
			    [meas.ssr_history_target_abandoned_acct_count_ytd_sply]
			)
			RETURN
			IF( res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 2667200a-2199-468b-87d1-1c1e53a352db

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_target_disqualified_acct_count' =
			
			var accounts = calculate(DISTINCTCOUNT(ssr_history[_sys_ssr_id]), ssr_history[step_outcome] = "Disqualified" )
			RETURN
			accounts
		formatString: 0
		displayFolder: target_screen
		lineageTag: d43d9dd1-2ea9-49b5-9cac-4f2ba0fa8cc8

	measure 'meas.ssr_history_target_disqualified_acct_count_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_disqualified_acct_count],
			    cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: e6a5aa15-badb-49da-a30e-e8b1613370a9

	measure 'meas.ssr_history_target_disqualified_acct_count_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_disqualified_acct_count],
			    cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: b52892e4-fee0-4b77-8886-20ea88dba922

	measure 'meas.ssr_history_target_disqualified_acct_count_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_disqualified_acct_count],
			    cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: b9a789b8-61c8-4bc6-915e-6ee859d97fb8

	measure 'meas.ssr_history_target_disqualified_acct_count_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_disqualified_acct_count],
			    cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: c0515cd7-c686-4376-a47e-74cb40901558

	measure 'meas.ssr_history_target_disqualified_acct_count_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var res = CALCULATE(
			    [meas.ssr_target_disqualified_acct_count],
			    cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date
			)
			RETURN
			IF( res = BLANK(), 0, res)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 13becd53-3828-4b94-9e6f-a540f35ab62f

	measure 'meas.ssr_history_target_disqualified_acct_count_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			var _accts = CALCULATE(
			    [meas.ssr_target_disqualified_acct_count],
			    cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			_accts
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: af82d096-6599-4284-ba3e-27293977475e

	measure 'meas.ssr_history_target_disqualified_acct_count_mtd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_target_disqualified_acct_count_mtd] - [meas.ssr_history_target_disqualified_acct_count_mtd_sply],
			    [meas.ssr_history_target_disqualified_acct_count_mtd_sply]
			)
			RETURN
			IF( res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: d64d2531-0c54-4ada-af29-092c397b2307

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_disqualified_acct_count_qtd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_target_disqualified_acct_count_qtd] - [meas.ssr_history_target_disqualified_acct_count_qtd_sply],
			    [meas.ssr_history_target_disqualified_acct_count_qtd_sply]
			)
			RETURN
			IF( res = BLANK(), 0, res)
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: b2c152d6-32d7-45c1-8f51-576b321a55d0

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_target_disqualified_acct_count_ytd_sply_diff' =
			
			var res = DIVIDE(
			    [meas.ssr_history_target_disqualified_acct_count_ytd] - [meas.ssr_history_target_disqualified_acct_count_ytd_sply],
			    [meas.ssr_history_target_disqualified_acct_count_ytd_sply]
			)
			RETURN
			res
		formatString: +0%;-0%;"-"
		displayFolder: target_screen
		lineageTag: 4b32d0cd-ceea-4082-90ff-39b3e52c4ebd

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_adj_eng_duration_hrs' =
			
			var dur = calculate(AVERAGE(ssr_history[stkhlds_all_adj_eng_dur])) / 3600 // turn to hours
			var res  = dur
			RETURN
			IF(res=BLANK(), 0, res)
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 9e9de50f-34d7-4d55-90de-df78f192c215

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_adj_duration_hrs' =
			
			var dur = calculate(AVERAGE(ssr_history[stkhlds_all_adj_dur])) / 3600 // turn to hours
			var res  = dur
			RETURN
			IF(res =BLANK(), 0, res)
		displayFolder: target_screen
		lineageTag: 4f5939c9-1105-42e6-9e6e-611396133b0d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_avg_adj_non_eng_duration_hrs' =
			
			var dur = [meas.ssr_history_avg_adj_duration_hrs] - [meas.ssr_history_avg_adj_eng_duration_hrs]
			
			var res = IF(
			    dur <= 0,
			    0,
			    dur
			)
			
			RETURN
			IF( res = BLANK(), 0, res)
		formatString: #,##0" hrs"
		displayFolder: target_screen
		lineageTag: 3da1ccd0-3a48-4ef7-b586-9b88810bb99b

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_opp_initial_booking_amt' =
			
			CALCULATE(
			    AVERAGE(ssr_history[opp_initial_amt]),
			    ssr_history[step_name] in {"Existing Customer Selling", "New Logo Selling" }
			)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 21aabfec-6cb5-4fea-877e-55ea490fd3e5

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_avg_new_logo_won_amt' =
			
			CALCULATE(
			    AVERAGE(ssr_history[opp_won_amt]),
			    ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}
			)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 53b68b9a-5bbf-4e7e-9c76-8cd394213e73

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_open_pipeline_count_eop_sply' =
			
			// get the same period last year SPLY
			var sply_start = date(Year(Min(cal_end_dates[Date])) -1, Month(Min(cal_end_dates[Date])), Day(Min(cal_end_dates[Date])))
			var sply_end = date(Year(MAX(cal_end_dates[Date])) -1, Month(MAX(cal_end_dates[Date])), Day(MAX(cal_end_dates[Date])))
			
			var res = CALCULATE(
			    [meas.ssr_history_open_pipeline_count_eop],
			    cal_end_dates[Date] >= sply_start &&  cal_end_dates[Date] <= sply_end
			)
			RETURN
			res
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _pipeline_analysis
		lineageTag: 9a6bb860-8d3b-4392-bfb8-f71095c0c541

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_open_pipeline_win_rate_sply' =
			
			// get the same period last year SPLY
			var sply_start = date(Year(Min(cal_end_dates[Date])) -1, Month(Min(cal_end_dates[Date])), Day(Min(cal_end_dates[Date])))
			var sply_end = date(Year(MAX(cal_end_dates[Date])) -1, Month(MAX(cal_end_dates[Date])), Day(MAX(cal_end_dates[Date])))
			
			var res = CALCULATE(
			    [meas.ssr_history_open_pipeline_win_rate],
			    cal_end_dates[Date] >= sply_start &&  cal_end_dates[Date] <= sply_end
			)
			RETURN
			res
		formatString: 0%;-0%;0%
		displayFolder: _pipeline_analysis
		lineageTag: f4c4cde9-5f8b-4a38-8942-cb3f51cf50e5

	measure 'meas.ssr_history_target_filter_screen' = ```
			
			VAR _maxt_date = CALCULATE(MAX(cal_end_dates[Date]))
			VAR _latest_step_end_date = 
			CALCULATE(
			    MAX(ssr_history[step_end_date]),
			    ssr_history[step_end_date]<=_maxt_date,
			    ALLEXCEPT(ssr_history, ssr[crm_name])
			)
			
			RETURN
			IF(
			    max(ssr_history[step_end_date]) =_latest_step_end_date,
			    1,
			    0
			)
			```
		formatString: 0
		displayFolder: target_screen
		lineageTag: 10d202ea-892e-4480-a7e0-3b59aba92107

	measure 'meas.ssr_history_target_stkhlds_tot_count' =
			CALCULATE(
			    DISTINCTCOUNT(ssr_history[step_owner_id])
			)
		formatString: 0
		displayFolder: target_screen
		lineageTag: 795f0e2e-824a-468f-ae47-98dd67cef41e

	measure 'meas.ssr_history_target_latest_outcome' =
			
			var default_outcome = CALCULATE(
			    MAXX(
			        FILTER(
			            ssr_history,
			            ssr_history[step_outcome]  in {"Prospecting", "Untouched"}
			        ),
			        ssr_history[step_outcome]
			    )
			)
			
			// var res = SELECTEDVALUE(ssr_history[step_outcome],default_outcome)
			
			RETURN
			// res
			
			IF (
			    ISFILTERED ( 'ssr_history'[step_outcome] ),
			    SELECTEDVALUE ( 'ssr_history'[step_outcome]),
			    default_outcome
			)
		displayFolder: target_screen
		lineageTag: 2b80acd8-f589-4d81-a7a5-1c56cee7af1b

	measure 'meas.ssr_history_open_pipeline_success_count_eop' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = calculate(MIN(cal_end_dates[date]))
			var period_end = calculate(MAX(cal_end_dates[date]))
			
			var pipeline_sum = CALCULATE(COUNT(ssr_history[_sys_doc_id]), 
			cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1) , // override the main date filter
			ssr_history[_sys_filt_start_date] <=  period_end 
			&&  ssr_history[_sys_filt_end_date] > period_start
			&& ssr_history[step_outcome] <> "any string"  // one more overide
			&& ssr_history[step_success] = True
			) 
			var res = pipeline_sum
			RETURN
			res
			```
		formatString: 0
		displayFolder: _pipeline_analysis
		lineageTag: 3fcfdc9e-0ecf-44fe-8808-9884d96c4c3e

	measure 'meas.ssr_history_step_count_sply_diff' = ```
			
			// get the same period last year SPLY
			var sply_start = date(Year(Min(cal_end_dates[Date])) -1, Month(Min(cal_end_dates[Date])), Day(Min(cal_end_dates[Date])))
			var sply_end = date(Year(MAX(cal_end_dates[Date])) -1, Month(MAX(cal_end_dates[Date])), Day(MAX(cal_end_dates[Date])))
			
			
			var _curr_count =CALCULATE(
			    count(ssr_history[_sys_doc_id]),
			    ssr_history[step_success] =True
			)
			
			var _sply_count = CALCULATE(
			    Count(ssr_history[_sys_doc_id]), 
			    cal_end_dates[Date] >= sply_start &&  cal_end_dates[Date] <= sply_end,
			    ssr_history[step_outcome] = "Closed Won"
			) 
			
			var res = DIVIDE(
			    _curr_count - _sply_count,
			    _sply_count,
			    0
			)
			
			RETURN
			res
			```
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: ca141cc3-0dee-4432-a559-e19a3ad484b8

	measure 'meas.ssr_history_success_rate_sply_diff' =
			
			
			// var sply_start = date(Year(Min(cal_end_dates[Date])) -1, Month(Min(cal_end_dates[Date])), Day(Min(cal_end_dates[Date])))
			// var sply_end = date(Year(MAX(cal_end_dates[Date])) -1, Month(MAX(cal_end_dates[Date])), Day(MAX(cal_end_dates[Date])))
			
			// var _curr_rate = DIVIDE([meas.ssr_history_success_count], count(ssr_history[_sys_doc_id]))
			
			// var _sply_rate = CALCULATE(
			//     [meas.ssr_history_success_rate],
			//     cal_end_dates[Date] >= sply_start &&  cal_end_dates[Date] <= sply_end
			// )
			
			var _curr_rate = ROUND([meas.ssr_history_success_rate]*100, 0)
			var _sply_rate = ROUND([meas.ssr_history_success_rate_sply]*100,0)
			
			
			VAR res = DIVIDE(
			    (_curr_rate - _sply_rate),
			    _sply_rate,
			    0
			)
			
			RETURN
			res
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: f901a081-2aff-4dea-975b-c96a055cabf1

	measure 'meas.ssr_history_won_amt_sply_diff' =
			
			var sply_start = date(Year(Min(cal_end_dates[Date])) -1, Month(Min(cal_end_dates[Date])), Day(Min(cal_end_dates[Date])))
			var sply_end = date(Year(MAX(cal_end_dates[Date])) -1, Month(MAX(cal_end_dates[Date])), Day(MAX(cal_end_dates[Date])))
			
			var _curr_amt = CALCULATE(SUM(ssr_history[opp_won_amt]))
			
			var _sply_amt = CALCULATE(
			    SUM(ssr_history[opp_won_amt]),
			    cal_end_dates[Date] >= sply_start &&  cal_end_dates[Date] <= sply_end
			)
			
			VAR res = DIVIDE(
			    _curr_amt- _sply_amt,
			    _sply_amt,
			    0
			)
			
			RETURN
			res
		formatString: 0%;-0%;0%
		displayFolder: _rev_analysis
		lineageTag: 794e7f1a-4e7b-4813-b51d-da504fb1faee

	measure 'meas.ssr_history_open_pipeline_success_rate' = ```
			
			
			// get the period dates based on current filter contetxt 
			var period_start = calculate(MIN(cal_end_dates[date]))
			var period_end = calculate(MAX(cal_end_dates[date]))
			
			var success_count = CALCULATE(COUNT(ssr_history[_sys_doc_id]), 
			cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1) , // override the main date filter
			ssr_history[_sys_filt_start_date] <=  period_end                            // get the total open pipeline count that success
			&&  ssr_history[_sys_filt_end_date] > period_start
			&& ssr_history[step_outcome] <> "any string"  // one more overide
			&& ssr_history[step_success] = True
			)
			
			var total_count = CALCULATE(COUNT(ssr_history[_sys_doc_id]), 
			cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1) , // override the main date filter
			ssr_history[_sys_filt_start_date] <=  period_end 
			&&  ssr_history[_sys_filt_end_date] > period_start                              // get the total open pipeline count
			&& ssr_history[step_outcome] <> "any string"  // one more overide
			) 
			
			var res = DIVIDE(
			    success_count,
			    total_count,
			    0
			)
			
			RETURN
			res
			```
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: _pipeline_analysis
		lineageTag: b882e359-aecc-4c71-a0d8-afcd66699f3e

	measure 'meas.ssr_history_reps_mtd' = ```
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			var res = CALCULATE(
			    [meas.ssr_history_reps],
			    cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply
			)
			RETURN
			res
			```
		formatString: 0
		displayFolder: _rep_analysis
		lineageTag: 6ad39d47-c16a-4187-b2c1-0886f1f254ff

	measure 'meas.sales_booking_amt' =
			
			CALCULATE(
			    AVERAGEX(
			        ssr_history,
			        ssr_history[step_length_in_days]
			    ),
			    ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"},
			    ssr_history[step_success] = true
			)
		formatString: #,0
		displayFolder: _mgmt_rpt_bookings
		lineageTag: de89562c-28a1-4488-baee-f465967c9dae

	measure 'meas.ssr_history_step_users_tot' =
			
			AVERAGE(
			    ssr_history[step_users_tot]
			)
		formatString: 0.0
		displayFolder: _stakeholder_analysis
		lineageTag: b0ab13f1-d671-4f31-8975-59ffc2bf4be8

	measure 'meas.ssr_history_total_all_dur_hrs' = ```
			
			var dur = CALCULATE(
			    SUM(
			        ssr_history[stkhlds_all_dur]  // get the actual duration of the stkhlds 
			    )
			)/3600          // turn into hrs
			var res  = dur
			RETURN
			IF(
			    res =BLANK(),
			    0,
			    res
			)
			```
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 3592fb17-9474-4df2-8e12-b2f3cd30965f

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_step_success_prob' =
			
			CALCULATE(
			    SUM(
			        ssr_history[step_success_prob]
			    )
			)
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 337e9878-51af-496c-a2e7-a12fddc87941

	measure 'meas.ssr_history_step_owner_full_name_with_acl' =
			
			var _act_lvl = [meas.ssr_history_step_owner_avg_act_capt_lvl] // get the act_capt_lvl
			
			var _new_act = IF(
			    ISBLANK(_act_lvl),
			    "N/A",
			    FORMAT(_act_lvl,"0%")
			)
			
			var _name = CALCULATE(MAX(ssr_history[col.step_owner_full_name]))       // get the step owner name
			
			var name_new = IF(len(_name) > 15 , lEFT(_name, 15) & "...", _name)     // truncating the name for 15 characters
			
			var res =IF(_name = BLANK(), "No Owner",  name_new & " ACL: " & _new_act)
			RETURN
			res
		displayFolder: _activity_analysis
		lineageTag: 72424160-8ff0-432e-9852-8740e0dd48f1

	measure 'meas.ssr_history_step_owner_avg_act_capt_lvl' =
			
			var res = CALCULATE(MAX(ssr_history[step_owner_act_capt_lvl]))
			
			RETURN
			res
		displayFolder: _activity_analysis
		lineageTag: fd4874d9-f7b1-4ee4-bc5e-603e3214660c

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_time_effort_src' = ```
			
			var _str = 
			SWITCH(
			        MAX(ssr_history[stkhlds_all_adj_dur_rule]),
			        116023, "Owner’s Deal Activities (Adj. by ACL)",
			        116024, "Owner & Colleagues’ Deal Activities (w. Similar Outcome/Length)",
			        116021, "Colleagues’ Deal Activities (w. Similar Outcome/Length)",  // condition for the rule
			        116022, "Industry Benchmarks (w. Similar Outcome/Length)"
			    )
			RETURN 
			 _str
			```
		displayFolder: _activity_analysis
		lineageTag: bf1fce32-4a95-422a-8e17-8d523dd26455

	measure 'meas.ssr_history_time_effort_conf' =
			
			
			var _conf = CALCULATE(MAX(ssr_history[stkhlds_all_adj_dur_conf]))   // get the adj conf
			
			RETURN
			_conf
		displayFolder: _activity_analysis
		lineageTag: d6551ac3-776a-4d75-9bc5-3813ae4951d8

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_failure_lost_stage_nd_count' = ```
			CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[opp_lost_stage] = "ND") 
			```
		formatString: 0
		displayFolder: _success_analysis
		lineageTag: ee7d19a3-028e-4475-bc14-2d38e163761f

	measure 'meas.ssr_history_mkt_leads_inbound' = ```
			
			var res = CALCULATE(
			    distinctcount(ssr_history[_sys_ssr_id]), 
			    ssr_history[step_name] = "Lead Gen",  
			    ssr[trueai_leadsource_is_inbound] = true,    // get the mkt inbound leads 
			    users[trueai_user_role_dept]="MKT"
			) 
			return COALESCE ( res, 0 )
			```
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: 3cd764ac-d38c-48c4-b4e5-58ed5cc8642e

	measure 'meas.ssr_history_leads_dept_rate' = ```
			
			VAR total_count =
			    CALCULATE(
			        DISTINCTCOUNT(ssr_history[_sys_ssr_id]), 
			        ssr_history[step_name] = "Lead Gen",
			        ALL(users_history[trueai_user_role_dept]),
			        ALLSELECTED(cal_end_dates)
			    )
			VAR legend_count =
			    CALCULATE(
			        DISTINCTCOUNT(ssr_history[_sys_ssr_id]),
			        ssr_history[step_name] = "Lead Gen"
			    )
			VAR res = DIVIDE(
			    legend_count,
			    total_count,
			    0
			)
			
			RETURN 
			res
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 82de357f-54f5-46fc-83e6-7e17359ce2c6

	measure 'meas.ssr_history_leads_gen_vi_vc_rate' = ```
			
			VAR total_sum =
			    CALCULATE(
			        sum(ssr_history[vi_value_created]), 
			        ssr_history[step_name] = "Lead Gen",
			        ALL(users_history[trueai_user_role_dept]),
			        ALLSELECTED(cal_end_dates)
			    )
			VAR legend_sum =
			    CALCULATE(
			        sum(ssr_history[vi_value_created]),
			        ssr_history[step_name] = "Lead Gen"
			    )
			VAR res = DIVIDE(
			    legend_sum,
			    total_sum,
			    0
			)
			
			RETURN 
			res
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 147932a0-17b0-48f3-b7f8-db2fe3cfe426

	measure 'meas.ssr_history_leads_touched_updated' =
			
			var start_date = [meas.filter_date_min]
			var end_date =[meas.filter_date_max]
			var filt_ssr = CALCULATETABLE(ssr, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1)) // get rid of date context
			
			--var filt_ssr_hist = Filter(filt_ssr, ssr[_sys_doc_id] in SELECTColumn([_sys_ssr_id], inbound_leads)
			var test_tbl = filter(filt_ssr, ssr[trueai_first_touch] >=  start_date &&  ssr[trueai_first_touch] < end_date && ssr[trueai_leadsource_is_inbound]=true && ssr[col.trueai_time_to_touch_days] <21) // get the new date range
			var touch_cnt = COuntX(test_tbl, ssr[trueai_first_touch]   )
			var res = touch_cnt
			return res
		formatString: 0
		displayFolder: _lead_analysis
		lineageTag: ef53c678-5a00-4902-9e56-959270fca8bb

	measure 'meas.ssr_history_leads_touched_ratio_updated' =
			
			var res = divide([meas.ssr_history_leads_touched_updated] ,  [meas.ssr_history_mkt_leads_inbound])
			return res
		displayFolder: _lead_analysis
		lineageTag: bcf067b6-1162-4d39-95d3-c590a242337d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_inbound_leads_touched_avg_days' =
			
			var start_date = [meas.filter_date_min]
			var end_date =[meas.filter_date_max]
			var filt_ssr = CALCULATETABLE(ssr, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1)) // get rid of date context
			
			--var filt_ssr_hist = Filter(filt_ssr, ssr[_sys_doc_id] in SELECTColumn([_sys_ssr_id], inbound_leads)
			var test_tbl = filter(filt_ssr, ssr[trueai_first_touch] >=  start_date &&  ssr[trueai_first_touch] < end_date && ssr[trueai_leadsource_is_inbound]=true ) // get the new date range
			var avg_days = AVERAGEX(test_tbl, ssr[trueai_first_touch] -ssr[trueai_added_on]  )
			var res = avg_days
			RETURN
			 res
		formatString: 0
		displayFolder: _lead_analysis
		lineageTag: d22be261-5984-4eab-96d7-dbf311852981

	measure 'meas.ssr_history_success_count_prospecting_inbound' = ```
			
			CALCULATE(
			    [meas.ssr_history_success_count_prospecting],
			    ssr[trueai_leadsource_is_inbound]=true
			)  
			
			```
		formatString: 0
		displayFolder: _lead_analysis
		lineageTag: 2a5edb31-7b40-4524-b329-dbb629a85415

	measure 'meas.ssr_history_success_rate_prospecting_inbound' = ```
			
			CALCULATE(
			    [meas.ssr_history_success_rate_prospecting],
			    ssr[trueai_leadsource_is_inbound]=true
			)  
			
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: b5dd67ca-260e-4e43-97c5-e0ef0213cb94

	measure 'meas.all_stkhlds_count' = CALCULATE(SUM(ssr_history[stkhlds_all_act_count]))
		formatString: 0
		displayFolder: _opps_detail
		lineageTag: 28846c09-6fdd-4b2b-a286-b3c883574e52

	measure 'meas.all_stkhlds_title' = "All Stakeholder - " & [meas.all_stkhlds_count]
		displayFolder: _opps_detail
		lineageTag: 78757da0-c460-47ed-ba7c-ab3e66cb3c13

	measure 'meas.crm_currency' = MAX(opps[crm_currency])
		displayFolder: _opps_detail
		lineageTag: 7cbb93a6-d33e-4605-a23a-ca49c664627b

	measure 'meas.crm_name' = MAX(ssr[crm_name])
		displayFolder: _opps_detail
		lineageTag: 522fd04b-d479-4369-8b2b-fa5daf0989f6

	measure 'meas.opps_addr_location' =
			
			var city = CALCULATE(MAX(ssr[trueai_addr_city]))
			var state = CALCULATE(MAX(ssr[trueai_addr_state]))
			var country = CALCULATE(MAX(ssr[trueai_addr_country]))
			
			VAR res_1 = IF(
			    country in {"United States" , "Canada"},
			    IF(
			        city=BLANK(),
			        state,
			        city & ", " & state
			    ),
			    IF(
			        city=BLANK(),
			        country,
			        city & ", " & country
			    )
			)
			
			RETURN
			res_1
		displayFolder: _opps_detail
		lineageTag: 82a06b95-07a7-4736-944a-a814fd97f546

	measure 'meas.opps_closed_date' =
			
			var days = CALCULATE(MAX(ssr_history[col.days_pushed_pulled]))
			RETURN
			IF( days > 0, "+" & days & " days", days & " days")
		displayFolder: _opps_detail
		lineageTag: 1ee55718-0c1c-4f91-a4a0-d1e550db76bb

	measure 'meas.opps_trueai_book_amt' = CALCULATE(SUM(opps[trueai_booking_amt]))        // sum of opps booking amt
		formatString: \$#,0.0;(\$#,0.0);\$#,0.0
		displayFolder: _opps_detail
		lineageTag: 8bad8254-47e1-4e95-8ba4-057e54babe99

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.opps_trueai_sales_type' = CALCULATE(MAX(opps[trueai_sale_type]))
		displayFolder: _opps_detail
		lineageTag: 40d75456-f12b-4c55-8e18-9674bcfa91df

	measure 'meas.opps_trueai_stage' = CALCULATE(MAX(opps[trueai_stage]))
		displayFolder: _opps_detail
		lineageTag: 8db7b9c0-473c-4ae0-bb95-bf759e442575

	measure 'meas.owner_full_name' =
			
			var _max_step_id = MAX(ssr_history[step_sequence])          // get the most recent step sequence number
			var res = CALCULATE(
			    Max(ssr_history[col.step_owner_full_name]),
			    ssr_history[step_sequence] = _max_step_id           // get the most recent reps name
			)
			
			RETURN
			res
		displayFolder: _opps_detail
		lineageTag: 63ac0d34-90a8-4bd6-813d-bd601884a6bc

	measure 'meas.ssr_history_step_outcome' = CALCULATE(MAX(ssr_history[step_outcome]))
		displayFolder: _opps_detail
		lineageTag: f0259595-548a-4186-bb61-5c75106066ce

	measure 'meas.step_owner_group' =
			
			var _max_step_id = MAX(ssr_history[step_sequence])          // get the most recent step sequence number
			var res = CALCULATE(
			    Max(ssr_history[col.step_owner_group]),
			    ssr_history[step_sequence] = _max_step_id           // get the most recent reps role
			)
			
			RETURN
			res
		displayFolder: _opps_detail
		lineageTag: dfb34cff-0710-4c51-b257-c20e6ac9048a

	measure 'meas.step_owner_role' = ```
			
			var cols = MAX(users[col.trueai_user_role_coid_aliased])           // getting the role 
			
			RETURN  cols
			```
		displayFolder: _opps_detail
		lineageTag: a07157e5-20d0-44d6-a078-3fdeafe44711

	measure 'meas.step_owner_user_role_aliased' =
			
			var _max_step_id = MAX(ssr_history[step_sequence])          // get the most recent step sequence number
			var res = CALCULATE(
			    Max(ssr_history[col.step_owner_role_aliased]),
			    ssr_history[step_sequence] = _max_step_id           // get the most recent reps role
			)
			
			RETURN
			res
		displayFolder: _opps_detail
		lineageTag: f533f6fb-f353-4ef8-b03f-e5b8e1d6ea24

	measure 'meas.step_users_total' = SUM(ssr_history[step_users_tot])
		formatString: 0
		displayFolder: _opps_detail
		lineageTag: 999d089b-e8ce-4948-bf65-476b47968236

	measure 'meas.stkhlds_all_contacts_count' = CALCULATE(SUM(ssr_history[stkhlds_all_contacts_count]))
		formatString: 0
		displayFolder: _opps_detail
		lineageTag: e29687f4-8346-43fc-8574-a64416eb29fb

	measure 'meas.stkhlds_all_first_act' = MAX(ssr_history[stkhlds_all_first_act])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 962713b9-cb6e-418b-ad06-e4acd19e2668

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_all_last_act' = MAX(ssr_history[stkhlds_all_last_act])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 541171db-b721-479b-a59e-5c2b03b561fa

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_all_last_eng' = MAX(ssr_history[stkhlds_all_last_eng])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 3884fb1d-2539-47a6-bc4c-354cd639fa33

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_primary_contact_card_title' = [meas.stkhlds_primary_full_name] & ", " & [meas.stkhlds_primary_contact_title_seniority]
		displayFolder: _opps_detail
		lineageTag: b5107bc2-6975-4765-b18a-cff756e2e10a

	measure 'meas.stkhlds_primary_contact_first_act' = Max(ssr_history[stkhlds_primary_contact_first_act])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 196f271b-e103-4fab-9b4b-ca49422a5a8b

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_primary_contact_first_eng' = MAX(ssr_history[stkhlds_primary_contact_first_eng])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 5ef71b41-28ba-4cda-8996-43d5cc5662c9

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_primary_contact_last_act' = Max(ssr_history[stkhlds_primary_contact_last_act])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 81c2809a-88f2-43b7-9689-58a56fb3583c

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_primary_contact_last_eng' = MAX(ssr_history[stkhlds_primary_contact_last_eng])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 5eaa3a02-dc7c-4977-aa52-12baabf93d7d

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_primary_contact_seniority' = CALCULATE(MAX(ssr_history_stakeholders[trueai_title_seniority]), ssr_history_stakeholders[trueai_stkhld_ranking]=1)
		displayFolder: _opps_detail
		lineageTag: e4b3accf-c3b1-40c8-91fe-fa17d32d43f0

	measure 'meas.stkhlds_primary_contact_title_dept' = CALCULATE(MAX(ssr_history_stakeholders[trueai_title_dept]), ssr_history_stakeholders[trueai_stkhld_ranking]=1)
		displayFolder: _opps_detail
		lineageTag: a6b9ce75-05d3-4166-9963-50a9ed6c6de7

	measure 'meas.stkhlds_primary_contact_title_seniority' = CALCULATE(MAX(ssr_history_stakeholders[crm_title]), ssr_history_stakeholders[trueai_stkhld_ranking]=1)
		displayFolder: _opps_detail
		lineageTag: 9a0cfe10-afcd-4d34-b727-0003324ead0a

	measure 'meas.stkhlds_primary_full_name' = ```
			
			    CALCULATE(MAX(ssr_history_stakeholders[crm_first_name]), FILTER( ssr_history_stakeholders, [meas.stkhlds_primary_contact_first_act] = ssr_history[meas.stkhlds_primary_contact_first_act]))
			     & " " & 
			     CALCULATE(MAX(ssr_history_stakeholders[crm_last_name]), FILTER( ssr_history_stakeholders, [meas.stkhlds_primary_contact_first_act] = ssr_history[meas.stkhlds_primary_contact_first_act]))
			```
		displayFolder: _opps_detail
		lineageTag: f7fe0bec-b9ad-4b3a-8c0e-35014957b7b3

	measure 'meas.stkhlds_seconary_contact_title' = CALCULATE(MAX(ssr_history_stakeholders[crm_title]), ssr_history_stakeholders[trueai_stkhld_ranking]=1)
		displayFolder: _opps_detail
		lineageTag: a4ad0169-931d-41f0-8a4c-66a095f76503

	measure 'meas.stkhlds_secondary_contact_card_title' = [meas.stkhlds_secondary_full_name] & ", " & [meas.stkhlds_secondary_contact_title_seniority]
		displayFolder: _opps_detail
		lineageTag: 574655a7-cd76-41c5-a883-fac2e9db9b58

	measure 'meas.stkhlds_secondary_contact_first_act' = MAX(ssr_history[stkhlds_secondary_contact_first_act])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: c6e3be79-c1cb-4d52-958d-0a9da7ba79e0

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_secondary_contact_first_eng' = MAX(ssr_history[stkhlds_secondary_contact_first_eng])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 442fecfd-d10f-47f6-b5ed-599c4ac4269f

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_secondary_contact_last_act' = MAX(ssr_history[stkhlds_secondary_contact_last_act])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 980c5f88-1bcc-405c-9de6-93bc21faa96a

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_secondary_contact_last_eng' = MAX(ssr_history[stkhlds_secondary_contact_last_eng])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: f7cbb2cf-fce4-4da5-a4b3-9d3a94c947f8

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_secondary_contact_title_dept' = CALCULATE(MAX(ssr_history_stakeholders[trueai_title_dept]), ssr_history_stakeholders[trueai_stkhld_ranking]=2)
		displayFolder: _opps_detail
		lineageTag: 1f889106-23b7-479c-ae6c-7457ad751973

	measure 'meas.stkhlds_secondary_contact_title_seniority' = CALCULATE(MAX(ssr_history_stakeholders[trueai_title_seniority]), ssr_history_stakeholders[trueai_stkhld_ranking]=2)
		displayFolder: _opps_detail
		lineageTag: 58be11f9-5fa8-407b-86b3-a7a51fbd973d

	measure 'meas.tot_pushed_pulled_close_date' = CALCULATE(MAX(ssr_history[col.days_pushed_pulled]))
		formatString: #,##0" days"
		displayFolder: _opps_detail
		lineageTag: b8de82b1-9edc-44a0-81da-1a92719d5d82

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.trueai_addr_city' = MAX(ssr[trueai_addr_city])
		displayFolder: _opps_detail
		lineageTag: aea300b6-d351-4807-8c15-59d0efaaf095

	measure 'meas.trueai_addr_state' = MAX(ssr[trueai_addr_state])
		displayFolder: _opps_detail
		lineageTag: e0ee9a32-3e48-48a3-a072-8db886011a57

	measure 'meas.trueai_company_size' = MAX(ssr[trueai_company_size])
		displayFolder: _opps_detail
		lineageTag: f3905930-5358-400c-a88c-170da30a2a6b

	measure 'meas.trueai_curr_acv' = MAX(ssr[trueai_curr_acv])
		formatString: \$#,0.0;(\$#,0.0);\$#,0.0
		displayFolder: _opps_detail
		lineageTag: 6fb7f734-43ea-44d1-b12b-47b5bdc22686

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.trueai_first_purchase' = MAX(ssr[trueai_first_purchase])
		formatString: mm/dd/yyyy
		displayFolder: _opps_detail
		lineageTag: 7aaba8b0-489a-4588-a768-6e382112243d

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.trueai_leadsource_name' = CALCULATE(MAX(ssr[trueai_leadsource]))
		displayFolder: _opps_detail
		lineageTag: 985ef7d6-743a-494f-a630-29543abf22b9

	measure 'meas.trueai_potential_acv' = CALCULATE(MAX(ssr[trueai_potential_acv]))
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _opps_detail
		lineageTag: 851ef328-e369-4246-a130-43aa00d0ed51

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.trueai_qual_bucket' = CALCULATE(MAX(opps[trueai_qual_bucket]))
		displayFolder: _opps_detail
		lineageTag: 5224aba0-39d0-48ad-8d64-6b362b6f8ab3

	measure 'meas.opps_deals_lost_count' = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_outcome]="Closed Lost")
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: c40b079d-0d20-46e9-8c46-eb86c489995d

	measure 'meas.opps_deals_won_count' = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_outcome]="Closed Won")
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: fe8c317a-57f5-4273-9aee-59c14a9b605a

	measure 'meas.ssr_history_opps_rev_avg_won_amt' = CALCULATE(Average(ssr_history[opp_won_amt]), ssr_history[opp_won_amt] > 0 )
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: all_activity_opp
		lineageTag: b97fa038-37e5-4b5f-ab4d-fc0857dacede

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_opps_step_cycle_avg_success' =
			
			var days = CALCULATE(AVERAGE(ssr_history[step_length_in_days]),ssr_history[step_success]=true)
			var res = days
			return res
		formatString: #,##0" days"
		displayFolder: all_activity_opp
		lineageTag: 13a15568-5870-491a-8867-e0009568373d

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.stkhlds_all_act_count' = CALCULATE(sum(ssr_history[stkhlds_all_act_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: c3257422-1642-41b8-9359-1fe7c3a32c1d

	measure 'meas.stkhlds_all_act_counts' =
			
			
			SWITCH(TRUE(),
			    MAX(all_act_support[order])=1, [meas.stkhlds_all_act_count],
			    MAX(all_act_support[order])=2, [meas.stkhlds_all_act_phone_calls],
			    MAX(all_act_support[order])=3, [meas.stkhlds_all_act_email_count],
			    MAX(all_act_support[order])=4, [meas.stkhlds_all_act_meeting_count],
			    MAX(all_act_support[order])=5, [meas.stkhlds_all_act_social_count]
			)
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 37df40d1-c6dd-4989-b6e8-e4d53702ea27

	measure 'meas.stkhlds_all_act_email_count' = CALCULATE(MAX(ssr_history[stkhlds_all_act_type_email_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: baa720af-547e-433d-8cff-1722671d1b06

	measure 'meas.stkhlds_all_act_eng_counts' =
			
			
			SWITCH(TRUE(),
			    MAX(all_act_support[order])=1, [meas.stkhlds_all_eng_act_count],
			    MAX(all_act_support[order])=2, [meas.stkhlds_all_act_phone_eng_calls],
			    MAX(all_act_support[order])=3, [meas.stkhlds_all_act_eng_email_count],
			    MAX(all_act_support[order])=4, [meas.stkhlds_all_act_eng_meeting_count],
			    MAX(all_act_support[order])=5, [meas.stkhlds_all_act_eng_social_count]
			)
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: fd34c73b-995e-4594-a02c-e26be55f3a88

	measure 'meas.stkhlds_all_act_eng_email_count' = CALCULATE(MAX(ssr_history[stkhlds_all_act_type_email_eng_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 00d89f16-337b-44cd-97f0-e41ab101d12a

	measure 'meas.stkhlds_all_act_eng_meeting_count' = CALCULATE(MAX(ssr_history[stkhlds_all_act_type_meeting_eng_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 0ec2c54d-b4d3-458a-84d5-65ed783b9a11

	measure 'meas.stkhlds_all_act_eng_social_count' = CALCULATE(MAX(ssr_history[stkhlds_all_act_type_social_eng_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 7b68b274-f9be-43e0-90fc-5f96ee6fcd00

	measure 'meas.stkhlds_all_act_meeting_count' = CALCULATE(MAX(ssr_history[stkhlds_all_act_type_meeting_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 1677f23c-1acb-478a-a525-acf5455ada38

	measure 'meas.stkhlds_all_act_phone_calls' = CALCULATE(MAX(ssr_history[stkhlds_all_act_type_call_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 54bb9fe9-511c-46b2-860a-6cd09aaf186b

	measure 'meas.stkhlds_all_act_phone_eng_calls' = CALCULATE(MAX(ssr_history[stkhlds_all_act_type_call_eng_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: cf44cd93-b8be-4c19-a346-b5896f160191

	measure 'meas.stkhlds_all_act_social_count' = CALCULATE(MAX(ssr_history[stkhlds_all_social_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 5bfe74fe-f6e9-4a10-9f3a-e89870692b8b

	measure 'meas.stkhlds_all_eng_act_count' = CALCULATE(MAX(ssr_history[stkhlds_all_act_eng_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 6a285998-a447-409c-9369-d38a2185247f

	measure 'meas.stkhlds_all_non_eng_counts' =
			
			
			SWITCH(TRUE(),
			    MAX(all_act_support[order])=1, [meas.stkhlds_non_eng_act_counts],
			    MAX(all_act_support[order])=2, [meas.stkhlds_all_non_eng_phone_calls],
			    MAX(all_act_support[order])=3, [meas.stkhlds_all_non_eng_email],
			    MAX(all_act_support[order])=4, [meas.stkhlds_all_non_eng_meeting],
			    MAX(all_act_support[order])=5, [meas.stkhlds_all_non_eng_social_count]
			)
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: d58668cb-4b49-4aa2-b3e3-8e3f01acc11c

	measure 'meas.stkhlds_all_non_eng_email' = [meas.stkhlds_all_act_email_count] - [meas.stkhlds_all_act_eng_email_count]
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 5cac4ba2-4e5d-4121-9174-66ee295ca5d0

	measure 'meas.stkhlds_all_non_eng_meeting' = [meas.stkhlds_all_act_meeting_count] - [meas.stkhlds_all_act_eng_meeting_count]
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 987de962-da48-4bd0-862f-143db5d9d907

	measure 'meas.stkhlds_all_non_eng_phone_calls' = [meas.stkhlds_all_act_phone_calls] - [meas.stkhlds_all_act_phone_eng_calls]
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: b122a6db-aef0-4227-b397-7342e61a5da8

	measure 'meas.stkhlds_all_non_eng_social_count' = [meas.stkhlds_all_act_social_count] - [meas.stkhlds_all_act_eng_social_count]
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 0d6a270c-047e-452d-85ab-577e7e7e62ac

	measure 'meas.stkhlds_non_eng_act_counts' = [meas.stkhlds_all_act_counts] - [meas.stkhlds_all_act_eng_counts]
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: ce292af2-8817-4757-afec-7a26a0735233

	measure 'meas.stkhlds_secondary_full_name' = ```
			
			    CALCULATE(MAX(ssr_history_stakeholders[crm_first_name]), ssr_history_stakeholders[trueai_stkhld_ranking]=2)
			     & " " & 
			     CALCULATE(MAX(ssr_history_stakeholders[crm_last_name]), ssr_history_stakeholders[trueai_stkhld_ranking]=2)
			```
		displayFolder: all_activity_opp
		lineageTag: c7a337f8-e45f-43af-a3cd-8d065076b3ec

	measure 'meas.tot_lost_amt_opps' = CALCULATE(SUM(ssr_history[opp_booking_amt]), ssr_history[step_outcome]="Closed Lost")
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: all_activity_opp
		lineageTag: 0d91e50b-0d6c-4730-8ba1-57ede134c6f9

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.tot_won_amt_opps' = CALCULATE(SUM(ssr_history[opp_booking_amt]), ssr_history[step_outcome]="Closed Won")
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: all_activity_opp
		lineageTag: aefcb349-a92c-4d82-9620-f52f4894a2d7

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.aliasing_label' = CALCULATE(FIRSTNONBLANK(aliasing[label] , "No Such Field")) // needs to be filterd by correct model/field to show the right data
		displayFolder: _opps_detail
		lineageTag: 8c98013f-7ad9-4d95-9803-fab68f0d986e

	measure 'meas.aliasing_label_entity_cust_field_1' = ```
			
			 // needs to be filterd by correct model/field to show the right data
			 CALCULATE(
			    FIRSTNONBLANK(aliasing[alias] , "No Such Field"),
			    aliasing[label] = "entity_crm_custom_value_1"
			) 
			
			```
		displayFolder: _opps_detail
		lineageTag: 31e66117-e09a-465a-aa36-cc86c0c035b6

	measure 'meas.aliasing_labels_cust_field' = ```
			
			 // needs to be filterd by correct model/field to show the right data
			 CALCULATE(
			    FIRSTNONBLANK(aliasing[alias] , "No Such Field")
			) 
			
			```
		displayFolder: _opps_detail
		lineageTag: 7488f5f2-0f7d-4dd8-9e05-83795d7b5d78

	measure 'meas.bucket_num' =
			
			CALCULATE(MAX(ssr_history[entity_qual_bucket_num]))
		displayFolder: _opps_detail
		lineageTag: d965631f-7ded-460a-8f3b-bbbe38be76a9

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.count_greater_than_thresh' = ```
			
			VAR _proba = [meas.ssr_history_leads_probability_of_conversion]
			//this measure helps you filter out small segments of a result so they don't "pollute" the result. Use this is a filter measure and make the condition "greater than 0"
			// first get the current count but remove the groupiing filter context 
			var all_current_val =  CALCULATE(count(ssr_history[_sys_ssr_id]), ssr_history[_sys_ssr_id] <> "abc") // abc is a value that will never exist in the db
			// get the regular count in the current filter context
			var count_current_val = CALCULATE(distinctcount(ssr_history[_sys_ssr_id]), ssr_history[step_name] = "Lead Gen") 
			// see the ration of this value
			var ratio = DIVIDE(count_current_val, all_current_val)
			// set the threshold - in htis case 10%
			var thresh = 0.03
			// determine if the ratio is over the threshhold and resturn o
			var res  = IF(ratio >= thresh, _proba)
			return ratio
			```
		formatString: 0.00
		displayFolder: _opps_detail
		lineageTag: 917b09b5-4797-467b-8e9c-aa746403f86a

	measure 'meas.pipeline_amt' = CALCULATE(SUM(ssr_history[opp_pipeline_amt]), ALLEXCEPT(ssr_history, ssr_history[step_name]))
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _opps_detail
		lineageTag: f42926e9-7ce2-4d5d-b8d6-2cda8d6f8d5e

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.stkhlds_primary_last_act' = MAX(ssr_history[stkhlds_primary_contact_last_eng])
		formatString: General Date
		displayFolder: _opps_detail
		lineageTag: 5633e761-b84d-441f-8234-5b49448288df

	measure 'meas.stkhlds_secondary_last_act' = MAX(ssr_history[stkhlds_secondary_contact_last_eng])
		formatString: General Date
		displayFolder: _opps_detail
		lineageTag: d9858295-bb0b-49ea-9a18-3dd6cd87b4e5

	measure 'meas.test_done.average_duration_hrs' = ROUND(AVERAGE(ssr_history[stkhlds_all_adj_dur])/3600,0)
		displayFolder: _opps_detail
		lineageTag: f70f9a9c-5f8c-49c4-9c83-c6d695328589

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_all_social_media_engagement_rate-test' =
			
			var acts =  [meas.ssr_history_all_meeting_avg_count]
			var eng_acts =  [meas.ssr_history_all_meeting_avg_eng_count]
			var res = DIVIDE(eng_acts, acts, 0)
			RETURN
			acts &"--" & eng_acts & "--" & res
		displayFolder: _activity_analysis
		lineageTag: 42544446-fb91-4004-81b3-b3137a813f7e

	measure 'meas.ssr_history_all_meeting_avg_eng_count' = ```
			
			CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_meeting_eng_count])) 
			```
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: 68ef7f13-172f-400a-a2f7-681b8063abf5

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_social_media_avg_eng_count' =
			
			CALCULATE ( AVERAGE ( ssr_history[stkhlds_all_act_type_social_eng_count] ) )
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: b397b412-43bc-4abd-9ffc-283a88de2a43

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_phone_call_avg_eng_count' =
			
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_call_eng_count]))
			return res
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: 70186316-f3e5-4c04-b718-fce6b72fe2f3

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_email_avg_eng_count' =
			
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_email_eng_count]))  // get all the count of eng email count
			return res
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: d2afda17-43d8-4575-a238-0642bed8b811

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_activity_avg_count' = ```
			
			var res =  CALCULATE(
			    AVERAGE(ssr_history[stkhlds_all_act_count])       // count of all stkhlds act count
			   
			)
			return res
			```
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: de9fa641-e5bb-4d52-8764-64cb8ba3c480

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_all_activity_avg_eng_count' =
			
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_eng_count]))   // get the stkhlds all eng count
			return res
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: eae305c6-e409-468e-832c-a5569b9ff886

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ssr_history_mgmt_rpt_next_step_bucket' = ```
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true )
			
			-- do the agg 
			var res = AVERAGEX(ssr_history, ssr_history[step_next_success_prob]) + 0
			
			return res
			```
		formatString: 0%;-0%;0%
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: 3b6861f7-4986-4376-bff2-8cb8eb387dd1

	measure 'meas.total_opps_count' =
			
			
			var res = CALCULATE(COUNT(ssr_history[entity_opp_id]))         // get the count of the opp id
			
			RETURN
			res
		formatString: #,0
		displayFolder: _opps_detail
		lineageTag: eb95cbcb-143f-4a53-ad9a-8293f2baa010

	measure 'meas.total_won_opps' =
			
			var res = CALCULATE(
			    [meas.total_opps_count],
			    ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} && ssr_history[step_success]=True        // get the opps count filtering with step_name and step_success
			)
			
			RETURN
			res
		formatString: 0
		displayFolder: _opps_detail
		lineageTag: 33d28d21-41f3-43cf-974c-ac8d4e59dab6

	measure 'meas.total_opps_won_amt' =
			
			var res = CALCULATE(
			    SUM(ssr_history[opp_won_amt]),
			    ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} && ssr_history[step_success]=True        // get the opps won amt sum filtering with step_name and step_success
			)
			
			RETURN
			IF(ISBLANK(res), 0, res)
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _opps_detail
		lineageTag: a30215bd-c693-4f72-8cb1-80d6dd761561

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.opps_average_won_amt' =
			
			var res = CALCULATE(
			    AVERAGE(ssr_history[opp_won_amt]),
			    ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} && ssr_history[step_success]=True && ssr_history[opp_won_amt]>0       // get the opps won amt avg filtering with step_name and step_success
			)
			
			RETURN
			res
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _opps_detail
		lineageTag: 3bab8137-58e4-45e5-8801-be7d85ab0560

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_count_sys_doc_id' = COUNT(ssr_history[_sys_doc_id])
		formatString: 0
		displayFolder: _acct_analysis
		lineageTag: f3fe8947-8f66-49a7-85f9-ff3de60b2d5f

	measure 'meas.adj_dur_confidence' = ```
			
			
			VAR _conf =  ROUND([meas.ssr_history_adj_dur_conf]*100,0)           // get the avg of ci time allocation confidence
			
			var _status_ = 
			    IF(
			    _conf >= 0 && _conf <= 49, "Limited",
			        IF(
			            _conf >=50 && _conf <= 74, "Fair",
			            IF(
			                _conf >=75 && _conf <= 84, "Good",
			                IF(
			                    _conf >=85 && _conf <= 94, "Great",
			                    "Excellent"
			                )
			            )
			        )
			)
			
			
			
			RETURN 
			IF(
			    _conf <>0,
			    _status_ & " (" & _conf & ")"  // Convert _conf to integer text format
			)
			```
		displayFolder: _opps_detail
		lineageTag: fb0ed675-10ef-49f1-bad0-809ded7cb87f

	measure 'meas.adj_dur_confidence_status_number' = ```
			
			
			VAR _conf =  ROUND([meas.ssr_history_adj_dur_conf]*100,0)           // get the avg of ci time allocation confidence
			
			var _status_ = 
			    IF(
			    _conf >= 0 && _conf <= 49, 1,
			        IF(
			            _conf >=50 && _conf <= 74, 2,
			            IF(
			                _conf >=75 && _conf <= 84, 3,
			                IF(
			                    _conf >=85 && _conf <= 94, 4,
			                    5
			                )
			            )
			        )
			)
			
			
			
			RETURN 
			IF(
			    _conf <>0,
			    _status_
			)
			```
		formatString: 0
		displayFolder: _opps_detail
		lineageTag: 192a5109-6ff1-4972-aca8-0a67b4f9c146

	measure 'meas.ssr_history_unsuccessful_count' =
			
			[meas.ssr_history_step_count] - [meas.ssr_history_success_count]        // get the unsuccess count
		formatString: 0
		displayFolder: _success_analysis
		lineageTag: 7bc05136-abd0-45d1-a0e1-c1f6587a2164

	measure 'meas.ssr_history_dur_hrs' =
			
			var dur = calculate(sum(ssr_history[stkhlds_all_adj_dur])) / 3600 // turn to hours
			var res  = dur
			return res
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 696590bc-abbd-42c9-a8fe-e73a26bf240d

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_step_post_sales_count' = ```
			
			var res = CALCULATE(
			    count(ssr_history[_sys_doc_id]),
			    ssr_history[step_name]="Post-Sales Support"
			    )
			return res
			
			```
		formatString: 0
		displayFolder: _success_analysis
		lineageTag: d39356fd-98c8-4381-b0f0-9f50c20c8069

	measure 'meas.ssr_history_sel_date_count' = ```
			//*** This is the "earlier" measure sub filtere approach for TS data  - use to get a filter measure and a count only (counts can be used in pie charts etc)
			
			-- function that through multiple steps get the most recent records in a table for each coid and then allow u to do agg ops on it 
			var sel_date = [meas.sel_date] // get the selected date 
			
			//var temp_res =  CALCULATE(COUNT(ssr_history[_sys_doc_id]))
			var temp_tbl = CALCULATETABLE(ssr_history ,  cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and override the end date to include open item,s 
			
			var filter_tbl  =
			FILTER (
			    temp_tbl,
			    ssr_history[_sys_doc_id] = 
			    CALCULATE (
			          MAX ( ssr_history[_sys_doc_id] ),
			        FILTER (
			            all(ssr_history),
			            ssr_history[_sys_ssr_id] = EARLIER ( ssr_history[_sys_ssr_id] ) // this checks all the other values if it is the relevant one
			            &&  ssr_history[_sys_filt_start_date] < sel_date  // this ensures that we exclude anything after the selected date - important!
			        )
			    )
			)
			Var res  = countx(filter_tbl,[_sys_doc_id] )
			RETURN res
			```
		formatString: #,0
		displayFolder: _target_lead_accts
		lineageTag: d0f0b1da-f62d-49f8-8e91-41596a3d27b1

	measure 'meas.ssr_history_sel_date_count2' = ```
			
			//*** This is the summarized table approach fot TS data  - use to get a correct aggreate value for a card etc, not for filtering ***/ 
			
			-- function that through multiple steps get the most recent records in a table for each coid and then allow u to do agg ops on it 
			var sel_date = [meas.sel_date] // get the selected date 
			
			
			var temp_tbl = CALCULATETABLE(ssr_history ,   cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and overrider the end date to include open item,s 
			
			var sum_tbl1 = SUMMARIZE(temp_tbl, [_sys_ssr_id], "count_id", Count([_sys_doc_id]), "max_sys_doc_id", MAX(ssr_history[_sys_doc_id])) // aggregate and get the most recent entry
			
			VAR most_recent_entries = 
			    FILTER(
			        temp_tbl, // use the already filtered table to ensure correct rows
			        ssr_history[_sys_doc_id] IN SELECTCOLUMNS(sum_tbl1, "max_sys_doc_id", [max_sys_doc_id]) // use an in stagtemetn w/ selectcol to filter just those rows
			        )
			        
			    
			
			var res =   COUNTROWS(sum_tbl1) // COUNTX(most_recent_entries, [_sys_doc_id]) // do the agg opes 
			
			RETURN res
			    
			
			```
		formatString: #,0
		displayFolder: _target_lead_accts
		lineageTag: 7f135fcd-534e-40b8-8649-f0514dfd2a36

	measure 'meas.ssr_history_sel_date_most_recent_start_date' = ```
			
			-- function that through multiple steps get the most recent records in a table for each coid and then allow u to do agg ops on it 
			var sel_date = [meas.sel_date] // get the selected date 
			
			//var temp_res =  CALCULATE(COUNT(ssr_history[_sys_doc_id]))
			var temp_tbl = CALCULATETABLE(ssr_history ,  cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and override the end date to include open item,s 
			
			var filter_tbl  =
			FILTER (
			    temp_tbl,
			    
			    
			    ssr_history[_sys_doc_id] = 
			    CALCULATE (
			          MAX ( ssr_history[_sys_doc_id] ),
			        FILTER (
			            all(ssr_history),
			            ssr_history[_sys_ssr_id] = EARLIER ( ssr_history[_sys_ssr_id] ) // this checks all the other values if it is the relevant one
			            &&  ssr_history[_sys_filt_start_date] < sel_date  // this ensures that we exclude anything after the selected date - important!
			        )
			    )
			)
			Var res  = MAXX(filter_tbl,[_sys_filt_start_date] )
			RETURN res
			```
		formatString: General Date
		displayFolder: _target_lead_accts
		lineageTag: 0c8867af-4c9f-46da-9c63-3fe94da06e47

	measure 'meas.ssr_history_sel_date_pipeline_generated' = ```
			
			
			//*** This is the summarized table approach fot TS data  - use to get a correct aggreate value for a card etc, not for filtering ***/ 
			
			-- function that through multiple steps get the most recent records in a table for each coid and then allow u to do agg ops on it 
			var sel_date = [meas.sel_date] // get the selected date 
			
			
			var temp_tbl = CALCULATETABLE(ssr_history ,   cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and overrider the end date to include open item,s 
			
			var sum_tbl1 = SUMMARIZE(temp_tbl, [_sys_ssr_id], "count_id", Count([_sys_doc_id]), "max_sys_doc_id", MAX(ssr_history[_sys_doc_id])) // aggregate and get the most recent entry
			
			VAR most_recent_entries = 
			    FILTER(
			        temp_tbl, // use the already filtered table to ensure correct rows
			        ssr_history[_sys_doc_id] IN SELECTCOLUMNS(sum_tbl1, "max_sys_doc_id", [max_sys_doc_id]) // use an in stagtemetn w/ selectcol to filter just those rows
			        )
			        
			    
			
			var res =   SUMX(most_recent_entries, [opp_pipeline_amt]) // do the agg opes 
			
			RETURN res
			    
			
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _target_lead_accts
		lineageTag: 2283dbde-b306-4a3a-9037-830c1769d50b

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_leads_gen_count' = ```
			
			var _min_date = [meas.context_date_min]
			var _max_date = [meas.context_date_max]
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  _min_date &&  cal_end_dates[Date] <= _max_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl, ssr_history[step_name] = "Lead Gen" )
			
			var res =   COUNTROWS(filt_tbl) // 
			
			RETURN 
			res
			```
		formatString: #,0
		displayFolder: _leads_gen_overview
		lineageTag: 8001268f-1518-4e96-9335-a53a3b432b48

	measure 'meas.ssr_history_avg_act_capt_lvl' =
			
			CALCULATE(
			    AVERAGE(
			        users_history[ci_act_capt_lvl]      // get the average of act_capt_lvl
			    )
			)
		displayFolder: _activity_analysis
		lineageTag: 707404d9-643b-49c8-8e2f-2dcb4a6fab43

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_sales_engineer_success_prob_avg' =
			CALCULATE(
			    AVERAGE(ssr_history[step_success_prob]),
			    users[col.trueai_user_role_coid_aliased] = "Sales Engineer"
			    )
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: 8cd8f9bf-d5cf-4002-bf24-acbfddd7531c

	measure 'meas.ssr_history_not_sales_engineer_success_prob_avg' =
			CALCULATE(
			    AVERAGE(ssr_history[step_success_prob]),
			    users[col.trueai_user_role_coid_aliased] <> "Sales Engineer"
			    )
		formatString: 0%;-0%;0%
		displayFolder: _success_analysis
		lineageTag: d99375ab-b02d-48bc-af07-598bae817ca4

	measure 'meas.ssr_history_mgmt_rpt_leads_gen_conv_rate' = ```
			
			var _min_date = [meas.context_date_min]
			var _max_date = [meas.context_date_max]
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  _min_date &&  cal_end_dates[Date] <= _max_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl, ssr_history[step_name] = "Prospecting" )
			
			var res =   AVERAGEX(filt_tbl, [step_success_prob]) // do the agg opes 
			
			RETURN 
			res+0
			```
		formatString: 0%;-0%;0%
		displayFolder: _leads_gen_overview
		lineageTag: b96478da-6531-474f-b5da-a20f9905e78a

	measure 'meas.ssr_history_avg_next_steps_prob' =
			
			CALCULATE(
			    AVERAGE(
			        ssr_history[step_next_success_prob]
			    ),
			    ssr_history[step_name]="Prospecting"
			)
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: _leads_gen_overview
		lineageTag: a4b63047-f052-4e74-b53f-5c05f8ad6a12

	measure 'meas.ssr_history_target_acct_count' = ```
			
			
			var selected_date = CALCULATE(MAX(cal_start_dates[Date])) // get the max date from cal_start_date
			
			var temp_tbl = CALCULATETABLE(ssr_history ,  cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and override the end date to include open item,s 
			
			var filter_tbl  =
			FILTER (
			    temp_tbl,
			    ssr_history[_sys_doc_id] = 
			    CALCULATE (
			          MAX ( ssr_history[_sys_doc_id] ),
			        FILTER (
			            all(ssr_history),
			            ssr_history[_sys_ssr_id] = EARLIER ( ssr_history[_sys_ssr_id] ) // this checks all the other values if it is the relevant one
			            &&  ssr_history[_sys_filt_start_date] < selected_date  // this ensures that we exclude anything after the selected date - important!
			        )
			    )
			)
			Var res  = countx(filter_tbl,[_sys_doc_id] )
			RETURN res
			```
		formatString: 0
		displayFolder: _target_lead_accts
		lineageTag: 3ed34e54-6f00-468c-bd0b-fca834840ef3

	measure 'meas.ssr_history_success_prob_leadgen_conversion_rate' =
			
			var res  = CALCULATE(
			    [meas.ssr_history_success_prob_avg_prospecting],         // get the lead gen probability of conversion
			    users_history[trueai_user_role_dept]="MKT"
			)
			
			RETURN
			res
		displayFolder: _success_analysis
		lineageTag: a42902f9-5722-4c05-ad17-9e4546486ef6

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_mkt_leads_touched' =
			
			CALCULATE(
			    [meas.ssr_history_leads_touched],
			    users_history[trueai_user_role_dept]="MKT"
			)
		formatString: 0
		displayFolder: _lead_analysis
		lineageTag: 0f57e8c5-88ee-4f81-839f-44476bbec7df

	measure 'meas.ssr_history_generated_pipeline_amt' =
			
			
			var res = CALCULATE(
			    SUM(
			        ssr_history[opp_pipeline_amt]
			    ),
			    ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"}
			)
			
			
			RETURN
			res
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: 67e089eb-5aa0-4f78-b51b-234ec8349fae

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_won_amt_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_won_amt],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_won_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_won_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_won_amt],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_won_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_won_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_won_amt],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_won_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_won_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 8932ec9c-d219-473c-ba67-ec5ea05f6c02

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_won_count' =
			
			
			var res = CALCULATE(
			     COUNT(
			        ssr_history[_sys_doc_id]
			     ),
			     ssr_history[step_success] = true
			)
			
			RETURN
			res
		formatString: 0
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 453ec678-2336-42df-a3df-2bf56893daa1

	measure 'meas.ssr_history_won_count_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_won_count],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_won_count],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_won_count],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_won_count],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_won_count],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_won_count],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_won_count],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_won_count],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_won_count],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 14aa2191-6b60-4a82-842d-4c8e4e7c2e87

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_won_amt_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_won_amt],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_won_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_avg_won_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_won_amt],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_won_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_avg_won_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_won_amt],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_won_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_avg_won_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 4f53316b-caa3-4e0d-b3dc-ce4ba72f12aa

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_won_cycle_days' =
			
			var res = CALCULATE(
			    AVERAGE(
			        ssr_history[step_length_in_days]
			    )
			)
			
			RETURN
			res
		formatString: 0" days"
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 8ee562be-a1a3-49b0-aa48-f7ce714f8329

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_won_cycles_days_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_won_cycle_days],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_won_cycle_days],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_avg_won_cycle_days],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_won_cycle_days],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_won_cycle_days],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_avg_won_cycle_days],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_won_cycle_days],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_won_cycle_days],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_avg_won_cycle_days],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_bookings
		lineageTag: d641cda3-b55c-4e1f-8669-90231de07e11

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_win_rate_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_win_rate],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_win_rate],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_win_rate],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_win_rate],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_win_rate],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_win_rate],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_win_rate],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_win_rate],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_win_rate],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_bookings
		lineageTag: f1ee9e76-b54d-45a2-be70-13855d5e8393

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_win_rate' =
			CALCULATE(
			    DIVIDE([meas.ssr_history_success_count], count(ssr_history[_sys_doc_id]))
			)
		formatString: 0%;-0%;0%
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 6ece012b-d5d8-4957-a271-8359f45eb152

	measure 'meas.ssr_history_avg_pushed_pulled_days' =
			
			var res = AVERAGE( ssr_history[col.days_pushed_pulled] )
			
			RETURN
			res
		formatString: """+""# ""days"";""-""# ""days"";""0 days"""
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 7fabc6da-bdb9-4b7f-a6ec-32112d1e03d4

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_pushed_pulled_days_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_pushed_pulled_days],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_pushed_pulled_days],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_avg_pushed_pulled_days],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_pushed_pulled_days],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_pushed_pulled_days],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_avg_pushed_pulled_days],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_pushed_pulled_days],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_pushed_pulled_days],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_avg_pushed_pulled_days],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 1358e4ea-9141-4e09-ac89-78eabd70676c

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_initial_actual_booking_diff_amt' =
			
			var _initial_amt = CALCULATE(
			    AVERAGE(ssr_history[opp_initial_amt])     // get the initial amount for the specified step
			)
			
			var _actual_amt = CALCULATE(
			    AVERAGE(
			        ssr_history[opp_won_amt]        // get the won amount for the specified step
			    )
			)
			
			var res = (_initial_amt - _actual_amt)
			
			RETURN
			res
		formatString: """+""$#,##0;""-""$#,##0;""$0"""
		displayFolder: _mgmt_rpt_bookings
		lineageTag: c9dc721c-30f5-4429-8949-7fa80ded136c

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_avg_initial_actual_amt_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_initial_actual_booking_diff_amt],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_initial_actual_booking_diff_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_avg_initial_actual_booking_diff_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_initial_actual_booking_diff_amt],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_initial_actual_booking_diff_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_avg_initial_actual_booking_diff_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_avg_initial_actual_booking_diff_amt],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_avg_initial_actual_booking_diff_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_avg_initial_actual_booking_diff_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_bookings
		lineageTag: 0c1818e9-ca78-49da-91b5-a8f481d9d19e

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.users_overview_avg_pred_conv_rate' =
			
			
			-- apply addl. filters for sales steps
			var filt_tbl = Filter(ssr_history, ssr_history[step_name] in { "New Logo Selling","Post-Sales Support","Prospecting","Existing Customer Selling"} )
			
			var res = CALCULATE(
			    AVERAGEX(
			        filt_tbl,
			        ssr_history[step_success_prob]
			    )
			)
			
			RETURN res+0
		formatString: 0%;-0%;0%
		displayFolder: _active_user_overview
		lineageTag: f7e0c22a-1076-4599-b3d0-e5cc74c4084d

	measure 'meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep' = ```
			
			
			var reps = [meas.ssr_history_reps]
			
			-- apply filters  for New Logo Selling and Existing Customer Selling
			var filt_tbl = Filter(ssr_history,  ssr_history[step_success] = true && ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} )
			
			-- do the agg 
			var total_amt = SUMX(filt_tbl, ssr_history[opp_won_amt]) +0             // get the sum of opp_pipeline_amt
			
			var res = DIVIDE(total_amt, reps, 0)
			
			RETURN
			res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _active_user_overview
		lineageTag: 9e268b72-f19d-41b0-b4e4-396e3a6aa061

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.users_overview_win_rate' = ```
			
			
			-- apply  filters by sales steps
			var success_filt_tbl = Filter(ssr_history,  ssr_history[step_success] = true && ssr_history[step_name] in{"Existing Customer Selling", "New Logo Selling"} ) // filter table for success steps
			
			var total_filt_tbl = Filter(ssr_history,  ssr_history[step_name] in{"Existing Customer Selling", "New Logo Selling"} )  // filter the table for total steps
			
			var total_steps = CALCULATE( 
			    COUNTX(
			        total_filt_tbl,
			        ssr_history[_sys_doc_id]
			    )
			)
			
			var success_steps  = CALCULATE(
			    COUNTX(
			        success_filt_tbl,
			        ssr_history[_sys_doc_id]
			    )
			)
			var res = DIVIDE(success_steps, total_steps, BLANK())
			return res+0
			```
		formatString: 0%;-0%;0%
		displayFolder: _active_user_overview
		lineageTag: abddc77e-11e4-4877-8451-332cc2d767ef

	measure 'meas.ssr_history_mgmt_pipeline_amt_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_amt],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_amt],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_amt],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _active_user_overview
		lineageTag: 44a70a1f-9529-4a6b-8f2f-be28bd126a8e

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_pipeline_amt' = ```
			
			var reps = CALCULATE(
			    [meas.ssr_history_reps]
			)
			
			var _total_pipeline_amt = CALCULATE(
			    SUM(
			        ssr_history[opp_pipeline_amt]
			    ),              // getbthe pipeline amt for specified step name 
			    ssr_history[step_success] = true && ssr_history[step_name] in{"Prospecting", "Post-Sales Support"}
			)
			
			var res = DIVIDE(_total_pipeline_amt, reps)
			
			RETURN
			res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _active_user_overview
		lineageTag: 947ac157-1e2d-42ed-b9e5-a6429c5a4816

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.users_overview_avg_pred_conv_rate_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.users_overview_avg_pred_conv_rate],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.users_overview_avg_pred_conv_rate],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.users_overview_avg_pred_conv_rate],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.users_overview_avg_pred_conv_rate],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.users_overview_avg_pred_conv_rate],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.users_overview_avg_pred_conv_rate],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.users_overview_avg_pred_conv_rate],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.users_overview_avg_pred_conv_rate],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.users_overview_avg_pred_conv_rate],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _active_user_overview
		lineageTag: 1b4bf16c-1b06-4e00-9b3b-0550d66ba942

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_avg_won_amt_per_rep_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_mgmt_rpt_avg_won_amt_per_rep],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _active_user_overview
		lineageTag: 63b83f83-1b8c-454e-857c-f54a687b0480

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.users_overview_win_rate_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.users_overview_win_rate],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.users_overview_win_rate],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.users_overview_win_rate],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.users_overview_win_rate],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.users_overview_win_rate],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.users_overview_win_rate],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.users_overview_win_rate],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.users_overview_win_rate],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.users_overview_win_rate],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _active_user_overview
		lineageTag: 834c633b-8a83-4de8-b59c-83eb0c1a9cd4

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_leads_gen_count' = ```
			
			-- apply  filters
			var filt_tbl = Filter(ssr_history, ssr_history[step_name] = "Lead Gen" )
			
			var res = COUNTROWS(filt_tbl)
			
			RETURN 
			res+0
			```
		formatString: #,0
		displayFolder: _leads_gen_overview
		lineageTag: a1ebf9d9-e873-4003-8ba0-c77ceb9a3141

	measure 'meas.ssr_history_mgmt_leads_gen_time' = ```
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(
			    ssr , 
			    ssr_history[step_name]="Lead Gen"
			)
			
			var res = CALCULATE(
			    AVERAGEX(
			        dates_tbl,
			        ssr[col.trueai_time_to_touch_days]      // get the avg days of of first touch
			    )
			)
			
			RETURN 
			res+0
			```
		formatString: #,##0.00" days"
		displayFolder: _leads_gen_overview
		lineageTag: 6a6633e4-2e0d-49f2-b89d-24102a418513

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_leads_gen_conv_rate' = ```
			
			
			var lead_gen_tbl = CALCULATETABLE(
			    ssr_history,
			    ssr_history[step_name] = "Lead Gen"
			)  // all the applicable lead gen steps 
			
			var lead_gen_tbl_prosp_conv_prob = ADDCOLUMNS(
			    lead_gen_tbl, 
			    "prospecting_step_success_prob", AVERAGEX(
			            filter(
			                All(
			                    ssr_history
			                ), 
			            [step_name] = "Prospecting" && [_sys_ssr_id] =  EARLIER([_sys_ssr_id])
			        ),
			        [step_success_prob]
			    )
			)  
			
			var res = AVERAGEX(lead_gen_tbl_prosp_conv_prob, [prospecting_step_success_prob]) // read the prospecting vale 
			
			RETURN 
			res+0
			```
		formatString: 0%;-0%;0%
		displayFolder: _leads_gen_overview
		lineageTag: 3f0e5e89-25f4-4d57-bab8-a46e1fe523c6

	measure 'meas.ssr_history_mgmt_leads_gen_count_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_leads_gen_count],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_leads_gen_count],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_mgmt_leads_gen_count],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_leads_gen_count],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_leads_gen_count],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_mgmt_leads_gen_count],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_leads_gen_count],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_leads_gen_count],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_mgmt_leads_gen_count],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _leads_gen_overview
		lineageTag: 49144e52-9d33-4e9f-b40c-44d5ba40f14f

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_leads_gen_time_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_leads_gen_time],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_leads_gen_time],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_mgmt_leads_gen_time],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_leads_gen_time],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_leads_gen_time],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_mgmt_leads_gen_time],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_leads_gen_time],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_leads_gen_time],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_mgmt_leads_gen_time],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _leads_gen_overview
		lineageTag: 1f6f2f10-7a30-4aad-bd47-5c1d6e072f9f

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_leads_gen_conv_rate_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_leads_gen_conv_rate],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_leads_gen_conv_rate],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_mgmt_leads_gen_conv_rate],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_leads_gen_conv_rate],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_leads_gen_conv_rate],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_mgmt_leads_gen_conv_rate],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_leads_gen_conv_rate],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_leads_gen_conv_rate],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_mgmt_leads_gen_conv_rate],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _leads_gen_overview
		lineageTag: 2bbd794e-9d48-42c8-a06a-edfca60a9505

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_pipeline_count' = ```
			
			
			-- apply filters
			var filt_tbl = Filter(ssr_history,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = COUNTX(filt_tbl, ssr_history[_sys_doc_id]) +0
			
			RETURN
			res
			```
		formatString: #,0
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: 46f28780-cb41-4b19-8195-d636264e1b41

	measure 'meas.ssr_history_mgmt_pipeline_avg_amt' = ```
			
			
			-- apply  filters
			var filt_tbl = Filter(ssr_history,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = AVERAGEX(filt_tbl, ssr_history[opp_pipeline_amt]) + 0
			
			return res
			
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: 3d503d54-9f6a-4821-8a4f-4d8349e5a875

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_pipeline_avg_win_prob' = ```
			
			-- apply  filters
			var filt_tbl = Filter(ssr_history,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = AVERAGEX(filt_tbl, ssr_history[step_next_success_prob]) + 0
			
			return res
			
			```
		formatString: 0%;-0%;0%
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: f3086207-b0d9-40b2-9026-abb6d73e96d4

	measure 'meas.ssr_history_mgmt_expected_win_amt' = ```
			
			
			-- apply filters
			var filt_tbl = Filter(ssr_history,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt] *   ssr_history[step_next_success_prob]) + 0
			
			return res
			
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: 10bfa9d0-6c51-43a1-a088-287c767ffe25

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_generated_pipeline_amt_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_generated_pipeline_amt],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_generated_pipeline_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_generated_pipeline_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_generated_pipeline_amt],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_generated_pipeline_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_generated_pipeline_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_generated_pipeline_amt],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_generated_pipeline_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_generated_pipeline_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: 1c961bb6-9ed8-43db-83e4-57d57ddb80c9

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_pipeline_count_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_count],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_count],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_count],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_count],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_count],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_count],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_count],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_count],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_count],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: 4b70a632-a941-41cf-9595-a83fe97f3289

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_pipeline_avg_amt_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_avg_amt],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_avg_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_avg_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_avg_amt],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_avg_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_avg_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_avg_amt],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_avg_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_avg_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: 6785854b-d951-4d51-b0e4-10df911cd9aa

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_pipeline_avg_win_prob_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_avg_win_prob],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_avg_win_prob],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_avg_win_prob],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_avg_win_prob],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_avg_win_prob],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_avg_win_prob],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_pipeline_avg_win_prob],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_pipeline_avg_win_prob],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_mgmt_pipeline_avg_win_prob],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: bd78424d-d6e2-49a0-9c32-a3aeb4f13792

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_expected_win_amt_diff' = ```
			
			
			var _selected_item = SELECTEDVALUE(time_intelligence[filt_item])
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)
			
			-- get data for overridden date periods but still contextual
			var mtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_expected_win_amt],cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_expected_win_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // mtd calculation
			    CALCULATE([meas.ssr_history_mgmt_expected_win_amt],cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var qtd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_expected_win_amt],cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_expected_win_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),          // qtd calculation
			    CALCULATE([meas.ssr_history_mgmt_expected_win_amt],cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var ytd_delta =DIVIDE(
			    (
			      CALCULATE([meas.ssr_history_mgmt_expected_win_amt],cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date) - CALCULATE([meas.ssr_history_mgmt_expected_win_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			    ),      // ytd calculation
			    CALCULATE([meas.ssr_history_mgmt_expected_win_amt],cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			)
			
			var res = IF(
			    _selected_item="MTD", 
			    mtd_delta,
			    IF(
			        _selected_item="QTD",
			        qtd_delta,
			        IF(
			            _selected_item="YTD",
			            ytd_delta
			        )
			    )
			)
			
			
			RETURN
			res
			```
		formatString: +0%;-0%;"-"
		displayFolder: _mgmt_rpt_pipeline_gen
		lineageTag: ed4f51fa-9e56-468f-aef7-989b68bec8fa

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_new_logo_existing_customer_pipeline_amt' = ```
			
			var _step = SELECTEDVALUE(ssr_history[step_name])
			var _prospect_amt = CALCULATE(
			        SUM(ssr_history[opp_pipeline_amt]),
			        ssr_history[step_name] = "Prospecting",
			        ALLSELECTED(ssr_history),  // Ignores filters on ssr_history
			        TREATAS(VALUES(cal_end_dates[Date]), ssr_history[_sys_filt_end_date]) // Apply date slicer filter
			    )
			
			
			var _post_amt =CALCULATE(
			        SUM(ssr_history[opp_pipeline_amt]),
			        ssr_history[step_name] = "Post-Sales Support",
			        ALLSELECTED(ssr_history) , // Ignores filters on ssr_history,
			        TREATAS(VALUES(cal_end_dates[Date]), ssr_history[_sys_filt_end_date]) // Apply date slicer filter
			    )
			
			
			var total = _prospect_amt+_post_amt
			 
			 var res = IF(
			    _step="New Logo Selling", _prospect_amt,
			    IF(
			        _step ="Existing Customer Selling",
			        _post_amt,
			        total
			    )
			 )
			
			RETURN 
			res
			```
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _pipeline_analysis
		lineageTag: 57409f25-c7cc-4c47-a658-b68f51a9022d

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_first_touched_days' = ```
			
			
			var _max_date = CALCULATE(MAX(cal_start_dates[Date]))   /// get the context current max date
			var _first_touched_date = [meas.ssr_open_leads_accts_first_touch_date]         // get the first touch date
			
			var _first_touch = DATEDIFF(_first_touched_date, _max_date, DAY)            // get the diff in days 
			
			VAR _res_first = IF(
			    _first_touch <= 0,
			    "-",
			    _first_touch & " Days"              // concate day strings
			)
			
			RETURN
			_res_first
			```
		displayFolder: target_screen
		lineageTag: 208e4fa0-fc70-4e2d-bc89-7ad2192e8f2f

	measure 'meas.ssr_history_cal_end_sel_date_count' = ```
			//*** This is the "earlier" measure sub filtere approach for TS data  - use to get a filter measure and a count only (counts can be used in pie charts etc)
			
			-- function that through multiple steps get the most recent records in a table for each coid and then allow u to do agg ops on it 
			var sel_date = [meas.cal_end_sel_date] // get the selected date 
			
			//var temp_res =  CALCULATE(COUNT(ssr_history[_sys_doc_id]))
			var temp_tbl = CALCULATETABLE(ssr_history ,  cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and override the end date to include open item,s 
			
			var filter_tbl  =
			FILTER (
			    temp_tbl,
			    ssr_history[_sys_doc_id] = 
			    CALCULATE (
			          MAX ( ssr_history[_sys_doc_id] ),
			        FILTER (
			            all(ssr_history),
			            ssr_history[_sys_ssr_id] = EARLIER ( ssr_history[_sys_ssr_id] ) // this checks all the other values if it is the relevant one
			            &&  ssr_history[_sys_filt_start_date] < sel_date  // this ensures that we exclude anything after the selected date - important!
			        )
			    )
			)
			Var res  = countx(filter_tbl,[_sys_doc_id] )
			RETURN res
			```
		formatString: 0
		displayFolder: _target_lead_accts
		lineageTag: e03645a5-245a-427c-a397-b575f792d1f7

	measure 'meas.ssr_total_open_leads_count' = ```
			
			var sel_date = [meas.sel_date] // get the selected date 
			
			var temp_tbl = CALCULATETABLE(
			        ssr_history ,   
			        cal_end_dates[Date] <= date(2100,1,1)  // start by filtering the table to the appropriate period and overrider the end date to include open item
			    )
			var rpt_tbl = FILTER(
			    temp_tbl,
			    ssr_history[step_outcome] in {"Abandoned", "Ignored", "Prospecting", "Untouched"} && ssr_history[_sys_filt_start_date] <= sel_date
			)
			
			var sum_tbl1 = SUMMARIZE(
			    rpt_tbl, 
			    [_sys_ssr_id], 
			    "count_id", Count([_sys_doc_id]), 
			    "max_sys_doc_id", MAX(ssr_history[_sys_doc_id]) // aggregate and get the most recent entry
			)
			
			VAR most_recent_entries = 
			    FILTER(
			        rpt_tbl, // use the already filtered table to ensure correct rows
			        ssr_history[_sys_doc_id] IN SELECTCOLUMNS(sum_tbl1, "max_sys_doc_id", [max_sys_doc_id]) // use an in statement w/ selectcol to filter just those rows
			        )
			        
			    
			
			var res =   COUNTROWS(sum_tbl1) // COUNTX(most_recent_entries, [_sys_doc_id]) // do the agg opes 
			
			RETURN
			res
			```
		formatString: #,0
		displayFolder: _open_leads_accts
		lineageTag: f4979eb1-f10c-4d39-9c30-e280bbdaaca6

	measure 'meas.ssr_history_target_screen_step_outcome' =
			
			CALCULATE(
			    MAX(ssr_history[step_outcome]),
			    NOT ISBLANK(ssr_history[step_outcome])
			)
		displayFolder: _target_lead_accts
		lineageTag: 29779653-5bed-4ee8-8ca2-be6aa365bece

	measure 'meas.ssr_total_untouched_leads_count' =
			
			VAR sel_date = CALCULATE(MAX(cal_start_dates[Date])) // Get selected date
			VAR _ssr_doc_id = MAX(ssr[_sys_doc_id]) // Get current SSR doc ID
			
			var _rep_tbl = FILTER (
			        ssr_history,
			        ssr_history[_sys_filt_end_date] <= sel_date &&        // Filter ssr_history based on selected doc_id and date conditions
			        ssr_history[step_outcome]="Untouched" //{"Abandoned", "Disqualified","Ignored", "Prospecting", "Untouched"}
			    )
			
			
			VAR res =
			    COUNTX(
			        _rep_tbl,
			        ssr_history[_sys_ssr_id]               // Get the lead count
			    )
			
			RETURN
			res
		formatString: #,0
		displayFolder: _open_leads_accts
		lineageTag: 1e65b6ae-0254-4b68-8b0d-ec038635a61f

	measure meas_ssr_history_target_outcome =
			
			VAR sel_date = CALCULATE(MAX(cal_start_dates[Date])) // Get selected date
			VAR _ssr_doc_id = MAX(ssr[_sys_doc_id]) // Get current SSR doc ID
			
			var _rep_tbl = FILTER (
			        ALL(ssr_history),
			        ssr_history[_sys_ssr_id] = _ssr_doc_id &&
			        ssr_history[_sys_filt_end_date] <= sel_date &&        // Filter ssr_history based on selected doc_id and date conditions
			        NOT(ISBLANK(ssr_history[step_outcome]))
			    )
			
			
			VAR res =
			    MAXX(
			        TOPN(1, _rep_tbl, [step_end_date], DESC),
			        ssr_history[step_outcome]               // Get the latest step_outcome by selecting the most recent step_end_date
			    )
			
			RETURN
			res
		displayFolder: _open_leads_accts
		lineageTag: 730578f6-2f84-46c5-9ed5-835194201952

	measure 'meas.ssr_history_owner_full_name' =
			
			Var res  = MAXX(ssr_history,[col.step_owner_full_name] )
			RETURN res
		displayFolder: _open_leads_accts
		lineageTag: 4c4d4b73-9237-48b0-adc9-f101b9e7f92f

	measure 'meas.ssr_history_owner_group' =
			
			
			Var res  = MAXX(ssr_history,[col.step_owner_group] )
			RETURN res
		displayFolder: _open_leads_accts
		lineageTag: 360cc37b-831e-4263-9847-c3ca2c3c4bf9

	measure 'meas.ssr_open_leads_accts_name' =
			
			
			Var res  = maxx(ssr,[crm_name] )
			RETURN res
		displayFolder: _open_leads_accts
		lineageTag: 1fc30d0c-db1b-4fc2-87e1-b55baf82df97

	measure 'meas.ssr_open_leads_accts_added_date' =
			
			
			Var res  = maxx(ssr,[trueai_added_on] )
			RETURN res
		formatString: Short Date
		displayFolder: _open_leads_accts
		lineageTag: b819bafd-913c-418a-91a8-25de3ee38abc

	measure 'meas.ssr_open_leads_accts_first_touch_date' =
			
			Var res  = maxx(ssr,[trueai_first_touch] )
			RETURN res
		formatString: Short Date
		displayFolder: _open_leads_accts
		lineageTag: 963499f2-ce01-4507-880d-cb88a786a91b

	measure 'meas.ssr_history_open_leads_accts_stkhlds_contact_count' =
			
			Var res  = sumx(ssr_history,[stkhlds_all_contacts_count] )
			RETURN res
		formatString: 0
		displayFolder: _open_leads_accts
		lineageTag: c4c82bcc-5a44-47f9-bb14-ec8477b3b09d

	measure 'meas.ssr_open_trueai_industry' =
			
			
			Var res  = maxx(ssr,[trueai_industry] )
			RETURN res
		displayFolder: _open_leads_accts
		lineageTag: 60e78da7-d4a5-4737-844b-750d1a7b4ccb

	measure 'meas.ssr_open_lead_crm_leadsource' =
			
			
			Var res  = maxx(ssr,ssr[col.crm_leadsource] )
			RETURN res
		displayFolder: _open_leads_accts
		lineageTag: 9beb15fb-7ae2-4789-a021-4a727a05f520

	measure 'meas.ssr_history_open_leads_accts_quality_bucket' =
			
			
			Var res  = MAXX(ssr_history,[entity_qual_bucket] )
			RETURN res
		displayFolder: _open_leads_accts
		lineageTag: 7d05afad-3502-4379-b5d8-ca264bfa2aa2

	measure 'meas.ssr_history_open_leads_accts_stkhlds_act_count' =
			
			Var res  = sumx(ssr_history,[stkhlds_all_act_count] )
			RETURN res
		formatString: 0
		displayFolder: _open_leads_accts
		lineageTag: 8cdafc75-09c4-4c35-8ed4-e2928a855eee

	measure 'meas.ssr_open_leads_count' = ```
			
			var sel_date = [meas.sel_date] // get the selected date 
			
			//var temp_res =  CALCULATE(COUNT(ssr_history[_sys_doc_id]))
			var temp_tbl = CALCULATETABLE(ssr_history ,  cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and override the end date to include open item,s 
			
			var filter_tbl  =
			FILTER (
			    temp_tbl,
			    ssr_history[_sys_doc_id] = 
			    CALCULATE (
			          MAX ( ssr_history[_sys_doc_id] ),
			        FILTER (
			            all(ssr_history),
			            ssr_history[_sys_ssr_id] = EARLIER ( ssr_history[_sys_ssr_id] ) // this checks all the other values if it is the relevant one
			            &&  ssr_history[_sys_filt_start_date] < sel_date  // this ensures that we exclude anything after the selected date - important!
			        )
			    )
			)
			Var res  = countx(filter_tbl,[_sys_doc_id] )
			RETURN res
			```
		formatString: #,0
		displayFolder: _open_leads_accts
		lineageTag: 80e09817-0bc2-4a85-930f-4c9eef2d4d1c

	measure 'meas.ssr_history_open_lead_accts_last_act' =
			
			
			Var res  = MAXX(ssr_history,[stkhlds_all_last_act] )
			RETURN res
		formatString: General Date
		displayFolder: _open_leads_accts
		lineageTag: b61c7d59-f71d-4fae-8c71-0cd265fe9882

	measure 'meas.ssr_history_open_leads_accts_total_dur' =
			
			
			Var res  = sumx(ssr_history,[stkhlds_all_dur] )
			RETURN res/3600
		formatString: #,##0.0" hrs"
		displayFolder: _open_leads_accts
		lineageTag: b1b5bf2a-cde3-4434-81e8-c19c8ef44579

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_open_leads_accts_engagement_rate' =
			
			
			Var _all_act  = AVERAGEX(ssr_history,[stkhlds_all_act_count] )
			VAR _eng_count = AVERAGEX(ssr_history,[stkhlds_all_act_eng_count])
			var _eng_rate = DIVIDE(_eng_count,_all_act,0)
			
			
			RETURN
			// SWITCH(
			//     TRUE(),
			//     ISBLANK(_eng_rate), "NA",
			//     _eng_rate <= 0.03, "Low",
			//     _eng_rate > 0.03 && _eng_rate <= 0.10, "Fair",
			//     _eng_rate > 0.10 && _eng_rate <= 0.20, "Good",
			//     _eng_rate > 0.20, "Great",
			//     "Other"
			// )
			_eng_rate
		formatString: 0.0%;-0.0%;0.0%
		displayFolder: _open_leads_accts
		lineageTag: 3c76e17e-7680-484a-9bb4-05c1eca1c1b8

	measure 'meas.ssr_open_leads_accts_potential_acv' = ```
			
			
			var sel_date = [meas.sel_date] // get the selected date 
			
			var temp_tbl = CALCULATETABLE(ssr ,  cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and override the end date to include open item,s 
			
			var filter_tbl  =
			FILTER (
			    temp_tbl,
			    ssr[_sys_doc_id] = 
			    CALCULATE (
			          MAX ( ssr[_sys_doc_id] ),
			        FILTER (
			            all(ssr),
			            ssr[_sys_doc_id] = EARLIER ( ssr[_sys_doc_id] ) // this checks all the other values if it is the relevant one
			            &&  ssr[_sys_filt_start_date] < sel_date  // this ensures that we exclude anything after the selected date - important!
			        )
			    )
			)
			Var res  = SUMX(filter_tbl,[trueai_potential_acv] )
			RETURN res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _open_leads_accts
		lineageTag: 22040254-e366-48a7-b293-1590798036d4

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.step_outcome' = ```
			
			VAR sel_date = CALCULATE(MAX(cal_start_dates[Date]))
			VAR res = 
			    CALCULATE (
			        MAX(ssr_history[step_outcome])
			    )
			RETURN
			res
			
			```
		displayFolder: _open_leads_accts
		lineageTag: ac603405-e027-4212-8988-545c81572504

	measure meas_ssr_total_prospecting_open_leads =
			
			VAR sel_date = CALCULATE(MAX(cal_start_dates[Date])) // Get selected date
			VAR _ssr_doc_id = MAX(ssr[_sys_doc_id]) // Get current SSR doc ID
			
			var _rep_tbl = FILTER (
			        ssr_history,
			        ssr_history[_sys_filt_end_date] <= sel_date &&        // Filter ssr_history based on selected doc_id and date conditions
			        ssr_history[step_outcome]="Prospecting" //{"Abandoned", "Disqualified","Ignored", "Prospecting", "Untouched"}
			    )
			
			
			VAR res =
			    COUNTX(
			        _rep_tbl,
			        ssr_history[_sys_ssr_id]               // Get the lead count
			    )
			
			RETURN
			res
		formatString: #,0
		displayFolder: _open_leads_accts
		lineageTag: 963e3c75-c198-413c-ae1e-9c1a0dea7da1

	measure 'meas.ssr_total_ignored_leads_count' =
			
			VAR sel_date = CALCULATE(MAX(cal_start_dates[Date])) // Get selected date
			VAR _ssr_doc_id = MAX(ssr[_sys_doc_id]) // Get current SSR doc ID
			
			var _rep_tbl = FILTER (
			        ssr_history,
			        ssr_history[_sys_filt_end_date] <= sel_date &&        // Filter ssr_history based on selected doc_id and date conditions
			        ssr_history[step_outcome]="Ignored" //{"Abandoned", "Disqualified","Ignored", "Prospecting", "Untouched"}
			    )
			
			
			VAR res =
			    COUNTX(
			        _rep_tbl,
			        ssr_history[_sys_ssr_id]               // Get the lead count
			    )
			
			RETURN
			res
		formatString: #,0
		displayFolder: _open_leads_accts
		lineageTag: 5503d2b3-03df-4abd-8180-e83421ae7dcc

	measure 'meas.ssr_total_abandoned_leads_count' =
			
			VAR sel_date = CALCULATE(MAX(cal_start_dates[Date])) // Get selected date
			VAR _ssr_doc_id = MAX(ssr[_sys_doc_id]) // Get current SSR doc ID
			
			var _rep_tbl = FILTER (
			        ssr_history,
			        ssr_history[_sys_filt_end_date] <= sel_date &&        // Filter ssr_history based on selected doc_id and date conditions
			        ssr_history[step_outcome]="Abandoned" //{"Abandoned", "Disqualified","Ignored", "Prospecting", "Untouched"}
			    )
			
			
			VAR res =
			    COUNTX(
			        _rep_tbl,
			        ssr_history[_sys_ssr_id]               // Get the lead count
			    )
			
			RETURN
			res
		formatString: #,0
		displayFolder: _open_leads_accts
		lineageTag: 13998ff3-2b6b-4968-b840-3912e3084fe0

	measure 'meas.ssr_open_leads_avg_prediction_conv_rate' = ```
			
			var sel_date = [meas.sel_date] // get the selected date 
			
			var temp_tbl = CALCULATETABLE(
			        ssr_history ,   
			        cal_end_dates[Date] <= date(2100,1,1)  // start by filtering the table to the appropriate period and overrider the end date to include open item
			    )
			
			var sum_tbl1 = SUMMARIZE(
			    temp_tbl, 
			    [_sys_ssr_id], 
			    "count_id", Count([_sys_doc_id]), 
			    "max_sys_doc_id", MAX(ssr_history[_sys_doc_id]) // aggregate and get the most recent entry
			)
			
			VAR most_recent_entries = 
			    FILTER(
			        temp_tbl, // use the already filtered table to ensure correct rows
			        ssr_history[_sys_doc_id] IN SELECTCOLUMNS(sum_tbl1, "max_sys_doc_id", [max_sys_doc_id]) // use an in statement w/ selectcol to filter just those rows
			        )
			        
			    
			
			var res =   AVERAGEX(sum_tbl1, [meas.ssr_trueai_conversion_rate]) // COUNTX(most_recent_entries, [_sys_doc_id]) // do the agg opes 
			
			RETURN
			res
			```
		displayFolder: _open_leads_accts
		lineageTag: da358a02-e3fe-445d-8483-a589c726d211

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.filter_cal_start_dates_with_end_date' =
			
			VAR _maxEndDate = CALCULATE(MAX(cal_end_dates[Date]))
			RETURN
			IF (
			    MAX(cal_start_dates[Date]) = _maxEndDate,
			    1,
			    0
			)
		formatString: 0
		displayFolder: _open_leads_accts
		lineageTag: bdbf064e-ddb8-4d26-a7cd-5e77f7290fe0

	measure 'meas.ssr_history_sel_date_count3' = ```
			//*** This is the "earlier" measure sub filtere approach for TS data  - use to get a filter measure and a count only (counts can be used in pie charts etc)
			
			-- function that through multiple steps get the most recent records in a table for each coid and then allow u to do agg ops on it 
			var sel_date = [meas.sel_date] // get the selected date 
			
			//var temp_res =  CALCULATE(COUNT(ssr_history[_sys_doc_id]))
			var temp_tbl = CALCULATETABLE(ssr_history ,  cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and override the end date to include open item,s 
			
			var filter_tbl  =
			FILTER (
			    temp_tbl,
			    ssr_history[_sys_doc_id] = 
			    CALCULATE (
			          MAX ( ssr_history[_sys_doc_id] ),
			        FILTER (
			            all(ssr_history),
			            ssr_history[_sys_ssr_id] = EARLIER ( ssr_history[_sys_ssr_id] ) // this checks all the other values if it is the relevant one
			            &&  ssr_history[step_end_date] < sel_date  // this ensures that we exclude anything after the selected date - important!
			        )
			    )
			)
			Var res  = countx(filter_tbl,[_sys_doc_id] )
			RETURN res
			```
		formatString: 0
		displayFolder: _target_lead_accts
		lineageTag: f721048f-6588-4e47-bdfd-ca902de01d51

	measure 'meas.ssr_history_sel_date_card_count' = ```
			
			var sel_date = [meas.sel_date] // get the selected date 
			
			var temp_tbl = CALCULATETABLE(ssr_history ,  cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and override the end date to include open item,s 
			
			var filter_tbl  =
			FILTER (
			    temp_tbl,
			    ssr_history[_sys_doc_id] = 
			    CALCULATE (
			          MAX ( ssr_history[_sys_doc_id] ),
			        FILTER (
			            all(ssr_history),
			            ssr_history[_sys_ssr_id] = EARLIER ( ssr_history[_sys_ssr_id] ) // this checks all the other values if it is the relevant one
			            &&  ssr_history[step_end_date] < sel_date  // this ensures that we exclude anything after the selected date - important!
			        )
			        
			    )
			)
			Var res  = countx(filter_tbl,[_sys_doc_id] )
			RETURN res
			```
		formatString: #,0
		displayFolder: _target_lead_accts
		lineageTag: db4d5539-7ec5-4440-b38e-5f4551beeb2c

	measure 'meas.ssr_history_leads_accts_engagement_rate' = ```
			
			var _eng_rate =  [meas.ssr_history_open_leads_accts_engagement_rate]
			
			RETURN
			SWITCH(
			    TRUE(),
			    ISBLANK(_eng_rate), "NA",
			    _eng_rate <= 0.03, "Low",
			    _eng_rate > 0.03 && _eng_rate <= 0.10, "Fair",
			    _eng_rate > 0.10 && _eng_rate <= 0.20, "Good",
			    _eng_rate > 0.20, "Great",
			    "Other"
			)
			
			```
		displayFolder: _open_leads_accts
		lineageTag: f9e795ec-3481-4571-b528-0cd360340c42

	measure 'meas.ssr_history_sel_date_count4' = ```
			//*** This is the "earlier" measure sub filtere approach for TS data  - use to get a filter measure and a count only (counts can be used in pie charts etc)
			
			-- function that through multiple steps get the most recent records in a table for each coid and then allow u to do agg ops on it 
			var sel_date = [meas.sel_date] // get the selected date 
			
			//var temp_res =  CALCULATE(COUNT(ssr_history[_sys_doc_id]))
			var temp_tbl = CALCULATETABLE(ssr_history ,  cal_end_dates[Date] <= date(2100,1,1) ) // start by filtering the table to the appropriate period and override the end date to include open item,s 
			
			var filter_tbl  =
			FILTER (
			    temp_tbl,
			    ssr_history[_sys_doc_id] = 
			    CALCULATE (
			          MAX ( ssr_history[_sys_doc_id] ),
			        FILTER (
			            all(ssr_history),
			            ssr_history[_sys_ssr_id] = EARLIER ( ssr_history[_sys_ssr_id] ) // this checks all the other values if it is the relevant one
			            &&  ssr_history[step_end_date] < sel_date &&  ssr_history[_sys_filt_start_date] < sel_date  // this ensures that we exclude anything after the selected date - important!  this measure is doing both step outcome and trueai added on date filtering 
			        )
			    )
			)
			Var res  = countx(filter_tbl,[_sys_doc_id] )
			RETURN res
			```
		formatString: #,0
		displayFolder: _target_lead_accts
		lineageTag: f9b5da60-b426-455d-8332-f80577a4327b

	measure 'meas.ssr_leads_time_to_touch_days' =
			
			var _days_num = CALCULATE(MAX(ssr[col.trueai_time_to_touch_days]))
			
			RETURN
			_days_num
		formatString: #,##0.0" Days"
		displayFolder: _open_leads_accts
		lineageTag: 94a54b88-c6ef-416f-bebd-e8ea48d0d2fa

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.open_leads_tbl_title' =
			
			var _date = FORMAT([meas.sel_date], "MM/dd/yyyy")           // get the formatted date
			var _str = "Target Leads & Accounts "              // table title text
			
			 var res = _str & _date
			
			RETURN
			res
		displayFolder: _open_leads_accts
		lineageTag: e72485d4-493c-46db-867c-a861ea1ff257

	measure 'meas.ssr_first_touch_date' = ```
			
			-- function that through multiple steps get the most recent records in a table for each coid and then allow u to do agg ops on it 
			var sel_date = [meas.sel_date] // get the selected date 
			
			var _max_date = MAXX(ssr, ssr[trueai_first_touch])
			var res = IF(
			    _max_date>sel_date,
			    BLANK(),
			    _max_date
			)
			
			RETURN
			res
			```
		formatString: Short Date
		displayFolder: _open_leads_accts
		lineageTag: b896f421-ff26-47fa-883f-9b1c4325dee3

	measure 'meas.ssr_history_top_250_leads' = ```
			
			VAR sel_date = [meas.sel_date]
			VAR filtered_tbl =
			    FILTER(
			        ssr_history,
			        ssr_history[_sys_filt_start_date] < sel_date
			    )
			VAR top_250 =
			    TOPN(
			        250,
			        filtered_tbl,
			        ssr_history[_sys_filt_start_date], -- Sort by this column
			        DESC
			    )
			VAR rank_num = 
			    RANKX(
			        top_250,
			        MAX(ssr_history[_sys_filt_start_date]),
			        ,
			        DESC,
			        Skip
			    )
			RETURN
			    rank_num
			
			```
		formatString: 0
		displayFolder: _open_leads_accts
		lineageTag: 9e175bd2-2952-4cd6-8c18-af391af0e819

	measure 'meas.stkhlds_all_last_act_days' =
			
			var _current = CALCULATE(MAX(cal_start_dates[Date]))            // get the current start date
			var _last_act = MAX(ssr_history[stkhlds_all_last_act])              // last act date
			var _res = DATEDIFF(_current, _last_act,DAY)             // get thdays
			var res = IF(_res <=0, BLANK(), _res)
			RETURN
			res
		formatString: #,##0.0" Days"
		displayFolder: _opps_detail
		lineageTag: 29c65097-0962-4fef-8b58-cd4e7918224c

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_rpt_won_amt_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_won_amt]) +0
			
			return res
			
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: 9718993c-6bbe-4652-882f-a2d4ee99bc78

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_won_amt_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_won_amt]) +0
			
			return res
			
			
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: bd31b4b7-9e2a-444e-b697-9a28cb437fe7

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_won_amt_mtd_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_mgmt_rpt_won_amt_mtd]  - [meas.ssr_history_mgmt_rpt_won_amt_mtd_sply], [meas.ssr_history_mgmt_rpt_won_amt_mtd_sply])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _to_be_deleted
		lineageTag: b9b11b72-e2d9-4382-9ab3-c476e20bbfd2

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_rpt_won_amt_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_won_amt]) +0
			
			return res
			
			
			
			 
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: 56330541-33e9-4e80-a34b-104e9529bbbe

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_won_amt_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_won_amt]) +0
			
			return res
			
			
			
			
			
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: 27660e51-dc8a-485e-888a-39a4faa51765

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_won_amt_qtd_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_mgmt_rpt_won_amt_qtd]  - [meas.ssr_history_mgmt_rpt_won_amt_qtd_sply], [meas.ssr_history_mgmt_rpt_won_amt_qtd_sply])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _to_be_deleted
		lineageTag: 6d43dfc7-08ed-414f-b77e-e232c14a5f33

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_rpt_won_amt_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_won_amt]) +0
			
			return res
			
			
			
			 
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: 6e7be20c-e5de-445a-8fdb-8016e76d035a

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_won_amt_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply )
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_won_amt]) +0
			
			return res
			
			 
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: 00dd1f12-0604-4c27-a7b6-45f4545a5f99

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_won_amt_ytd_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_mgmt_rpt_won_amt_ytd]  - [meas.ssr_history_mgmt_rpt_won_amt_ytd_sply], [meas.ssr_history_mgmt_rpt_won_amt_ytd_sply])
			return res
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _to_be_deleted
		lineageTag: 6735110f-bb1c-4c71-b945-3347ef9147e9

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_rpt_pipeline_amt_mtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_mtd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt]) +0
			
			RETURN
			res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: bffbf01c-18e5-452a-982c-d59b5063f2a7

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_pipeline_amt_mtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_mtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt]) +0
			
			return res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: ab6a913a-efd5-48e5-98f1-179052878ec8

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_pipeline_amt_mtd_sply_diff' =
			
			var res =DIVIDE ([meas.ssr_history_mgmt_rpt_pipeline_amt_mtd]  - [meas.ssr_history_mgmt_rpt_pipeline_amt_mtd_sply], [meas.ssr_history_mgmt_rpt_pipeline_amt_mtd])
			RETURN
			res
		formatString: +0%;-0%;"-"
		displayFolder: _to_be_deleted
		lineageTag: c2bb0ae7-e2e3-4da9-bc06-68ce09ebd5d6

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_rpt_pipeline_amt_qtd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_qtd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt]) +0
			
			RETURN
			res
			
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: 0d0a55fb-a25f-436a-8c5c-ad17166777fc

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_pipeline_amt_qtd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_qtd_sply &&  cal_end_dates[Date] <= end_date_sply)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt]) +0
			
			return res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: b2b8e56b-6c1b-436f-bbf9-a1d72f99339f

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_pipeline_amt_qtd_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_mgmt_rpt_pipeline_amt_qtd]  - [meas.ssr_history_mgmt_rpt_pipeline_amt_qtd_sply], [meas.ssr_history_mgmt_rpt_pipeline_amt_qtd])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _to_be_deleted
		lineageTag: e37e8a52-1cb1-4231-b743-e742e852503d

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_mgmt_rpt_pipeline_amt_ytd' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_ytd &&  cal_end_dates[Date] <= end_date)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt]) +0
			
			RETURN
			res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: 7632b8eb-16ef-4627-9580-c7a92242fcd7

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_pipeline_amt_ytd_sply' = ```
			
			
			-- get the dates
			var curr_date = CALCULATE(MAX(cal_end_dates[Date])) // get the mgmt current end date
			var end_date = curr_date
			var end_date_sply = date(Year(end_date) -1,Month(end_date),day(end_date)) // get the yoy end date
			var start_year = Year(curr_date) 
			var start_qtr_month = (Quarter(curr_date) * 3) - 2  
			var start_month = Month(curr_date)
			var start_date_ytd = date(start_year,1,1)  
			var start_date_ytd_sply = date(start_year-1,1,1)  
			var start_date_qtd = date(start_year,start_qtr_month ,1)  
			var start_date_qtd_sply = date(start_year -1,start_qtr_month,1)  
			var start_date_mtd = date(start_year,start_month,1)  
			var start_date_mtd_sply = date(start_year -1,start_month,1)  
			
			
			-- get data for overridden date periods but still contextual
			var dates_tbl =  CALCULATETABLE(ssr_history , cal_end_dates[Date] >=  start_date_ytd_sply &&  cal_end_dates[Date] <= end_date_sply)
			
			-- apply addl. filters
			var filt_tbl = Filter(dates_tbl,  ssr_history[step_success] = true && ssr_history[step_name] in {"Prospecting", "Post-Sales Support"} )
			
			-- do the agg 
			var res = SUMX(filt_tbl, ssr_history[opp_pipeline_amt]) +0
			
			return res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _to_be_deleted
		lineageTag: 7e120df5-4f2b-44fa-87d2-d37952df7c99

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_mgmt_rpt_pipeline_amt_ytd_sply_diff' = ```
			
			var res =DIVIDE ([meas.ssr_history_mgmt_rpt_pipeline_amt_ytd]  - [meas.ssr_history_mgmt_rpt_pipeline_amt_ytd_sply], [meas.ssr_history_mgmt_rpt_pipeline_amt_ytd])
			return res  
			
			```
		formatString: +0%;-0%;"-"
		displayFolder: _to_be_deleted
		lineageTag: ec1c2a40-2355-4e60-a6bd-e9f379e2a279

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ta_ssr_history_all_activity_avg_count' =
			
			var res =  CALCULATE(
			    AVERAGE(ssr_history[stkhlds_all_act_count]),       // count of all stkhlds act count
			    ssr_history_stakeholders[trueai_owner_act_capt_lvl]>=0.5
			)
			return res
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: 492a1596-6f46-47e2-8ba9-01f2d4a4f772

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_activity_avg_eng_count' = ```
			
			var res =  CALCULATE(
			    AVERAGE(ssr_history[stkhlds_all_act_eng_count]),
			       ssr_history[step_owner_act_capt_lvl]
			)
			                  
			return res
			```
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: a917388e-4744-40a3-910a-8833ef45395f

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_activity_engagement_rate' =
			
			var acts =  ROUND([meas.ta_ssr_history_all_activity_avg_count],0)  // get the all act average count
			var eng_acts =  ROUND([meas.ta_ssr_history_all_activity_avg_eng_count],0)      // get all all act eng avg count
			var res = DIVIDE(eng_acts, acts,0)
			RETURN
			res
		formatString: 0%;-0%;0%
		displayFolder: _tactical_activity_analysis
		lineageTag: a51c84d0-0e20-4e47-b25c-d585cd1e0f39

	measure 'meas.ta_ssr_history_all_email_avg_count' =
			
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_email_count]),  // all act email count
			                      ssr_history[step_owner_act_capt_lvl]>=0.5
			)
			return res
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: b5ac6f2c-de52-4bc7-b9db-1b9a8de83004

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_email_avg_eng_count' =
			
			var res =  CALCULATE(
			    AVERAGE(ssr_history[stkhlds_all_act_type_email_eng_count]),
			    ssr_history[step_owner_act_capt_lvl] >= 0.5)  // get all the count of eng email count
			return res
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: 229bb2ac-f928-4344-8571-1e5498bccf1b

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_email_engagement_rate' =
			
			var acts =  [meas.ta_ssr_history_all_email_avg_count]   // get the all email avg count
			var eng_acts = [meas.ta_ssr_history_all_email_avg_eng_count]      // get teh all email eng count
			var res = DIVIDE(eng_acts, acts, 0)
			return res
		formatString: 0%;-0%;0%
		displayFolder: _tactical_activity_analysis
		lineageTag: 9a835278-a904-4e76-9b4a-f4bf68492317

	measure 'meas.ta_ssr_history_all_meeting_avg_count' =
			//stkhlds_all_act_type_meeting_count
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_meeting_count]),
			ssr_history[step_owner_act_capt_lvl]>=0.5
			)
			return res
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: ce03cd8d-a2df-4c64-943a-c04016f34994

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_meeting_avg_eng_count' =
			
			CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_meeting_eng_count]), ssr_history[step_owner_act_capt_lvl]>=0.5)
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: e9a8608e-578b-4fcf-a82e-66db67b71a2a

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_meeting_engagement_rate' =
			
			var acts =  ROUND([meas.ta_ssr_history_all_meeting_avg_count],0)       // get th total meeting counts
			var eng_acts =  ROUND([meas.ta_ssr_history_all_meeting_avg_eng_count],0)  // get the ttoal eng counts
			var res = DIVIDE(eng_acts, acts, 0)
			return res
		formatString: 0%;-0%;0%
		displayFolder: _tactical_activity_analysis
		lineageTag: 21829bb9-9e32-4de5-bcc8-6f085f267aaf

	measure 'meas.ta_ssr_history_all_phone_call_avg_count' =
			
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_call_count]),
			                    ssr_history[step_owner_act_capt_lvl]>=0.5
			)
			return res
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: 9e0c06ae-e317-447f-8c69-43fd8b9c54d4

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_phone_call_avg_eng_count' =
			
			var res =  CALCULATE(AVERAGE(ssr_history[stkhlds_all_act_type_call_eng_count]),
			ssr_history[step_owner_act_capt_lvl]>=0.5
			)
			return res
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: 0fc899b1-9fcc-4f9f-b9c9-a3eb427d8a46

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_phone_call_engagement_rate' =
			
			var acts =  ROUND([meas.ta_ssr_history_all_phone_call_avg_count],0)
			var eng_acts = ROUND([meas.ta_ssr_history_all_phone_call_avg_eng_count],0)
			var res = DIVIDE(eng_acts, acts, 0)
			RETURN
			res
		formatString: 0%;-0%;0%
		displayFolder: _tactical_activity_analysis
		lineageTag: aa153e77-d116-499d-a486-be030c43f8dd

	measure 'meas.ta_ssr_history_all_social_media_avg_count' =
			VAR res =
			    CALCULATE ( AVERAGE ( ssr_history[stkhlds_all_social_count] ),
			                ssr_history[step_owner_act_capt_lvl]>=0.5
			    )
			RETURN
			    res
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: 0ad51096-62c6-4a25-aef8-28cb74a71c96

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_social_media_avg_eng_count' = ```
			
			CALCULATE ( 
			    AVERAGE ( ssr_history[stkhlds_all_act_type_social_eng_count] ),
			    ssr_history[step_owner_act_capt_lvl]>=0.5
			)
			```
		formatString: 0
		displayFolder: _tactical_activity_analysis
		lineageTag: 6d143932-7833-451e-9d56-1dce423044ff

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ta_ssr_history_all_social_media_engagement_rate' =
			
			var acts =  ROUND([meas.ta_ssr_history_all_social_media_avg_count],0)
			var eng_acts =  ROUND([meas.ta_ssr_history_all_social_media_avg_eng_count],0)
			var res = DIVIDE(eng_acts, acts, 0)
			RETURN
			res
		formatString: 0.00%;-0.00%;0.00%
		displayFolder: _tactical_activity_analysis
		lineageTag: 3b08ce3b-4877-42e3-a905-26803c89a79b

	measure 'meas.opps_asof_open_pipeline_amt' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(opps, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,  opps[_sys_filt_end_date] >= end_date &&  opps[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			var res = SUMX(filt_tbl, opps[trueai_booking_amt]) -- do the actual operation
			
			return res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _mgmt_rpt_open_opps
		lineageTag: 8fe9a038-f87f-46d7-93f1-fddd12583635

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.avg_time_spent_per_step' =
			
			var _total_duration = [meas.ssr_history_dur_hrs]           // get the total duration
			var _total_step = [meas.ssr_history_step_count]                 // get the step count
			var _dur = DIVIDE(_total_duration, _total_step,0)
			
			RETURN
			_dur
		formatString: #,##0.0" hrs"
		displayFolder: _activity_analysis
		lineageTag: cbb8ba58-4915-41a9-a8a9-6db77b4fc1b6

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_leads_w_first_touch' =
			
			var start_date = [meas.filter_date_min]
			var end_date =[meas.filter_date_max]
			var filt_ssr = CALCULATETABLE(ssr, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1)) // get rid of date context
			
			--var filt_ssr_hist = Filter(filt_ssr, ssr[_sys_doc_id] in SELECTColumn([_sys_ssr_id], inbound_leads)
			var test_tbl = filter(filt_ssr, ssr[trueai_first_touch] >=  start_date &&  ssr[trueai_first_touch] < end_date) // get the new date range
			var touch_cnt = COuntX(test_tbl, ssr[trueai_first_touch]   )
			var res = touch_cnt
			return res
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: 809f5e26-a407-497e-bf4d-530307039d7c

	measure 'meas.opps_asof_open_pipeline_expected_value' = ```
			
			-- NOTE Open pipeline needs to override normal filter dates and is depndant on a second SYNCED slicer tied to the cal_end_dates_no_relationship table 
			var end_date =  CALCULATE(LASTDATE(cal_start_dates[Date]), ALLSELECTED())  -- get the end date of the second slicer 
			var all_dates_tbl = CALCULATETABLE(opps, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,2)) -- override the normal date filter and get current filters through calc table
			var filt_tbl = FILTER(all_dates_tbl,  opps[_sys_filt_end_date] >= end_date &&  opps[_sys_filt_start_date] < end_date) -- apply the right steps and filter dates
			var pipeline_amt = SUMX(filt_tbl, opps[trueai_booking_amt]) -- get the pipeline amt
			var pipeline_prob = AVERAGEX(filt_tbl, opps[trueai_prob_of_win]) -- get the pipeline amt
			var res = pipeline_amt*pipeline_prob
			return res
			```
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _mgmt_rpt_open_opps
		lineageTag: 7b4bce26-f0bb-4017-a25a-147e38b4175b

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.avg_time_spent_per_deal_ratio_prospecting' = ```
			
			var highes_high_mid = CALCULATE(
			    [meas.avg_time_spent_per_step],
			    ssr_history[step_name]="Prospecting",           // get the time for highest, high and mid
			    quality_buckets[bucket] in {"Highest", "High", "Mid"}
			)
			
			var lowest_low = CALCULATE(
			    [meas.avg_time_spent_per_step],
			    ssr_history[step_name]="Prospecting",       // get the time for lowest and low
			    quality_buckets[bucket] in {"Lowest", "Low"}
			)
			
			var ratio = DIVIDE(highes_high_mid, lowest_low, 0)              // get the ratio 
			var res = FORMAT(ratio, "0.0")
			RETURN
			res
			```
		displayFolder: _activity_analysis
		lineageTag: 41dc3022-b907-47c0-9265-af35d57ab609

	measure 'meas.avg_time_spent_per_deal_ratio_new_logo_selling' = ```
			
			var highes_high_mid = CALCULATE(
			    [meas.avg_time_spent_per_step],
			    ssr_history[step_name]="New Logo Selling",           // get the time for highest, high and mid
			    quality_buckets[bucket] in {"Highest", "High", "Mid"}
			)
			
			var lowest_low = CALCULATE(
			    [meas.avg_time_spent_per_step],
			    ssr_history[step_name]="New Logo Selling",       // get the time for lowest and low
			    quality_buckets[bucket] in {"Lowest", "Low"}
			)
			
			var ratio = DIVIDE(highes_high_mid, lowest_low, 0)              // get the ratio 
			var res = FORMAT(ratio, "0.0")
			RETURN
			res
			```
		displayFolder: _activity_analysis
		lineageTag: 15466063-1b8b-4b46-83f4-051ae6f09c2b

	measure 'meas.avg_time_spent_per_deal_ratio_post_sales_support' = ```
			
			var highes_high_mid = CALCULATE(
			    [meas.avg_time_spent_per_step],
			    ssr_history[step_name]="Post-Sales Support",           // get the time for highest, high and mid
			    quality_buckets[bucket] in {"Highest", "High", "Mid"}
			)
			
			var lowest_low = CALCULATE(
			    [meas.avg_time_spent_per_step],
			    ssr_history[step_name]="Post-Sales Support",       // get the time for lowest and low
			    quality_buckets[bucket] in {"Lowest", "Low"}
			)
			
			var ratio = DIVIDE(highes_high_mid, lowest_low, 0)              // get the ratio 
			var res = FORMAT(ratio, "0.0")
			RETURN
			res
			```
		displayFolder: _activity_analysis
		lineageTag: bf13ce43-0aaf-4b0e-9c09-643a54be6840

	measure 'meas.avg_time_spent_per_deal_ratio_existing_customer_selling' = ```
			
			var highes_high_mid = CALCULATE(
			    [meas.avg_time_spent_per_step],
			    ssr_history[step_name]="Existing Customer Selling",           // get the time for highest, high and mid
			    quality_buckets[bucket] in {"Highest", "High", "Mid"}
			)
			
			var lowest_low = CALCULATE(
			    [meas.avg_time_spent_per_step],
			    ssr_history[step_name]="Existing Customer Selling",       // get the time for lowest and low
			    quality_buckets[bucket] in {"Lowest", "Low"}
			)
			
			var ratio = DIVIDE(highes_high_mid, lowest_low, 0)              // get the ratio 
			var res = FORMAT(ratio, "0.0")
			RETURN
			res
			```
		displayFolder: _activity_analysis
		lineageTag: 00aaaf4d-0b2d-4b32-ae94-9998178938d4

	measure 'meas.ssr_history_leads_count' = ```
			
			var res = CALCULATE(
			    distinctcount(ssr[_sys_doc_id]),
			    users_history[trueai_user_role_dept]="MKT",
			    ssr[trueai_leadsource_is_inbound]=true
			    ) 
			return res
			```
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: 6b5d0d50-2987-453d-9854-e58b0c9fc542

	measure 'meas.ssr_history_mkt_inbound_leads_with_first_touch' = ```
			
			var start_date = [meas.filter_date_min]
			var end_date =[meas.filter_date_max]
			var filt_ssr = CALCULATETABLE(ssr, cal_end_dates[Date] > date(1900,1,1) && cal_end_dates[Date] < date(2100,1,1)) // get rid of date context
			
			--var filt_ssr_hist = Filter(filt_ssr, ssr[_sys_doc_id] in SELECTColumn([_sys_ssr_id], inbound_leads)
			var test_tbl = filter(filt_ssr, ssr[trueai_first_touch] >=  start_date &&  ssr[trueai_first_touch] < end_date) // get the new date range
			var touch_cnt = CALCULATE(
			    COUNTROWS(DISTINCT(SELECTCOLUMNS(test_tbl, "doc_id", ssr[_sys_doc_id]))),
			    ssr[trueai_leadsource_is_inbound] = true,
			    users[trueai_user_role_dept]="MKT"
			)
			var res = CALCULATE(
			    [meas.ssr_history_mkt_leads_inbound],
			    ssr[trueai_first_touch] >=  start_date &&  ssr[trueai_first_touch] < end_date
			)
			
			return 
			COALESCE ( res, 0 )
			
			
			// CALCULATE(
			//     [meas.ssr_history_leads_w_first_touch],
			//     ssr[trueai_leadsource_is_inbound] = true, 
			//     users[trueai_user_role_dept]="MKT"
			// )
			```
		formatString: #,0
		displayFolder: _lead_analysis
		lineageTag: 08b16d75-78d5-470d-b17e-5d7d264fec8b

	measure 'meas.ssr_history_success_count_mkt_prospecting_inbound' = ```
			
			var res = CALCULATE(count(ssr_history[_sys_doc_id]),ssr_history[step_name]= "Prospecting" && ssr_history[step_success] = true)  
			RETURN
			res+0
			```
		displayFolder: _lead_analysis
		lineageTag: d737c4ab-36bf-4374-83ce-1c4b04b767a6

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_inbound_mkt_leads_touched_ratio' = ```
			
			var _mkt_inbound_leads = [meas.ssr_history_mkt_leads_inbound]
			var _touched_leads = [meas.ssr_history_mkt_inbound_leads_with_first_touch]
			var res = DIVIDE(
			    _touched_leads,
			    _mkt_inbound_leads,
			    0
			)
			return 
			res
			```
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 0c6f1490-f449-46aa-ba57-b84ecdd6506b

	measure 'meas.ssr_history_success_rate_mkt_prospecting_inbound' =
			
			var tot_count = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Prospecting")
			var success_count = CALCULATE(COUNT(ssr_history[_sys_doc_id]), ssr_history[step_name] = "Prospecting" && ssr_history[step_success] = true)
			var rate = DIVIDE(success_count , tot_count )
			return rate+0
		formatString: 0%;-0%;0%
		displayFolder: _lead_analysis
		lineageTag: 4779ab77-ee8f-48ff-bc2f-354d833babe9

	measure 'meas.annual_booking_mrr_won_amt' =
			
			var _min_date = [meas.context_date_min]         // get the minimum date
			var _max_date = [meas.context_date_max]             // get the maximum date
			var _total_month = 12 * (YEAR(_max_date) - YEAR(_min_date)) + (MONTH(_max_date) - MONTH(_min_date))+1
			var _total_booking = [meas.ssr_history_won_amt]          /// get the total won amt
			var _mrr_amt = DIVIDE(_total_booking, _total_month, 0)                    // GET THE Monthly Recurring Revenue amt
			var _selected_value = SELECTEDVALUE(all_act_support[Booking Amount Display Mode])       // get the slicer value
			
			var res = IF(
			    _selected_value="Annual Bookings",
			    _total_booking,
			    IF(
			        _selected_value="MRR",
			        _mrr_amt
			    )
			)
			RETURN
			res
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _rev_analysis
		lineageTag: c72d02ce-eee8-4360-8cd3-e3b67de3a357

	measure 'meas.annual_booking_mrr_won_amt_text' = ```
			
			var _selected_value = SELECTEDVALUE(all_act_support[Booking Amount Display Mode])       // get the slicer value
			
			var res = 
			    IF(
			        _selected_value="MMR Bookings",
			        "MRR",
			        "Annual Bookings"
			    )
			
			RETURN
			res
			```
		displayFolder: _rev_analysis
		lineageTag: 6ec0478c-2d73-459e-acb7-a031a0519440

	measure 'meas.annual_booking_mrr_new_logo_won_amt' =
			
			var _min_date = [meas.context_date_min]         // get the minimum date
			var _max_date = [meas.context_date_max]             // get the maximum date
			var _total_month = 12 * (YEAR(_max_date) - YEAR(_min_date)) + (MONTH(_max_date) - MONTH(_min_date))+1
			var _total_booking = [meas.ssr_history_won_amt_new_logo]          /// get the total won amt
			var _mrr_amt = DIVIDE(_total_booking, _total_month, 0)                    // GET THE Monthly Recurring Revenue amt
			var _selected_value = SELECTEDVALUE(all_act_support[Booking Amount Display Mode])       // get the slicer value
			
			var res = IF(
			    _selected_value="Annual Bookings",
			    _total_booking,
			    IF(
			        _selected_value="MRR",
			        _mrr_amt
			    )
			)
			RETURN
			res
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _rev_analysis
		lineageTag: 823b76c7-69bb-455e-ae77-5d0718f7707e

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.annual_booking_mrr_existing_customer_selling_won_amt' =
			
			var _min_date = [meas.context_date_min]         // get the minimum date
			var _max_date = [meas.context_date_max]             // get the maximum date
			var _total_month = 12 * (YEAR(_max_date) - YEAR(_min_date)) + (MONTH(_max_date) - MONTH(_min_date))+1
			var _total_booking = [meas.ssr_history_won_amt_existing_customer_selling]          /// get the total won amt
			var _mrr_amt = DIVIDE(_total_booking, _total_month, 0)                    // GET THE Monthly Recurring Revenue amt
			var _selected_value = SELECTEDVALUE(all_act_support[Booking Amount Display Mode])       // get the slicer value
			
			var res = IF(
			    _selected_value="Annual Bookings",
			    _total_booking,
			    IF(
			        _selected_value="MRR",
			        _mrr_amt
			    )
			)
			RETURN
			res
		formatString: \$#,0.###############;(\$#,0.###############);\$#,0.###############
		displayFolder: _rev_analysis
		lineageTag: d172f538-d6f4-45a5-9eba-676547299f55

		annotation PBI_FormatHint = {"currencyCulture":"en-US"}

	measure 'meas.ssr_history_all_duration_hrs' =
			
			CALCULATE(
			    SUM(ssr_history[stkhlds_all_dur])
			)/3600
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 57b714ad-2684-4b0b-925c-14610ca6ae04

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_all_eng_duration_hrs' =
			
			CALCULATE(
			    SUM(ssr_history[stkhlds_all_dur_eng])           // sum eng dur
			)/3600
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 0404c29f-8797-4bf7-8068-1560a3d718e7

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_all_phone_call_count' =
			
			var res =  CALCULATE(SUM(ssr_history[stkhlds_all_act_type_call_count]))         // sum of all phone calls count
			return res
		formatString: 0
		displayFolder: _activity_analysis
		lineageTag: 981f5282-b9fe-4493-8677-d06c47c49d43

	measure 'meas.stkhlds_all_act_social_media_count' = CALCULATE(sum(ssr_history[stkhlds_all_social_count]))     // total social media act
		formatString: #,0
		displayFolder: _activity_analysis
		lineageTag: d67781dc-0158-4d2a-a10e-34bb8a906474

	measure 'meas.stkhlds_all_act_nd_count' = CALCULATE(sum(ssr_history[stkhlds_all_act_type_nd_count]))
		formatString: 0
		displayFolder: all_activity_opp
		lineageTag: 95384a03-1e27-4f9d-b6ac-eaf176210cdb

	measure 'meas.ssr_history_mrr_won_amt' =
			
			var won_amt = CALCULATE(
			    SUM(ssr_history[opp_won_amt]) )
			
			var _min_date = [meas.context_date_min]       // get the minimum date
			var _max_date = [meas.context_date_max]       // get the maximum date
			var _total_month = 12 * (YEAR(_max_date) - YEAR(_min_date)) + (MONTH(_max_date) - MONTH(_min_date))+1
			
			RETURN
			   DIVIDE(won_amt, _total_month, 0)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 9026ff38-419f-4973-962b-e5154e496798

	measure 'meas.ssr_history_mrr_won_amt_new_logo' =
			var won_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),
			                            ssr_history[step_name]="New Logo Selling")
			
			var _min_date = [meas.context_date_min]       // get the minimum date
			var _max_date = [meas.context_date_max]       // get the maximum date
			var _total_month = 12 * (YEAR(_max_date) - YEAR(_min_date)) + (MONTH(_max_date) - MONTH(_min_date))+1
			
			RETURN
			   DIVIDE(won_amt, _total_month, 0)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 4769e1a5-15f5-4eb4-a201-7da0951d6d81

	measure 'meas.ssr_history_mrr_won_amt_existing_customer_selling' =
			var won_amt = CALCULATE(SUM(ssr_history[opp_won_amt]),
			                            ssr_history[step_name]="Existing Customer Selling")
			
			var _min_date = [meas.context_date_min]       // get the minimum date
			var _max_date = [meas.context_date_max]       // get the maximum date
			var _total_month = 12 * (YEAR(_max_date) - YEAR(_min_date)) + (MONTH(_max_date) - MONTH(_min_date))+1
			
			RETURN
			   DIVIDE(won_amt, _total_month, 0)
		formatString: \$#,0;(\$#,0);\$#,0
		displayFolder: _rev_analysis
		lineageTag: 68f55854-715d-45b8-8d1c-c91bc93e3711

	measure 'meas.ssr_history_duration_hrs_deals' = DIVIDE ( [meas.ssr_history_duration_hrs_deals_accumulated],[meas.open_pipeline_total_deals] )
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: f6507072-833b-4d9b-a082-cba6b1233d7b

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_deals_stage_accumulation' = ```
			
			
			VAR CurIdx = MAX ( open_pipeline[col.stage_sort_index] )
			
			RETURN
			    SUMX (
			        FILTER (
			            ALL (open_pipeline ),                       
			            open_pipeline[col.stage_sort_index] <= CurIdx    
			        ),
			        CALCULATE (
			            [meas.ssr_history_duration_hrs_new_logo]
			            + [meas.ssr_history_duration_hrs_existing_customer_selling]
			        )
			    )
			
			
			```
		displayFolder: _activity_analysis
		lineageTag: 33980c13-08b4-4659-8517-9cbc7a1b22d6

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ssr_history_duration_hrs_deals_stage' = DIVIDE ( [meas.ssr_history_duration_hrs_deals_stage_accumulation],[meas.open_pipeline_total_deals] )
		formatString: #,##0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 59488bb2-59a9-4cea-af1f-8c023fcc5bdf

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.ssr_history_duration_hrs_lost_deals' =
			
			var dur = ssr_history[meas.ssr_history_duration_hrs_new_logo] + [meas.ssr_history_duration_hrs_existing_customer_selling]
			var dl = [meas.open_pipeline_lost_count]
			var res = DIVIDE(dur,dl)
			return res
		formatString: #,##0.0" hrs"
		displayFolder: _activity_analysis
		lineageTag: 8a0c6ea7-580d-467c-bd9c-f56a7c820a05

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.opps_per_dur_hrs_avg' = ```
			
			AVERAGEX (
			    VALUES ( opps[_sys_doc_id] ),
			    CALCULATE (
			        DIVIDE( SUM( ssr_history[step_owner_dur] ), 3600 ),
			        ssr_history[step_owner_id] <> BLANK()
			    )
			)
			
			```
		formatString: #,##0.0" hrs"
		displayFolder: _opps_detail
		lineageTag: a42def34-846c-41cc-a8a3-f1e9549633b8

		annotation PBI_FormatHint = {"isCustom":true}

	measure 'meas.user_involvement_per_opp_avg' = DIVIDE([meas.user_involvement_per_opp], [meas.total_opps_count_dist])
		formatString: #,0.0
		displayFolder: _opps_detail
		lineageTag: a2723931-3715-4c3f-b0ab-87feedf94a21

	measure 'meas.opps_per_acts_avg' =
			
			AVERAGEX (
			    VALUES ( opps[_sys_doc_id] ),
			    CALCULATE (
			        SUM ( ssr_history[step_owner_act] ),
			        ssr_history[step_owner_id] <> BLANK()
			    )
			)
		formatString: 0.0
		displayFolder: _opps_detail
		lineageTag: fd79b0a7-4475-4e51-a49f-3a325fb386b0

	measure 'meas.opps_per_acts_avg_ae' = CALCULATE ( [meas.opps_per_acts_avg], users[trueai_user_role_function] = "AE" )
		displayFolder: _opps_detail
		lineageTag: fb38f70f-3699-4428-9744-a163588cb9ac

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_acts_avg_am' = CALCULATE ( [meas.opps_per_acts_avg], users[trueai_user_role_function] = "AM" )
		displayFolder: _opps_detail
		lineageTag: e659cb44-01dd-4de3-8251-a33c72ae5371

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_acts_avg_mgmt' = CALCULATE ( [meas.opps_per_acts_avg], users[trueai_user_role_function] = "MGMT" )
		displayFolder: _opps_detail
		lineageTag: c964c98c-dd4b-4ec7-b5ae-1c218121a62d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_acts_avg_sdr' = CALCULATE ( [meas.opps_per_acts_avg], users[trueai_user_role_function] = "SDR" )
		displayFolder: _opps_detail
		lineageTag: d4a87e47-bdbe-4a80-9253-b8ffbffd161d

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_acts_avg_other' = CALCULATE ( [meas.opps_per_acts_avg], users[trueai_user_role_function] = "OTHER ROLES" )
		displayFolder: _opps_detail
		lineageTag: 9f259b8d-adcf-4a46-b84e-173e0962f665

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.user_involvement_per_opp_avg_other' = AVERAGE(ssr_history[step_other_count_involved])
		formatString: #,0.0
		displayFolder: _opps_detail
		lineageTag: 7fd6e3e5-9668-47ed-b317-3467873c9e21

	measure 'meas.user_involvement_per_opp_avg_ae' = AVERAGE(ssr_history[step_ae_count_involved])
		formatString: #,0.0
		displayFolder: _opps_detail
		lineageTag: 32391501-de00-433b-b0d1-859ed8090fc2

	measure 'meas.user_involvement_per_opp_avg_am' = AVERAGE(ssr_history[step_am_count_involved])
		formatString: #,0.0
		displayFolder: _opps_detail
		lineageTag: ae53b16f-0b85-43a4-ab06-ab376f8e7683

	measure 'meas.user_involvement_per_opp_avg_mgmt' = AVERAGE(ssr_history[step_mgmt_count_involved])
		formatString: #,0.0
		displayFolder: _opps_detail
		lineageTag: da875c36-a3ce-4120-a3b6-93567548d3a5

	measure 'meas.user_involvement_per_opp_avg_sdr' = AVERAGE(ssr_history[step_sdr_count_involved])
		formatString: 0.0
		displayFolder: _opps_detail
		lineageTag: 8ce92ae8-d725-4e00-8920-142c9dd80cb1

	measure 'meas.opps_per_dur_hrs_avg_sdr' = CALCULATE ( [meas.opps_per_dur_hrs_avg], users[trueai_user_role_function] = "SDR" )
		displayFolder: _opps_detail
		lineageTag: da0606be-c806-4d3a-b44e-af0fd378a085

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_dur_hrs_avg_ae' = CALCULATE ( [meas.opps_per_dur_hrs_avg], users[trueai_user_role_function] = "AE" )
		displayFolder: _opps_detail
		lineageTag: d37442b7-47a1-4043-b456-af1477d1bd48

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_dur_hrs_avg_other' = CALCULATE ( [meas.opps_per_dur_hrs_avg], users[trueai_user_role_function] = "OTHER ROLE" )
		displayFolder: _opps_detail
		lineageTag: 7db08967-127b-429a-b665-d00afe3c1055

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_dur_hrs_avg_mgmt' = CALCULATE ( [meas.opps_per_dur_hrs_avg], users[trueai_user_role_function] = "MGMT" )
		displayFolder: _opps_detail
		lineageTag: 3d7ddf79-3e75-4bc1-8ec4-b6e60986451f

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_dur_hrs_avg_am' = CALCULATE ( [meas.opps_per_dur_hrs_avg], users[trueai_user_role_function] = "AM" )
		displayFolder: _opps_detail
		lineageTag: 0125a134-dac6-45b7-a151-d4094f3e728e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_owner_avg' =
			
			AVERAGEX (
			    VALUES ( opps[_sys_doc_id] ),
			    CALCULATE (
			        DISTINCTCOUNT ( ssr_history[step_owner_id] ),
			        ssr_history[step_owner_id] <> BLANK()
			    )
			)
		formatString: 0.0
		displayFolder: _opps_detail
		lineageTag: 3fca1a64-e5eb-486d-a42b-ccce9fab41c4

	measure 'meas.opps_per_owner_avg_ae' = CALCULATE ( [meas.opps_per_owner_avg], users[trueai_user_role_function] = "AE" )
		displayFolder: _opps_detail
		lineageTag: 227a2e5d-f863-46ee-88af-ead576103d18

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_owner_avg_am' = CALCULATE ( [meas.opps_per_owner_avg], users[trueai_user_role_function] = "AM" )
		displayFolder: _opps_detail
		lineageTag: 558cf180-2276-4d3e-b8c5-20b0124b3e74

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_owner_avg_mgmt' = CALCULATE ( [meas.opps_per_owner_avg], users[trueai_user_role_function] = "MGMT" )
		displayFolder: _opps_detail
		lineageTag: 62619b5f-33fe-42e0-b1fc-1b4cece87356

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.opps_per_owner_avg_other' = CALCULATE ( [meas.opps_per_owner_avg], users[trueai_user_role_function] = "OTHER ROLES" )
		displayFolder: _opps_detail
		lineageTag: 88da1cce-9eb6-4b6f-bc3e-7e3764552a0a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.user_involvement_per_opp' = [meas.user_involvement_per_opp_ae] + [meas.user_involvement_per_opp_am] + [meas.user_involvement_per_opp_mgmt] + [meas.user_involvement_per_opp_sdr] + [meas.user_involvement_per_opp_other]
		formatString: #,0
		displayFolder: _opps_detail
		lineageTag: 7cbdd5ef-95dc-4a3f-87e8-d4146dff2d48

	measure 'meas.user_involvement_per_opp_ae' = ```
			
			 CALCULATE(
			    SUM( ssr_history[step_ae_count_involved] ),
			     FILTER(
			        VALUES(ssr_history[entity_opp_id]),
			        NOT ISBLANK(ssr_history[entity_opp_id])
			    )
			)
			```
		displayFolder: _opps_detail
		lineageTag: f3ec0449-b6fe-4be6-a82b-103bf57c669f

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.user_involvement_per_opp_am' = ```
			
			CALCULATE(
			    SUM( ssr_history[step_am_count_involved] ),
			     FILTER(
			        VALUES(ssr_history[entity_opp_id]),
			        NOT ISBLANK(ssr_history[entity_opp_id])
			    )
			)
			
			```
		formatString: #,0
		displayFolder: _opps_detail
		lineageTag: ec4c3907-8793-450a-9f3b-700da5318ab3

	measure 'meas.user_involvement_per_opp_mgmt' =
			
			CALCULATE(
			    SUM( ssr_history[step_mgmt_count_involved] ),
			     FILTER(
			        VALUES(ssr_history[entity_opp_id]),
			        NOT ISBLANK(ssr_history[entity_opp_id])
			    )
			)
		formatString: #,0
		displayFolder: _opps_detail
		lineageTag: dce25ffa-04b3-4dc2-80e2-e51ef84bf94b

	measure 'meas.user_involvement_per_opp_sdr' =
			
			CALCULATE(
			    SUM( ssr_history[step_sdr_count_involved] ),
			     FILTER(
			        VALUES(ssr_history[entity_opp_id]),
			        NOT ISBLANK(ssr_history[entity_opp_id])
			    )
			)
		formatString: #,0
		displayFolder: _opps_detail
		lineageTag: 4f24d7d6-1c7b-4ccb-a7fd-6d39aefff4f0

	measure 'meas.user_involvement_per_opp_other' =
			
			CALCULATE(
			    SUM( ssr_history[step_other_count_involved] ),
			     FILTER(
			        VALUES(ssr_history[entity_opp_id]),
			        NOT ISBLANK(ssr_history[entity_opp_id])
			    )
			)
		formatString: #,0
		displayFolder: _opps_detail
		lineageTag: cae7c502-1a7c-432d-bc06-9974532952f5

	measure 'meas.total_opps_count_dist' =
			
			var res = CALCULATE(DISTINCTCOUNT(ssr_history[entity_opp_id]))         // get the count of the opp id
			RETURN
			res
		formatString: #,0
		displayFolder: _opps_detail
		lineageTag: a2e6f40b-9e36-49a1-9f0b-ee93f30ec919

	column _sys_ssr_id
		dataType: string
		lineageTag: 5dab0112-202e-4780-9aad-25b2f42a82d8
		summarizeBy: none
		sourceColumn: _sys_ssr_id

		annotation SummarizationSetBy = Automatic

	column entity_opp_id
		dataType: string
		lineageTag: b951ec4a-2cb6-4841-8e1d-4af168b4dbc3
		summarizeBy: none
		sourceColumn: entity_opp_id

		annotation SummarizationSetBy = Automatic

	column entity_qual_bucket
		dataType: string
		lineageTag: 579230fa-0af4-417b-8716-1fe876b243f7
		summarizeBy: none
		sourceColumn: entity_qual_bucket
		sortByColumn: entity_qual_bucket_num

		changedProperty = SortByColumn

		annotation SummarizationSetBy = Automatic

	column opp_final_stage
		dataType: string
		lineageTag: 24f7cb62-2901-4a1a-9ebf-b4819c07a601
		summarizeBy: none
		sourceColumn: opp_final_stage

		annotation SummarizationSetBy = Automatic

	column opp_late_date
		dataType: dateTime
		formatString: Short Date
		displayFolder: _opps_detail
		lineageTag: f2803e7d-3dac-4f6a-b087-23324f73c630
		summarizeBy: none
		sourceColumn: opp_late_date

		variation Variation
			isDefault
			relationship: 27a20954-8d3f-4159-a863-b8891378ce2a
			defaultHierarchy: LocalDateTable_acf5c056-7dbf-4af9-b3b1-f5cd7a9dbce5.'Date Hierarchy'

		changedProperty = FormatString

		annotation SummarizationSetBy = Automatic

	column opp_mid_date
		dataType: dateTime
		formatString: Short Date
		displayFolder: _opps_detail
		lineageTag: 498cc59b-fe65-4c19-9cde-c7bed977ee34
		summarizeBy: none
		sourceColumn: opp_mid_date

		variation Variation
			isDefault
			relationship: 70b412e5-a61e-41ca-a7f5-406a1fcf1197
			defaultHierarchy: LocalDateTable_5d931608-5e0e-476a-ad83-2e4a7aeba3ea.'Date Hierarchy'

		changedProperty = FormatString

		annotation SummarizationSetBy = Automatic

	column step_end_date
		dataType: dateTime
		formatString: General Date
		lineageTag: a9a6219e-126e-43f8-b744-594d761f0672
		summarizeBy: none
		sourceColumn: step_end_date

		variation Variation
			isDefault
			relationship: b99e68dd-1862-4a97-8e2a-04dbb7eada0b
			defaultHierarchy: LocalDateTable_2720c721-e2f2-4d36-a491-4a5c0ee8b2b6.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column step_end_rule
		dataType: int64
		formatString: 0
		lineageTag: d53dfdac-41ed-49c3-92ad-edcdc273fbe0
		summarizeBy: sum
		sourceColumn: step_end_rule

		annotation SummarizationSetBy = Automatic

	column step_id
		dataType: string
		lineageTag: ee7f53b4-2284-45c0-ab85-a00c96e0e966
		summarizeBy: none
		sourceColumn: step_id

		annotation SummarizationSetBy = Automatic

	column step_length_in_days
		dataType: int64
		formatString: #,0" days"
		lineageTag: 7eba4b01-d3d5-4128-a557-fbe339f5bf8a
		summarizeBy: sum
		sourceColumn: step_length_in_days

		annotation SummarizationSetBy = Automatic

	column step_name
		dataType: string
		lineageTag: 40c49999-5de7-4f44-8aa7-dc1baddec394
		summarizeBy: none
		sourceColumn: step_name
		sortByColumn: step_id

		changedProperty = SortByColumn

		annotation SummarizationSetBy = Automatic

	column step_outcome
		dataType: string
		lineageTag: 27b46a21-ec44-44a3-bab7-da6b81d3866b
		summarizeBy: none
		sourceColumn: step_outcome

		annotation SummarizationSetBy = Automatic

	column step_outcome_rule
		dataType: string
		lineageTag: eba6e07a-0c95-4ba8-9071-c9a58c6c8682
		summarizeBy: none
		sourceColumn: step_outcome_rule

		annotation SummarizationSetBy = Automatic

	column step_owner_prep_factor
		dataType: double
		lineageTag: 70517a6e-8e13-4364-9085-23194faa46d2
		summarizeBy: sum
		sourceColumn: step_owner_prep_factor

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column step_owner_rule
		dataType: string
		lineageTag: fce5c0af-3fda-41de-9300-65438c9c995d
		summarizeBy: none
		sourceColumn: step_owner_rule

		annotation SummarizationSetBy = Automatic

	column step_owner_user_role
		dataType: string
		lineageTag: b2930202-3eb6-4436-8753-05be01b7abd1
		summarizeBy: none
		sourceColumn: step_owner_user_role

		annotation SummarizationSetBy = Automatic

	column step_sequence
		dataType: int64
		formatString: 0
		lineageTag: 74a06d8a-95fb-4cf4-b1cb-62d8161026cc
		summarizeBy: sum
		sourceColumn: step_sequence

		annotation SummarizationSetBy = Automatic

	column step_start_date
		dataType: dateTime
		formatString: General Date
		lineageTag: dfa5e53d-58fa-4db7-bf27-0e618ddac181
		summarizeBy: none
		sourceColumn: step_start_date

		variation Variation
			isDefault
			relationship: 91b702af-f803-4ee3-859b-787ccb983920
			defaultHierarchy: LocalDateTable_738db8eb-6a03-4b89-a1e1-82c7fd5be0c4.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column step_success_prob
		dataType: double
		formatString: 0%;-0%;0%
		lineageTag: 76c30b2c-598d-4c21-8110-04190102d95e
		summarizeBy: sum
		sourceColumn: step_success_prob

		annotation SummarizationSetBy = Automatic

	column step_success
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: c6d1fb0a-d3e0-4f18-9ea2-58e469ae45ad
		summarizeBy: none
		sourceColumn: step_success

		annotation SummarizationSetBy = Automatic

	column vi_value_created
		dataType: double
		lineageTag: 30322891-c9f1-4b88-b781-315e5687ad84
		summarizeBy: sum
		sourceColumn: vi_value_created

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column vi_value_delivered
		dataType: double
		lineageTag: 7debbe86-1dbe-4d14-bffb-dc0aacd2e2b3
		summarizeBy: sum
		sourceColumn: vi_value_delivered

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'col.step_owner_full_name' = RELATED(users[col.full_name])
		lineageTag: 44fc044d-353f-411e-ba76-dfb3059f6fdb
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.step_name_outcome' = ```
			
			var concat_str = (ssr_history[step_name] & "_" &  if(or(ISBLANK(ssr_history[step_outcome]),ssr_history[step_outcome] = "" ) , "ongoing", ssr_history[step_outcome]))
			var clean_str = SUBSTITUTE(lower(concat_str), " ", "_")
			return clean_str
			 
			```
		lineageTag: 06868129-81a9-4439-b279-c55beb1b5b6c
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.time_line_summary' = ```
			
			var space_char = " " // uses special space char " " instead of reg space
			var line_len = 55
			var caption1 = "Rep Role: "
			var value1 = ssr_history[step_owner_user_role]
			var line1 =  caption1    &  value1 &  REPT(space_char, line_len - (len(caption1) + LEN(value1))) &  "" &   UNICHAR ( 10 ) &  UNICHAR (13 ) // uses special space char " " instead of reg space
			
			var caption2 = "Outcome: "
			var value2 = ssr_history[step_outcome]
			var line2 =  caption2    &  value2 &  REPT(space_char, line_len - (len(caption2) + LEN(value2))) &  "" &   UNICHAR ( 10 ) &  UNICHAR (13 ) // uses special space char " " instead of reg spacereg space
			
			var caption3 = "Activities: "
			var value3 = ssr_history[stkhlds_all_act_count]
			var line3 =  if (not(ssr_history[step_name] = "Lead Gen" || ssr_history[step_name] = "Untouched"  )  , caption3    &  value3 &  REPT(space_char, line_len - (len(caption3) + LEN(value3))) &  "" &   UNICHAR ( 10 ) &  UNICHAR (13 ), "") // uses special space char " " instead of reg spacereg space)
			
			var caption4 = "Amount Won: "
			var value4 = FORMAT(ssr_history[opp_won_amt], "currency")
			var line4 =  if (((ssr_history[step_name] = "New Logo Selling" || ssr_history[step_name] = "Existing Customer Selling")   )  , caption4    &  value4 &  REPT(space_char, line_len - (len(caption4) + LEN(value4))) &  "" &   UNICHAR ( 10 ) &  UNICHAR (13 ), "") // uses special space char " " instead of reg spacereg space)
			
			
			var res  = line1 & line2 & line3 & line4
			return res
			
			```
		lineageTag: f7632047-b9f2-4d40-9816-dd2ca3cefbd4
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.lost_stage' = ```
			
			var stage = if(
			     ssr_history[opp_lost_stage] ="Late" , "3 - Late", 
			     if(    ssr_history[opp_lost_stage] ="Mid" , "2 - Mid", 
			     if(    ssr_history[opp_lost_stage] ="Early"   , "1 - Early", 
			     blank()))
			     )
			
			var res = stage
			return res
			
			
			
			```
		lineageTag: b327c4de-b2ea-4309-af6b-c38b501eb91f
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.next_step_success_prob' = ```
			
			 var res = ssr_history[step_next_success_prob]
			  return res 
			```
		formatString: 0%;-0%;0%
		lineageTag: 9fe909c3-7e73-40ac-b815-e31d9a6f845a
		summarizeBy: sum

		annotation SummarizationSetBy = Automatic

	column opp_initial_close_date
		dataType: dateTime
		formatString: Short Date
		displayFolder: _opps_detail
		lineageTag: cb5bc555-19e2-47b6-a591-2722c1e85bb7
		summarizeBy: none
		sourceColumn: opp_initial_close_date

		variation Variation
			isDefault
			relationship: b51acf6c-0226-47f2-9230-368f26d821fe
			defaultHierarchy: LocalDateTable_496f763c-1708-493a-8d32-b8ac3c5e8afa.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column opp_sale_type
		dataType: string
		lineageTag: 2963d52d-597a-4aaa-ae69-20ab69951bea
		summarizeBy: none
		sourceColumn: opp_sale_type

		annotation SummarizationSetBy = Automatic

	column opp_crm_stage
		dataType: string
		lineageTag: d43e542a-7922-422a-9ef0-0f70dd9f1d75
		summarizeBy: none
		sourceColumn: opp_crm_stage

		annotation SummarizationSetBy = Automatic

	column entity_account_id
		dataType: string
		lineageTag: 63fb792d-4132-476c-8002-4e6cdefd131e
		summarizeBy: none
		sourceColumn: entity_account_id

		annotation SummarizationSetBy = Automatic

	column entity_lead_id
		dataType: string
		lineageTag: e8304864-fcf8-428e-87fd-6ed8f7db13e1
		summarizeBy: none
		sourceColumn: entity_lead_id

		annotation SummarizationSetBy = Automatic

	column 'col.step_length_in_days_initially_expected' =
			
			
			var res = IF(ISBLANK([opp_initial_close_date]), blank(), ssr_history[opp_initial_close_date]  - ssr_history[step_start_date])
			return res
		formatString: 0 " days"
		lineageTag: 52d8c805-8f03-47f0-bc88-4392309197b9
		summarizeBy: none

		variation Variation
			isDefault
			relationship: 4d525d12-2983-479b-9459-b7afc4e4a5a0
			defaultHierarchy: LocalDateTable_aa830207-a11e-46e7-b0b2-7680fd41e1d9.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isCustom":true}

	column opp_lost_stage
		dataType: string
		lineageTag: 65c35247-a919-4cd6-b2a0-5fc345f6d860
		summarizeBy: none
		sourceColumn: opp_lost_stage

		annotation SummarizationSetBy = Automatic

	column opp_crm_type
		dataType: string
		lineageTag: dcb4fda4-3786-4ec0-902d-ff62b48c2449
		summarizeBy: none
		sourceColumn: opp_crm_type

		annotation SummarizationSetBy = Automatic

	column step_next_success_prob
		dataType: double
		formatString: 0%;-0%;0%
		lineageTag: 3b77d037-866c-4a1a-b9f1-4bfd03d2fb94
		summarizeBy: sum
		sourceColumn: step_next_success_prob

		annotation SummarizationSetBy = Automatic

	column entity_primary
		dataType: string
		lineageTag: 114525cf-f730-4098-8de6-810a302f8296
		summarizeBy: none
		sourceColumn: entity_primary

		annotation SummarizationSetBy = Automatic

	column entity_crm_custom_value_1
		dataType: string
		lineageTag: 6d56cf61-6ec9-43d4-a730-114c6a6f030a
		summarizeBy: none
		sourceColumn: entity_crm_custom_value_1

		annotation SummarizationSetBy = Automatic

	column entity_crm_custom_value_2
		dataType: string
		lineageTag: 05a06ffc-7cf7-45c1-8f4c-58ab2cd37d22
		summarizeBy: none
		sourceColumn: entity_crm_custom_value_2

		annotation SummarizationSetBy = Automatic

	column entity_crm_custom_value_3
		dataType: string
		lineageTag: 75d2a163-a42a-48cd-9cfd-a51ed07cc62e
		summarizeBy: none
		sourceColumn: entity_crm_custom_value_3

		annotation SummarizationSetBy = Automatic

	column 'col.outcome_str' = ```
			
			
			// grab from the next SSR hist entry if prospecting or post sale support
			  var filt_tbl = FILTER(ssr_history,
			    ssr_history[_sys_ssr_id] =earlier(ssr_history[_sys_ssr_id]) &&  
			    ssr_history[step_sequence]   = earlier(ssr_history[step_sequence]) +1 &&
			    (earlier(ssr_history[step_name])  = "Prospecting" || earlier(ssr_history[step_name])  = "Post-Sales Support" )
			  )
			  var res =  SUMX(filt_tbl, ssr_history[step_success_prob]) 
			  return res 
			```
		lineageTag: b4eeed89-562f-455b-b649-53ff4da3384d
		summarizeBy: sum

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'col.outcome_ssr_name' =
			
			var ssr_name = related(ssr[crm_name])
			var redact = false // read
			var ssr_name_final = if(redact, LEFT(ssr_name, 3) & REPT("*", LEN(ssr_name)), ssr_name) // do redaction if needed
			
			var res = ssr_history[step_outcome] & " - " & ssr_name_final
			return res
		lineageTag: 4ff549b2-e3e4-43fe-be86-aa9499ecff8b
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.adjusted_duration_prior_step' = ```
			
			
			
			// grab from the next SSR hist entry if prospecting or post sale support
			  var filt_tbl = FILTER(ssr_history,
			    ssr_history[_sys_ssr_id] =earlier(ssr_history[_sys_ssr_id]) &&  
			    ssr_history[step_sequence]   = earlier(ssr_history[step_sequence]) - 1 
			  )
			  var res =  SUMX(filt_tbl, ssr_history[stkhlds_all_adj_dur]) 
			  return res 
			```
		lineageTag: daf8ad9d-3545-47df-800d-8975254e1169
		summarizeBy: sum

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'col.step_owner_group' = RELATED(users[trueai_group])
		lineageTag: 1ed75141-e3bf-4135-8e4f-2e70619ab61f
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.simplified_outcome' =
			if(ssr_history[step_success],
			
			    SWITCH(ssr_history[step_name], "Lead Gen", "Unique SSR Accounts Generated", "Untouched", "Touched", "Prospecting", "Converted", "New Logo Selling", "Won", "Post-Sales Support", "Supported",  "Existing Customer Selling", "Upsold/Renewed")
			
			
			 , Blank())
		lineageTag: eea6beb5-562a-4055-9dd5-fb445d27c51e
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column step_owner_id
		dataType: string
		lineageTag: 1217c3ec-dd59-4251-ac8c-e6cddab5c7c5
		summarizeBy: none
		sourceColumn: step_owner_id

		annotation SummarizationSetBy = Automatic

	column step_owner_act
		dataType: double
		lineageTag: e3420d7c-342b-4647-8a08-5692c42388f3
		summarizeBy: sum
		sourceColumn: step_owner_act

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column _sys_doc_id
		dataType: string
		lineageTag: 98634ecd-6f2c-41c4-8986-ba626f617226
		summarizeBy: none
		sourceColumn: _sys_doc_id

		annotation SummarizationSetBy = Automatic

	column _sys_filt_end_date
		dataType: dateTime
		formatString: Short Date
		lineageTag: 2be37d3f-dbfb-4955-920a-feca87932e51
		summarizeBy: none
		sourceColumn: _sys_filt_end_date

		changedProperty = FormatString

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column _sys_filt_start_date
		dataType: dateTime
		formatString: Short Date
		lineageTag: 23a520c8-6ebc-4f11-96bc-97c9d641fbb9
		summarizeBy: none
		sourceColumn: _sys_filt_start_date

		changedProperty = FormatString

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column entity_primary_crm_complt
		dataType: double
		lineageTag: 0e4fa3ae-76b1-455e-8f18-24d752445d9d
		summarizeBy: sum
		sourceColumn: entity_primary_crm_complt

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column entity_primary_doc_id
		dataType: string
		lineageTag: e08bffba-0231-47bb-834a-688fd93b4604
		summarizeBy: none
		sourceColumn: entity_primary_doc_id

		annotation SummarizationSetBy = Automatic

	column entity_primary_trueai_complt
		dataType: double
		lineageTag: 5a29ce3c-7872-42e4-a5d0-6f4fb695cd6b
		summarizeBy: sum
		sourceColumn: entity_primary_trueai_complt

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column opp_booking_amt
		dataType: double
		lineageTag: 8ae7cae8-60d7-41a8-b7b1-c305f09c1ad9
		summarizeBy: sum
		sourceColumn: opp_booking_amt

		changedProperty = FormatString

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column opp_initial_amt
		dataType: double
		lineageTag: 98f335ce-efd7-44a5-8d90-0326a7004574
		summarizeBy: sum
		sourceColumn: opp_initial_amt

		changedProperty = FormatString

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column opp_pipeline_amt
		dataType: double
		lineageTag: 417c00d1-ec58-426e-bae8-855695396379
		summarizeBy: sum
		sourceColumn: opp_pipeline_amt

		changedProperty = FormatString

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column opp_pred_booking_amt
		dataType: double
		lineageTag: 1bda5bb2-c179-45e8-9fc3-bf3e40294cc2
		summarizeBy: sum
		sourceColumn: opp_pred_booking_amt

		changedProperty = FormatString

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column opp_won_amt
		dataType: double
		lineageTag: 177ec92b-a617-4998-a69b-8e2a3b3cc94f
		summarizeBy: sum
		sourceColumn: opp_won_amt

		changedProperty = FormatString

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column step_owner_act_capt_lvl
		dataType: double
		lineageTag: 02ae9490-6449-4b62-b39e-ed6f470464ba
		summarizeBy: sum
		sourceColumn: step_owner_act_capt_lvl

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column step_owner_dur
		dataType: double
		lineageTag: e73fdfb0-2516-4be7-937b-b8ca3d2a73ee
		summarizeBy: sum
		sourceColumn: step_owner_dur

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column step_users_tot
		dataType: int64
		formatString: 0
		lineageTag: 58da960a-5ec4-4e99-9838-ac6917228958
		summarizeBy: sum
		sourceColumn: step_users_tot

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_count
		dataType: int64
		formatString: #,0
		lineageTag: 71a9f99c-e0e1-4851-93f0-ce79ffd6937e
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_eng_count
		dataType: int64
		formatString: #,0
		lineageTag: 31bebbf1-6b30-44f4-a329-bdd4c8c2bd41
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_adj_dur
		dataType: double
		lineageTag: c5891df4-a70e-4197-8815-6c18f63aaebc
		summarizeBy: sum
		sourceColumn: stkhlds_all_adj_dur

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column stkhlds_all_contacts_count
		dataType: int64
		formatString: #,0
		lineageTag: c5858972-99fd-431a-b030-1bc6df7f24e9
		summarizeBy: sum
		sourceColumn: stkhlds_all_contacts_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_dur
		dataType: double
		lineageTag: 47c81276-0894-46aa-8ff4-5abb6c7631fe
		summarizeBy: sum
		sourceColumn: stkhlds_all_dur

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column stkhlds_all_dur_eng
		dataType: double
		lineageTag: 82eb4a00-6cd9-4aba-92bd-0e14c63a797e
		summarizeBy: sum
		sourceColumn: stkhlds_all_dur_eng

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column stkhlds_all_first_act
		dataType: dateTime
		formatString: General Date
		lineageTag: 47d6b1a5-6bda-4393-98da-4b927eecc0a7
		summarizeBy: none
		sourceColumn: stkhlds_all_first_act

		variation Variation
			isDefault
			relationship: f1e76c94-18bb-4430-980b-5418a566800b
			defaultHierarchy: LocalDateTable_5b19cd86-57e8-474f-b656-9bcb6c4081c3.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_last_act
		dataType: dateTime
		formatString: General Date
		lineageTag: ef0dcee2-060d-4d00-a78f-d30ce46501aa
		summarizeBy: none
		sourceColumn: stkhlds_all_last_act

		variation Variation
			isDefault
			relationship: 09670632-3532-4556-b5b0-bd45b7dac19a
			defaultHierarchy: LocalDateTable_51053ab1-68ea-4e15-b30f-d8dfc4ca4725.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_max_title_seniority
		dataType: string
		lineageTag: b98862f3-25c8-4e18-82d6-9591c665ecc1
		summarizeBy: none
		sourceColumn: stkhlds_all_max_title_seniority

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_most_common_title_dept
		dataType: string
		lineageTag: 1c1b1452-c838-4696-9eb2-d420781e8c2e
		summarizeBy: none
		sourceColumn: stkhlds_all_most_common_title_dept

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_most_common_title_seniority
		dataType: string
		lineageTag: d4ff7a74-283d-4b28-ab2c-449c2315ea70
		summarizeBy: none
		sourceColumn: stkhlds_all_most_common_title_seniority

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_unique_title_depts
		dataType: int64
		formatString: 0
		lineageTag: 85a84794-3de7-463e-9f02-bd81171347a1
		summarizeBy: sum
		sourceColumn: stkhlds_all_unique_title_depts

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_unique_title_seniorities
		dataType: int64
		formatString: 0
		lineageTag: 374d0e93-6abe-4419-ac05-91e9466addbd
		summarizeBy: sum
		sourceColumn: stkhlds_all_unique_title_seniorities

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_contact_act_count
		dataType: int64
		formatString: #,0
		lineageTag: 47497a18-ba5f-4608-945d-9bb6f7a4f740
		summarizeBy: sum
		sourceColumn: stkhlds_primary_contact_act_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_contact_act_eng_count
		dataType: int64
		formatString: #,0
		lineageTag: 5de2e8d0-fd61-441b-b47f-083c45dcfdaf
		summarizeBy: sum
		sourceColumn: stkhlds_primary_contact_act_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_contact_dur
		dataType: double
		lineageTag: e9bf2186-6744-4644-bc0a-0c076caacf7c
		summarizeBy: sum
		sourceColumn: stkhlds_primary_contact_dur

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column stkhlds_primary_contact_eng_dur
		dataType: double
		lineageTag: 2b0200b3-5dd7-4089-8952-f99e47ac6c0e
		summarizeBy: sum
		sourceColumn: stkhlds_primary_contact_eng_dur

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column stkhlds_primary_contact_first_act
		dataType: dateTime
		formatString: General Date
		lineageTag: d54740e9-4498-4bb8-8fac-77b8b54c6aef
		summarizeBy: none
		sourceColumn: stkhlds_primary_contact_first_act

		variation Variation
			isDefault
			relationship: b8862130-64d8-4901-988c-6aa13ab15764
			defaultHierarchy: LocalDateTable_8f4e1a9e-fe46-48bc-bf66-423dad2997f6.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_contact_last_act
		dataType: dateTime
		formatString: General Date
		lineageTag: b0b1a1d4-51a6-4e94-ac36-342a1aaff399
		summarizeBy: none
		sourceColumn: stkhlds_primary_contact_last_act

		variation Variation
			isDefault
			relationship: 7aa38616-4c67-4c75-8f99-732c14ca020a
			defaultHierarchy: LocalDateTable_ad5c52b5-bbcb-49ba-ab43-c0985c6be934.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_contact_title_dept
		dataType: string
		lineageTag: 974ca049-9a66-4cce-9445-eada055c3933
		summarizeBy: none
		sourceColumn: stkhlds_primary_contact_title_dept

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_contact_title_seniority
		dataType: string
		lineageTag: 3055b02a-8f51-43a8-b12b-64dc42598a7b
		summarizeBy: none
		sourceColumn: stkhlds_primary_contact_title_seniority

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_entity_id
		dataType: string
		lineageTag: 83390e24-2227-4deb-a3e6-a95eae4c7534
		summarizeBy: none
		sourceColumn: stkhlds_primary_entity_id

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_contact_act_count
		dataType: int64
		formatString: #,0
		lineageTag: 50356432-1a75-4d93-9437-30b16b934f61
		summarizeBy: sum
		sourceColumn: stkhlds_secondary_contact_act_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_contact_act_eng_count
		dataType: int64
		formatString: #,0
		lineageTag: 448fbc5c-aff2-4981-8c73-f99387f5accc
		summarizeBy: sum
		sourceColumn: stkhlds_secondary_contact_act_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_contact_dur
		dataType: double
		lineageTag: 300b10e4-19b1-4f75-917a-fb60f53e5466
		summarizeBy: sum
		sourceColumn: stkhlds_secondary_contact_dur

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column stkhlds_secondary_contact_eng_dur
		dataType: double
		lineageTag: 410eec94-4497-4197-8d4c-aa9b643ee41e
		summarizeBy: sum
		sourceColumn: stkhlds_secondary_contact_eng_dur

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column stkhlds_secondary_contact_first_act
		dataType: dateTime
		formatString: General Date
		lineageTag: 97d33bf8-66d9-4766-8a2d-83a35a2924b7
		summarizeBy: none
		sourceColumn: stkhlds_secondary_contact_first_act

		variation Variation
			isDefault
			relationship: be4dab2f-3503-4eac-aecb-e550cc53097e
			defaultHierarchy: LocalDateTable_a0bc9604-593d-4512-b508-3aae0c2d85ac.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_contact_last_act
		dataType: dateTime
		formatString: General Date
		lineageTag: 18461c8f-e04d-4df3-8168-d9b501ad003d
		summarizeBy: none
		sourceColumn: stkhlds_secondary_contact_last_act

		variation Variation
			isDefault
			relationship: 60fd4f12-109a-4930-b73d-927f7c62a51e
			defaultHierarchy: LocalDateTable_924676e5-8168-46c3-8c71-c7ad3243ca7a.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_contact_title_dept
		dataType: string
		lineageTag: 9e6cb777-85e8-4c6b-afb9-ae2a0c67c591
		summarizeBy: none
		sourceColumn: stkhlds_secondary_contact_title_dept

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_contact_title_seniority
		dataType: string
		lineageTag: b01715d4-fa10-4a6e-9a06-080f0e87e050
		summarizeBy: none
		sourceColumn: stkhlds_secondary_contact_title_seniority

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_entity_id
		dataType: string
		lineageTag: 7af9569c-ba1e-4bd3-8869-675e4d6e1f6c
		summarizeBy: none
		sourceColumn: stkhlds_secondary_entity_id

		annotation SummarizationSetBy = Automatic

	column entity_hat_lead_recycled
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 205e59dd-61c0-4a57-b5e4-6e4b20fce577
		summarizeBy: none
		sourceColumn: entity_hat_lead_recycled

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_adj_dur_rule
		dataType: string
		lineageTag: d6c497f2-6126-4a82-af81-06af7c374d3a
		summarizeBy: none
		sourceColumn: stkhlds_all_adj_dur_rule

		annotation SummarizationSetBy = Automatic

	column account_crm_custom_value_1
		dataType: string
		lineageTag: 88375aed-39ba-4b5f-ba2a-bd2573e9aae7
		summarizeBy: none
		sourceColumn: account_crm_custom_value_1

		annotation SummarizationSetBy = Automatic

	column account_crm_custom_value_2
		dataType: string
		lineageTag: f9655772-39ca-48a0-b939-8ab8dac8fe84
		summarizeBy: none
		sourceColumn: account_crm_custom_value_2

		annotation SummarizationSetBy = Automatic

	column account_crm_custom_value_3
		dataType: string
		lineageTag: 3bf8a983-31a2-4bf8-b8fd-08c81f487857
		summarizeBy: none
		sourceColumn: account_crm_custom_value_3

		annotation SummarizationSetBy = Automatic

	column 'col.opp_acv_classification' = ```
			
			var is_new1 = if(ssr_history[step_name] = "New Logo Selling" , true, False) // new regular
			var is_existing_customer_selling = if(ssr_history[step_name] = "Existing Customer Selling" , true, false) // upsell regular
			var ssr_id = ssr_history[_sys_ssr_id] // get the ssr
			var the_year = yEAR(ssr_history[_sys_filt_end_date]) // get the year
			// if upsell see if there is new in same year then do that as new too
			var filt_new_in_year = FILTER(ssr_history,ssr_history[_sys_ssr_id] = ssr_id && ssr_history[step_name] = "New Logo Selling" && ssr_history[step_outcome] = "Closed Won" && yEAR(ssr_history[_sys_filt_end_date]) = the_year)
			var count_new_in_year = CountX(filt_new_in_year, ssr_history[_sys_doc_id]) // see how any    
			var is_new2 = if(count_new_in_year > 0 , true, false) // set to true 
			var is_new = OR(is_new1, is_new2) // either reg new logo or upsell in new logo year
			var res = If(is_new, "New ACV", If(is_existing_customer_selling, "Existing Customer Selling ACV", blank())) 
			return res  
			```
		lineageTag: e0885800-4e74-4383-acab-efd6398a3bbb
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column entity_qual_bucket_num
		dataType: int64
		formatString: 0
		lineageTag: 55395c02-5438-489b-8369-fa04a22ce700
		summarizeBy: sum
		sourceColumn: entity_qual_bucket_num

		annotation SummarizationSetBy = Automatic

	column 'col.days_pushed_pulled' = [step_length_in_days]-  [col.step_length_in_days_initially_expected]
		dataType: int64
		formatString: """+""#"" days"";""-""#"" days"";""-"""
		lineageTag: fdb80fa4-6f2e-4584-89ca-3dd18b3bda11
		summarizeBy: none

		changedProperty = DataType

		annotation SummarizationSetBy = User

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column step_success_prob_factors
		dataType: string
		lineageTag: 711684a5-433c-4ffe-9faf-830cb710ec09
		summarizeBy: none
		sourceColumn: step_success_prob_factors

		annotation SummarizationSetBy = Automatic

	column vi_value_repeat
		dataType: double
		lineageTag: ff5424f6-d60f-449e-9455-c4688eeaead4
		summarizeBy: sum
		sourceColumn: vi_value_repeat

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column step_received_from_id
		dataType: string
		lineageTag: df16d2f4-a465-4833-9f07-245e454720cf
		summarizeBy: none
		sourceColumn: step_received_from_id

		annotation SummarizationSetBy = Automatic

	column step_handed_off_to_id
		dataType: string
		lineageTag: aca469da-70fe-4143-805e-7d1e437abd66
		summarizeBy: none
		sourceColumn: step_handed_off_to_id

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_entity_type
		dataType: string
		lineageTag: 63f0f048-2e54-4b42-8862-821578932252
		summarizeBy: none
		sourceColumn: stkhlds_primary_entity_type

		annotation SummarizationSetBy = Automatic

	column _sys_as_of
		dataType: dateTime
		formatString: Short Date
		lineageTag: bf58fb5c-3b70-4cce-afe8-8c018b30136e
		summarizeBy: none
		sourceColumn: _sys_as_of

		variation Variation
			isDefault
			relationship: 0e183a07-e926-480a-93f7-3d0bedc96f2c
			defaultHierarchy: LocalDateTable_456b6003-f356-4032-bba8-6548eae6d311.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column step_manager_act
		dataType: int64
		formatString: 0
		lineageTag: 704088eb-f885-47d0-8bf4-11460ab52bee
		summarizeBy: sum
		sourceColumn: step_manager_act

		annotation SummarizationSetBy = Automatic

	column step_owner_expected_dur
		dataType: double
		lineageTag: 1104870b-c1c8-4e2b-8a61-bca58da93334
		summarizeBy: sum
		sourceColumn: step_owner_expected_dur

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column stkhlds_all_act_type_auto_email_count
		dataType: int64
		formatString: 0
		lineageTag: bc880782-788f-46ed-999b-2e70dc8fecf8
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_auto_email_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_auto_email_eng_count
		dataType: int64
		formatString: 0
		lineageTag: 4b323c6f-94bc-428b-b365-7ceb3b14a795
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_auto_email_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_email_count
		dataType: int64
		formatString: 0
		lineageTag: 522115ad-35b3-4f30-9109-c87cc5171e0b
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_email_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_email_eng_count
		dataType: int64
		formatString: 0
		lineageTag: d291bfaa-605d-438e-a25e-f1970946fda2
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_email_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_first_eng
		dataType: dateTime
		formatString: General Date
		lineageTag: 04e5492c-7e55-4a74-9cce-16f9cccfb0ee
		summarizeBy: none
		sourceColumn: stkhlds_all_first_eng

		variation Variation
			isDefault
			relationship: 84c9f3e8-1179-4eee-85da-72d4b6408a14
			defaultHierarchy: LocalDateTable_7ef030c0-4c5b-45f7-8aed-c313c1acef23.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_last_eng
		dataType: dateTime
		formatString: Short Date
		lineageTag: 2561365d-94b9-4995-b1b1-0d10c70442ad
		summarizeBy: none
		sourceColumn: stkhlds_all_last_eng

		variation Variation
			isDefault
			relationship: ab887a93-03f6-4ce4-826e-41a386f756d7
			defaultHierarchy: LocalDateTable_11619a7a-5e06-4c9d-802d-b29c23d4b93b.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_meeting_count
		dataType: int64
		formatString: 0
		lineageTag: f9173e1e-ef84-4ea9-860c-34be3e13296b
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_meeting_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_meeting_eng_count
		dataType: int64
		formatString: 0
		lineageTag: 0e543961-e66e-4f95-b6e8-3255c53ffe80
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_meeting_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_nd_count
		dataType: int64
		formatString: 0
		lineageTag: 7daaec31-3399-49d6-9cec-6f57986073cb
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_nd_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_nd_eng_count
		dataType: int64
		formatString: 0
		lineageTag: 0f83610b-06b3-4790-bba0-db0c7636c36a
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_nd_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_no_interaction_count
		dataType: int64
		formatString: 0
		lineageTag: 47dbe7a1-58ab-4757-a3de-801b86740f03
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_no_interaction_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_no_interaction_eng_count
		dataType: int64
		formatString: 0
		lineageTag: a31dfc2f-9c5a-45fd-8b55-538ea5f1bd7b
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_no_interaction_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_call_count
		dataType: int64
		formatString: 0
		lineageTag: 7acfaa7e-7c6d-4691-98bc-10efec0f3048
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_call_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_call_eng_count
		dataType: int64
		formatString: 0
		lineageTag: b33e1164-4e97-4b90-9e4c-75c9dcfe7797
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_call_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_social_count
		dataType: int64
		formatString: 0
		lineageTag: 60f04e31-1aac-454f-898d-7e5bb4ce3b5f
		summarizeBy: sum
		sourceColumn: stkhlds_all_social_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_act_type_social_eng_count
		dataType: int64
		formatString: 0
		lineageTag: 6829b607-ed7c-45fc-b895-18c28c47ceb5
		summarizeBy: sum
		sourceColumn: stkhlds_all_act_type_social_eng_count

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_contact_first_eng
		dataType: dateTime
		formatString: General Date
		lineageTag: b8128fa3-4774-4f4b-bccc-325673bfea3e
		summarizeBy: none
		sourceColumn: stkhlds_primary_contact_first_eng

		variation Variation
			isDefault
			relationship: 702dc0cb-1ce3-4afd-af6b-666d3f21c20a
			defaultHierarchy: LocalDateTable_0f6ae111-65d8-40e0-91dc-679857e0b73d.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_primary_contact_last_eng
		dataType: dateTime
		formatString: General Date
		lineageTag: 99679d98-991d-403b-b990-c86dbf58718c
		summarizeBy: none
		sourceColumn: stkhlds_primary_contact_last_eng

		variation Variation
			isDefault
			relationship: 60835e84-1ac1-4af8-8f3b-9134db1af04a
			defaultHierarchy: LocalDateTable_c8c5cfe7-7ab7-4734-8904-49005551aa4a.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_contact_first_eng
		dataType: dateTime
		formatString: General Date
		lineageTag: 892192d7-668d-49ec-8616-b14ae44d50ba
		summarizeBy: none
		sourceColumn: stkhlds_secondary_contact_first_eng

		variation Variation
			isDefault
			relationship: 24ae91e5-8515-47b2-8d40-88c84304edb6
			defaultHierarchy: LocalDateTable_39ef2f23-9a57-45c0-938b-adcde5ecaf4d.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_contact_last_eng
		dataType: dateTime
		formatString: General Date
		lineageTag: dfe343a6-b0e4-497e-8bca-8b50886c1cb7
		summarizeBy: none
		sourceColumn: stkhlds_secondary_contact_last_eng

		variation Variation
			isDefault
			relationship: 7351f781-32e7-4e1c-81ef-1b57273b3430
			defaultHierarchy: LocalDateTable_217ab739-8a64-49d5-806c-e186422d6f78.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column stkhlds_secondary_entity_type
		dataType: string
		lineageTag: fd78556d-6f31-43c2-8267-86b947b2a5a0
		summarizeBy: none
		sourceColumn: stkhlds_secondary_entity_type

		annotation SummarizationSetBy = Automatic

	column step_name_bucket_num
		dataType: string
		lineageTag: 17e64dab-d3ad-4e74-825e-4058f0238617
		summarizeBy: none
		sourceColumn: step_name_bucket_num

		annotation SummarizationSetBy = Automatic

	column step_sub_type
		dataType: string
		lineageTag: b009acd2-e857-46d2-9fbb-21e13f460932
		summarizeBy: none
		sourceColumn: step_sub_type

		annotation SummarizationSetBy = Automatic

	column stkhlds_all_adj_eng_dur
		dataType: double
		lineageTag: dad2ab01-c532-4403-ba6b-3ea889749712
		summarizeBy: sum
		sourceColumn: stkhlds_all_adj_eng_dur

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column stkhlds_all_adj_dur_conf
		dataType: double
		lineageTag: cc73e859-43c6-414f-92e2-a07585f1ed1b
		summarizeBy: sum
		sourceColumn: stkhlds_all_adj_dur_conf

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column entity_hat_lead_restarted
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 13d62fa2-6f86-4675-8a28-96ccc5e65204
		summarizeBy: none
		sourceColumn: entity_hat_lead_restarted

		annotation SummarizationSetBy = Automatic

	column entity_hat_lead_winback
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: d7ef8f07-0114-441e-8898-6e6bce015d62
		summarizeBy: none
		sourceColumn: entity_hat_lead_winback

		annotation SummarizationSetBy = Automatic

	column opp_upsell_expansion
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: c528229e-fdfc-43e4-9392-15120f45a2ad
		summarizeBy: none
		sourceColumn: opp_upsell_expansion

		annotation SummarizationSetBy = Automatic

	column opp_upsell_downgrade
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: bc3f04ef-5e59-4681-a660-740826ed879f
		summarizeBy: none
		sourceColumn: opp_upsell_downgrade

		annotation SummarizationSetBy = Automatic

	column opp_upsell_cross_sale
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: e73135aa-f6b2-441c-b74e-16530654c9fd
		summarizeBy: none
		sourceColumn: opp_upsell_cross_sale

		annotation SummarizationSetBy = Automatic

	column opp_upsell_renewal
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 2e934ca1-7915-408c-a05b-a79eb373cd71
		summarizeBy: none
		sourceColumn: opp_upsell_renewal

		annotation SummarizationSetBy = Automatic

	column opp_upsell_combination
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 4a21de6e-d7cd-451f-b818-66fe66411d8f
		summarizeBy: none
		sourceColumn: opp_upsell_combination

		annotation SummarizationSetBy = Automatic

	column opp_existing_customer_selling_expansion
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 09a94a4b-09ad-4e23-b575-2cef4f473756
		summarizeBy: none
		sourceColumn: opp_existing_customer_selling_expansion

		annotation SummarizationSetBy = Automatic

	column opp_existing_customer_selling_downgrade
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 28e2adb5-3864-4834-8cfd-59c85d26a8c1
		summarizeBy: none
		sourceColumn: opp_existing_customer_selling_downgrade

		annotation SummarizationSetBy = Automatic

	column opp_existing_customer_selling_cross_sale
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: ce644183-e9d5-4af9-a636-e4aed2936c5e
		summarizeBy: none
		sourceColumn: opp_existing_customer_selling_cross_sale

		annotation SummarizationSetBy = Automatic

	column opp_existing_customer_selling_renewal
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: ea2aa64b-6bdc-425c-9a75-17abe9581c96
		summarizeBy: none
		sourceColumn: opp_existing_customer_selling_renewal

		annotation SummarizationSetBy = Automatic

	column opp_existing_customer_selling_combination
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: b4948d61-8363-4c80-b014-17181a8ff95e
		summarizeBy: none
		sourceColumn: opp_existing_customer_selling_combination

		annotation SummarizationSetBy = Automatic

	column 'col.entity_qual_bucket_next' = ```
			
			 VAR _next_step_prob = [step_next_success_prob]         // get the step_next_success_prob
			
			VAR _current_step_name = quality_buckets[meas.quality_buckets_step_name]          // get the current step_name
			
			VAR _step_name = SWITCH(
			    TRUE(),
			    _current_step_name = "Prospecting", "New Logo Selling",
			    _current_step_name = "Post-Sales Support", "Existing Customer Selling"      // get the right step name 
			)
			
			VAR bucket_name = CALCULATE(
			    MAX(quality_buckets[bucket]),
			    ssr_history[step_name]=_step_name,
			    _next_step_prob >= quality_buckets[prob_lower_bound],       // get the qual bucket for the _step defined above and the qual bucket in between
			    _next_step_prob <= quality_buckets[prob_upper_bound]
			)
			
			
			
			RETURN
			bucket_name
			```
		lineageTag: 5c5cc723-60b2-44bb-9d31-5f7dd1cfb179
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.entity_qual_bucket_next_num' = ```
			
			 VAR _next_step_prob = [step_next_success_prob]         // get the step_next_success_prob
			
			VAR _current_step_name = quality_buckets[meas.quality_buckets_step_name]          // get the current step_name
			
			VAR _step_name = SWITCH(
			    TRUE(),
			    _current_step_name = "Prospecting", "New Logo Selling",
			    _current_step_name = "Post-Sales Support", "Existing Customer Selling"      // get the right step name 
			)
			
			VAR bucket_name = CALCULATE(
			    MAX(quality_buckets[bucket]),
			    ssr_history[step_name]=_step_name,
			    _next_step_prob >= quality_buckets[prob_lower_bound],       // get the qual bucket for the _step defined above and the qual bucket in between
			    _next_step_prob <= quality_buckets[prob_upper_bound]
			)
			
			VAR res = IF( bucket_name ="Lowest", 1,
			            IF(bucket_name = "Low", 2,
			                   IF( bucket_name = "Mid", 3,
			                        IF( bucket_name = "High", 4,
			                            IF(bucket_name="Highest", 5
			                            )
			                        )
			                   )
			            )
			        )
			
			RETURN
			res
			```
		formatString: 0
		lineageTag: 9ea17f1b-e5a8-4779-9971-e4b180883dfb
		summarizeBy: sum

		annotation SummarizationSetBy = Automatic

	column 'col.sales_steps_opp_id' = ```
			
			var res = IF(ssr_history[step_name] in {"New Logo Selling", "Existing Customer Selling"}, [entity_opp_id], BLANK())     // only include for steps specified that tied to opps table 
			
			RETURN
			res
			
			```
		lineageTag: 84491071-03f3-4910-b3bc-9a77a268efa5
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.sales_engineer_involvement' = ```
			
			
			IF(
			    [step_sales_engineer_involved] = True ,     // rename the column in the matrix 
			    "Deals With Sales Engineer Involvement",
			    "Deals Without Sales Engineer Involvement"
			)
			```
		lineageTag: f0f00393-3134-42b4-b102-347456653ed1
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column opp_erp
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 1ddd0e17-5df4-4935-be49-4acdb6f90390
		summarizeBy: none
		sourceColumn: opp_erp

		annotation SummarizationSetBy = Automatic

	column step_mgr_involved
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: cba1e772-70be-4540-8393-c233982dd2ef
		summarizeBy: none
		sourceColumn: step_mgr_involved

		annotation SummarizationSetBy = Automatic

	column step_sales_engineer_involved
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 201092fa-3d20-4be4-afd6-377dc6f00d4b
		summarizeBy: none
		sourceColumn: step_sales_engineer_involved

		annotation SummarizationSetBy = Automatic

	column 'col.step_outcome' =
			
			var _step_name = IF(ISBLANK(ssr_history[step_outcome]),[step_name], BLANK())
			var _step_outcome = [step_outcome]
			
			var res = IF(
			    ISBLANK(_step_name), _step_outcome,
			    IF(
			        _step_name="Untouched" && _step_outcome="Untouched", "Untouched",
			        IF(
			            _step_name="Prospecting" && _step_outcome="Prospecting", "Prospecting",
			            _step_name
			        )
			    )
			)
			
			RETURN
			res
		lineageTag: a413fd8c-c1f2-40bf-8f58-d284f9d13152
		summarizeBy: none
		sortByColumn: 'col.step_outcome_sort'

		changedProperty = SortByColumn

		annotation SummarizationSetBy = Automatic

	column 'col.step_outcome_sort' = ```
			
			var _outcome = IF(
			    ISBLANK(ssr_history[step_outcome]),
			    "Currently " & ssr_history[step_name],
			    ssr_history[step_outcome]
			)
			RETURN
			SWITCH(
			    _outcome,
			    "Untouched",1,
			    "Currently Untouched",2,
			    "Prospecting",3,
			    "Currently Prospecting",4,          // set the number to sort the col. step outcome
			    "Abandoned",5,
			    "Currently New Logo Selling",6,
			    "Currently Post-Sales Support",7,
			    "Currently Existing Customer Selling",8,
			    9
			)
			
			```
		formatString: 0
		lineageTag: e7570bd8-4e35-4cfd-8c64-54ef6a3aa4ec
		summarizeBy: sum

		annotation SummarizationSetBy = Automatic

	column 'col.step_outcome_new' = ```
			
			var _step_name = IF(ISBLANK(ssr_history[step_outcome]),[step_name], BLANK())                // get the step_name where don't have any outcome
			var _step_outcome = [step_outcome]              // get the step outcome
			
			var res = IF(
			    ISBLANK(_step_name), _step_outcome,
			    IF(
			        _step_name="Untouched" && _step_outcome="Untouched", "Untouched",           // make the condition to display the 
			        IF(
			            _step_name="Prospecting" && _step_outcome="Prospecting", "Prospecting",
			            _step_name
			        )
			    )
			)
			
			RETURN
			res
			```
		lineageTag: 85f30200-c51b-4842-8a8e-8a11b558ebdc
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.crm_full_name' =
			
			var _id = [step_owner_id]
			var res = CALCULATE(
			    MAX(users[col.full_name]),
			    users[_sys_doc_id]=_id
			)
			RETURN
			res
		lineageTag: b56278fa-39fb-4cbe-a827-b04c7a2d8be6
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column 'col.step_owner_role_aliased' = RELATED(users[col.trueai_user_role_coid_aliased])
		lineageTag: 7bcb8244-c31e-4cef-ae43-204e115d0461
		summarizeBy: none

		annotation SummarizationSetBy = Automatic

	column opp_lost_crm_stage
		dataType: string
		lineageTag: e6c96675-1fb8-428f-a0c8-332a3b09505e
		summarizeBy: none
		sourceColumn: opp_lost_crm_stage

		annotation SummarizationSetBy = Automatic

	column opp_crm_pipeline_name
		dataType: string
		lineageTag: 8489e9ea-7526-49a4-a892-dda09c4c8377
		summarizeBy: none
		sourceColumn: opp_crm_pipeline_name

		annotation SummarizationSetBy = Automatic

	column opp_stage
		dataType: string
		lineageTag: abb6c752-ab5f-4743-a843-a6e34f180942
		summarizeBy: none
		sourceColumn: opp_stage

		annotation SummarizationSetBy = Automatic

	column opp_pipeline_name
		dataType: string
		lineageTag: 9f742945-cedb-479e-a901-cbcdff041223
		summarizeBy: none
		sourceColumn: opp_pipeline_name

		annotation SummarizationSetBy = Automatic

	column step_sdr_count_involved
		dataType: int64
		formatString: 0
		lineageTag: 908d684b-599e-4c4a-8925-86ae25b7c676
		summarizeBy: sum
		sourceColumn: step_sdr_count_involved

		annotation SummarizationSetBy = Automatic

	column step_ae_count_involved
		dataType: int64
		formatString: 0
		lineageTag: 3da6bf4d-c2f8-425f-8a79-406e804f5fb9
		summarizeBy: sum
		sourceColumn: step_ae_count_involved

		annotation SummarizationSetBy = Automatic

	column step_am_count_involved
		dataType: int64
		formatString: 0
		lineageTag: 64b4e31d-96c8-4cb4-bf98-cd187ae675eb
		summarizeBy: sum
		sourceColumn: step_am_count_involved

		annotation SummarizationSetBy = Automatic

	column step_mkt_count_involved
		dataType: int64
		formatString: 0
		lineageTag: fa47be53-2ca9-411e-a7ba-5e5bf7f34789
		summarizeBy: sum
		sourceColumn: step_mkt_count_involved

		annotation SummarizationSetBy = Automatic

	column step_other_count_involved
		dataType: int64
		formatString: 0
		lineageTag: 15cff750-a58d-4d15-a6ae-fb998b3dc3a5
		summarizeBy: sum
		sourceColumn: step_other_count_involved

		annotation SummarizationSetBy = Automatic

	column step_mgmt_count_involved
		dataType: int64
		formatString: 0
		lineageTag: 0b5c1064-4f87-485e-9827-b0bb09a8f94f
		summarizeBy: sum
		sourceColumn: step_mgmt_count_involved

		annotation SummarizationSetBy = Automatic

	partition ssr_history-42b745a5-3afa-43a2-90f2-f7965fced67a = m
		mode: import
		source =
				let
				  dbTable = getDBTable("ssr_history"), // get the right table
				
				
				  dbTableTyped = Table.TransformColumnTypes(dbTable,{ // change types to what we're expecting
				{"_sys_as_of", type datetime},
				{"_sys_doc_id", type text},
				{"_sys_filt_end_date", type date},
				{"_sys_filt_start_date", type date},
				{"_sys_ssr_id", type text},
				{"account_crm_custom_value_1", type text},
				{"account_crm_custom_value_2", type text},
				{"account_crm_custom_value_3", type text},
				{"entity_account_id", type text},
				{"entity_crm_custom_value_1", type text},
				{"entity_crm_custom_value_2", type text},
				{"entity_crm_custom_value_3", type text},
				{"entity_hat_lead_recycled", type logical},
				{"entity_hat_lead_restarted", type logical},
				{"entity_hat_lead_winback", type logical},
				{"entity_lead_id", type text},
				{"entity_opp_id", type text},
				{"entity_primary", type text},
				{"entity_primary_crm_complt", type number},
				{"entity_primary_doc_id", type text},
				{"entity_primary_trueai_complt", type number},
				{"entity_qual_bucket", type text},
				{"entity_qual_bucket_num", Int64.Type},
				{"opp_booking_amt", type number},
				{"opp_crm_pipeline_name", type text},
				{"opp_crm_stage", type text},
				{"opp_crm_type", type text},
				{"opp_erp", type logical},
				{"opp_existing_customer_selling_combination", type logical},
				{"opp_existing_customer_selling_cross_sale", type logical},
				{"opp_existing_customer_selling_downgrade", type logical},
				{"opp_existing_customer_selling_expansion", type logical},
				{"opp_existing_customer_selling_renewal", type logical},
				{"opp_final_stage", type text},
				{"opp_initial_amt", type number},
				{"opp_initial_close_date", type datetime},
				{"opp_late_date", type datetime},
				{"opp_lost_crm_stage", type text},
				{"opp_lost_stage", type text},
				{"opp_mid_date", type datetime},
				{"opp_pipeline_amt", type number},
				{"opp_pipeline_name", type text},
				{"opp_pred_booking_amt", type number},
				{"opp_sale_type", type text},
				{"opp_stage", type text},
				{"opp_upsell_combination", type logical},
				{"opp_upsell_cross_sale", type logical},
				{"opp_upsell_downgrade", type logical},
				{"opp_upsell_expansion", type logical},
				{"opp_upsell_renewal", type logical},
				{"opp_won_amt", type number},
				{"step_ae_count_involved", Int64.Type},
				{"step_am_count_involved", Int64.Type},
				{"step_end_date", type datetime},
				{"step_end_rule", Int64.Type},
				{"step_handed_off_to_id", type text},
				{"step_id", type text},
				{"step_length_in_days", Int64.Type},
				{"step_mgmt_count_involved", Int64.Type},
				{"step_mgr_act", Int64.Type},
				{"step_mgr_involved", type logical},
				{"step_mkt_count_involved", Int64.Type},
				{"step_name", type text},
				{"step_next_success_prob", type number},
				{"step_other_count_involved", Int64.Type},
				{"step_outcome", type text},
				{"step_outcome_rule", Int64.Type},
				{"step_owner_act", type number},
				{"step_owner_act_capt_lvl", type number},
				{"step_owner_dur", type number},
				{"step_owner_expected_dur", type number},
				{"step_owner_id", type text},
				{"step_owner_prep_factor", type number},
				{"step_owner_rule", Int64.Type},
				{"step_owner_user_role", type text},
				{"step_received_from_id", type text},
				{"step_sales_engineer_involved", type logical},
				{"step_sdr_count_involved", Int64.Type},
				{"step_sequence", Int64.Type},
				{"step_start_date", type datetime},
				{"step_sub_type", type text},
				{"step_success", type logical},
				{"step_success_prob", type number},
				{"step_success_prob_factors", type text},
				{"step_users_tot", Int64.Type},
				{"stkhlds_all_act_count", Int64.Type},
				{"stkhlds_all_act_eng_count", Int64.Type},
				{"stkhlds_all_act_type_auto_email_count", Int64.Type},
				{"stkhlds_all_act_type_auto_email_eng_count", Int64.Type},
				{"stkhlds_all_act_type_call_count", Int64.Type},
				{"stkhlds_all_act_type_call_eng_count", Int64.Type},
				{"stkhlds_all_act_type_email_count", Int64.Type},
				{"stkhlds_all_act_type_email_eng_count", Int64.Type},
				{"stkhlds_all_act_type_meeting_count", Int64.Type},
				{"stkhlds_all_act_type_meeting_eng_count", Int64.Type},
				{"stkhlds_all_act_type_nd_count", Int64.Type},
				{"stkhlds_all_act_type_nd_eng_count", Int64.Type},
				{"stkhlds_all_act_type_no_interaction_count", Int64.Type},
				{"stkhlds_all_act_type_no_interaction_eng_count", Int64.Type},
				{"stkhlds_all_act_type_social_count", Int64.Type},
				{"stkhlds_all_act_type_social_eng_count", Int64.Type},
				{"stkhlds_all_adj_dur", type number},
				{"stkhlds_all_adj_dur_conf", type number},
				{"stkhlds_all_adj_dur_rule", Int64.Type},
				{"stkhlds_all_adj_eng_dur", type number},
				{"stkhlds_all_contacts_count", Int64.Type},
				{"stkhlds_all_dur", type number},
				{"stkhlds_all_dur_eng", type number},
				{"stkhlds_all_first_act", type datetime},
				{"stkhlds_all_first_eng", type datetime},
				{"stkhlds_all_last_act", type datetime},
				{"stkhlds_all_last_eng", type datetime},
				{"stkhlds_all_max_title_seniority", type text},
				{"stkhlds_all_most_common_title_dept", type text},
				{"stkhlds_all_most_common_title_seniority", type text},
				{"stkhlds_all_unique_title_depts", Int64.Type},
				{"stkhlds_all_unique_title_seniorities", Int64.Type},
				{"stkhlds_primary_contact_act_count", Int64.Type},
				{"stkhlds_primary_contact_act_eng_count", Int64.Type},
				{"stkhlds_primary_contact_dur", type number},
				{"stkhlds_primary_contact_eng_dur", type number},
				{"stkhlds_primary_contact_first_act", type datetime},
				{"stkhlds_primary_contact_first_eng", type datetime},
				{"stkhlds_primary_contact_last_act", type datetime},
				{"stkhlds_primary_contact_last_eng", type datetime},
				{"stkhlds_primary_contact_title_dept", type text},
				{"stkhlds_primary_contact_title_seniority", type text},
				{"stkhlds_primary_entity_id", type text},
				{"stkhlds_primary_entity_type", type text},
				{"stkhlds_secondary_contact_act_count", Int64.Type},
				{"stkhlds_secondary_contact_act_eng_count", Int64.Type},
				{"stkhlds_secondary_contact_dur", type number},
				{"stkhlds_secondary_contact_eng_dur", type number},
				{"stkhlds_secondary_contact_first_act", type datetime},
				{"stkhlds_secondary_contact_first_eng", type datetime},
				{"stkhlds_secondary_contact_last_act", type datetime},
				{"stkhlds_secondary_contact_last_eng", type datetime},
				{"stkhlds_secondary_contact_title_dept", type text},
				{"stkhlds_secondary_contact_title_seniority", type text},
				{"stkhlds_secondary_entity_id", type text},
				{"stkhlds_secondary_entity_type", type text},
				{"vi_value_created", type number},
				{"vi_value_delivered", type number},
				{"vi_value_repeat", type number}
				    }),
				    dbTableTypedRenamed = Table.RenameColumns(dbTableTyped,{{"stkhlds_all_act_type_social_count", "stkhlds_all_social_count"},
				                                                            {"step_mgr_act", "step_manager_act"}}),
				    AddedCombineCol = Table.AddColumn(dbTableTypedRenamed, "step_name_bucket_num", each Text.Combine({[step_name], "-", [entity_qual_bucket]})),
				    TrimmedStepName = Table.TransformColumns(AddedCombineCol,{{"step_name", Text.Trim, type text}, {"step_outcome", Text.Trim, type text}}),
				    TrimmedStepOutcome = Table.TransformColumns(TrimmedStepName,{{"step_outcome", Text.Trim, type text}}),
				    #"Changed Type" = Table.TransformColumnTypes(TrimmedStepOutcome,{{"step_outcome_rule", type text}, {"step_owner_rule", type text}, {"stkhlds_all_adj_dur_rule", type text}}),
				    Removed = Table.Distinct(#"Changed Type", {"_sys_doc_id"})
				in
				    Removed

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

