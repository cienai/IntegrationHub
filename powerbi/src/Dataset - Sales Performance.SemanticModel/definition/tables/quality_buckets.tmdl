table quality_buckets
	lineageTag: 3bca5c50-5b78-4939-8abb-0daae7d2d5cb

	measure 'meas.quality_bucket_prob_lower_pct' =
			
			CALCULATE(MAX(quality_buckets[prob_lower_bound]))   // get the lower bound of probability
		formatString: 0%;-0%;0%
		displayFolder: _quality_measures
		lineageTag: 51f547a1-e575-4c80-b95a-e1444bf7b404

	measure 'meas.quality_bucket_prob_upper_pct' =
			
			CALCULATE(MAX(quality_buckets[prob_upper_bound]))       // get the upper bound of probability
		formatString: 0%;-0%;0%
		displayFolder: _quality_measures
		lineageTag: 804c34d9-baa9-4dec-9223-5c86c07029e6

	measure 'meas.quality_buckets_step_name' = CALCULATE(MAX(quality_buckets[step_name]))     // get the quality bucket step name
		displayFolder: _quality_measures
		lineageTag: 46d3abd7-9013-430f-8f05-1db9082e79d7

	measure 'meas.quality_bucket__new_logo_r2' =
			
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var res =  CALCULATE(AVERAGE(companies_history[di_pred_new_logo_r2]), companies_history[_sys_filt_end_date]=latestDate) // get the  r2 filtered with latest date
			RETURN res
		displayFolder: _quality_measures
		lineageTag: 3321638e-7673-4a69-89ca-5175775dbc2e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_bucket_existing_customer_selling_r2' =
			
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var res =  CALCULATE(AVERAGE(companies_history[di_pred_existing_customer_selling_r2]), companies_history[_sys_filt_end_date]=latestDate) // get the r2 filtered with latest date
			RETURN res
		displayFolder: _quality_measures
		lineageTag: 8be25c12-58a6-4b02-af77-6f700d976268

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_bucket__prospecting_r2' =
			
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var res =  CALCULATE(AVERAGE(companies_history[di_pred_prospecting_r2]), companies_history[_sys_filt_end_date]=latestDate) // get the prospecting r2 filtered with latest date
			RETURN res
		displayFolder: _quality_measures
		lineageTag: f62742ff-57c9-41df-a05e-bc50046ba3b2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_bucket_post_sales_r2' =
			
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var res =  CALCULATE(AVERAGE(companies_history[di_pred_post_sales_r2]), companies_history[_sys_filt_end_date]=latestDate) // get the r2 filtered with latest date
			RETURN res
		displayFolder: _quality_measures
		lineageTag: 2d96f807-9b57-48be-b2e6-abb70ea6a4aa

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_bucket_new_logo_auc' = ```
			
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var res =  CALCULATE(MAX(companies_history[di_pred_new_logo_auc]), companies_history[_sys_filt_end_date]=latestDate) // get the prospecting auc filtered with latest date
			RETURN res 
			```
		displayFolder: _quality_measures
		lineageTag: 2a48bb26-6bc9-43a8-bb65-e6c548ee2d91

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_bucket_existing_customer_selling_auc' = ```
			
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var res =  CALCULATE(MAX(companies_history[di_pred_existing_customer_selling_auc]), companies_history[_sys_filt_end_date]=latestDate) // get the existing customer selling  auc filtered with latest date
			RETURN res 
			```
		displayFolder: _quality_measures
		lineageTag: 1fe4abde-0a9b-47a2-bcbe-c9dfdf21e7bc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_bucket_prospecting_auc' = ```
			
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var res =  CALCULATE(MAX(companies_history[di_pred_prospecting_auc]), companies_history[_sys_filt_end_date]=latestDate) // get the prospecting auc filtered with latest date
			RETURN res 
			```
		displayFolder: _quality_measures
		lineageTag: 032ad037-65a1-4cd9-9aa2-99f6d07577bc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_bucket_post_sales_auc' =
			
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var res =  CALCULATE(MAX(companies_history[di_pred_post_sales_auc]), companies_history[_sys_filt_end_date]=latestDate) // get the prospecting auc filtered with latest date
			RETURN res
		displayFolder: _quality_measures
		lineageTag: 71a5b534-d895-493e-a065-a8b78a8d49c4

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_buckets_bucket_name' =
			
			CALCULATE(MAX(quality_buckets[bucket]))   // get the quality bucket
		displayFolder: _quality_measures
		lineageTag: 7bc22605-1491-40ef-ad18-3d7d51fb3b73

	measure 'meas.quality_bucket_min_max' = ```
			
			var bucket = CALCULATE(
			    MAX(quality_buckets[bucket])		// get the bucket name
			)
			var res =bucket & " " & "(" & FORMAT(quality_buckets[meas.quality_bucket_prob_lower_pct], "0%") & "-" & FORMAT(quality_buckets[meas.quality_bucket_prob_upper_pct],"#%") & ")"  // adding min and max tier pct values with bucket name. for min and max tier, used format to get the % values ol.quality_bucket_min_max 
			RETURN
			IF(
			    HASONEVALUE(quality_buckets[bucket]),
			    res,
			    "Total"
			)
			```
		displayFolder: _quality_measures
		lineageTag: a7e3d12f-8c5b-478f-91f3-ecdf3ab6735d

	measure 'meas.lead_gen_success_count' =
			
			var cnt = CALCULATE(
			    [meas.ssr_history_success_count_lead_gen],
			    ssr_history[entity_qual_bucket_num] in {1,2,3,4,5}      // count of lead gen filtering with entity_qual-bucket-num
			)
			RETURN
			cnt
		formatString: 0
		displayFolder: _quality_measures
		lineageTag: ca5647bf-a3de-4e1a-a9e1-2efa0309bb2e

	measure 'meas.quality_bucket_conditional_background_color' = ```
			
			 var bucket_val = CALCULATE(MAX(quality_buckets[bucket]))
			
			RETURN
			SWITCH(
			    True(),
			    CONTAINSSTRING(bucket_val, "Lowest"),1,
			    CONTAINSSTRING(bucket_val, "Low"),2,
			    CONTAINSSTRING(bucket_val, "Mid"),3,        // get a condition for creating a background color in the table visual
			    CONTAINSSTRING(bucket_val, "High"),4,
			    CONTAINSSTRING(bucket_val, "Highest"),5
			)
			
			```
		formatString: 0
		displayFolder: _quality_measures
		lineageTag: c65fc392-be42-4abe-ae4b-fa852cad8d1b

	measure 'meas.quality_bucket_combined_r2' = ```
			
			VAR _step_name = CALCULATE(MAX(ssr_history[step_name]))
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var pros_r2 =  CALCULATE(AVERAGE(companies_history[di_pred_prospecting_r2]), companies_history[_sys_filt_end_date]=latestDate) // get the r2 filtered with latest date
			var new_logo_r2 =  CALCULATE(AVERAGE(companies_history[di_pred_new_logo_r2]), companies_history[_sys_filt_end_date]=latestDate)  // new logo r2
			var post_sales_r2 =  CALCULATE(AVERAGE(companies_history[di_pred_post_sales_r2]), companies_history[_sys_filt_end_date]=latestDate) // post sales r2
			var existing_customer_r2 =  CALCULATE(AVERAGE(companies_history[di_pred_existing_customer_selling_r2]), companies_history[_sys_filt_end_date]=latestDate) // get the existing customer r2
			RETURN 
			SWITCH(
			    TRUE(),
			    _step_name = "Prospecting", pros_r2,
			    _step_name = "New Logo Selling", new_logo_r2,
			    _step_name = "Post-Sales Support", post_sales_r2,
			    _step_name = "Existing Customer Selling", existing_customer_r2
			)
			```
		displayFolder: _quality_measures
		lineageTag: e85e9ade-6570-405a-87b5-e90f60242da8

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_bucket_combined_auc' = ```
			
			VAR _step_name = CALCULATE(MAX(ssr_history[step_name]))
			var latestDate = CALCULATE(MAX(companies_history[_sys_filt_end_date])) // getting the maximum date
			var pros_auc =  CALCULATE(AVERAGE(companies_history[di_pred_prospecting_auc]), companies_history[_sys_filt_end_date]=latestDate) // get the r2 filtered with latest date
			var new_logo_auc =  CALCULATE(AVERAGE(companies_history[di_pred_new_logo_auc]), companies_history[_sys_filt_end_date]=latestDate) //get new logo auc
			var post_sales_auc =  CALCULATE(AVERAGE(companies_history[di_pred_post_sales_auc]), companies_history[_sys_filt_end_date]=latestDate)   // post sales auc
			var existing_customer_auc =  CALCULATE(AVERAGE(companies_history[di_pred_existing_customer_selling_auc]), companies_history[_sys_filt_end_date]=latestDate) // get the existing customer selling auc
			RETURN 
			SWITCH(
			    TRUE(),
			    _step_name = "Prospecting", pros_auc,
			    _step_name = "New Logo Selling", new_logo_auc,
			    _step_name = "Post-Sales Support", post_sales_auc,         
			    _step_name = "Existing Customer Selling", existing_customer_auc
			)
			```
		displayFolder: _quality_measures
		lineageTag: f42014d2-b4fb-43f7-840f-921245d4bf16

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.quality_bucket_conditional_r2' = ```
			
			var pros_r2 = [meas.quality_bucket__prospecting_r2]
			var new_r2 = [meas.quality_bucket__new_logo_r2]
			var post_r2 = [meas.quality_bucket_post_sales_r2]
			var exist_r2 = [meas.quality_bucket_existing_customer_selling_r2]
			
			var step_name = CALCULATE(MAX(ssr_history[step_name]))
			
			var r2_score = SWITCH(
			    TRUE(),
			    step_name = "Prospecting" || step_name = "Untouched" ,pros_r2,
			    step_name = "New Logo Selling", new_r2,
			    step_name = "Post-Sales Support", post_r2,
			    step_name = "Existing Customer Selling", exist_r2
			)
			
			var _conf = ROUND(r2_score*100, 0)
			
			var _status_ = 
			    IF(
			    _conf >= 0 && _conf <= 49, "Limited",
			        IF(
			            _conf >=50 && _conf <= 74, "Fair",
			            IF(
			                _conf >=75 && _conf <= 84, "Good",
			                IF(
			                    _conf >=85 && _conf <= 94, "Great",
			                    "Excellent"
			                )
			            )
			        )
			)
			
			
			
			RETURN 
			IF(
			    _conf <>0,
			    _status_ & " (" & _conf & ")"  // Convert _conf to integer text format
			)
			```
		displayFolder: _quality_measures
		lineageTag: 25e9c210-f17e-479a-9f65-8acce3eeb3c7

	measure 'meas.quality_bucket_conditional_auc' = ```
			
			var pros_auc = [meas.quality_bucket_prospecting_auc]            // get the each step auc
			var new_auc= [meas.quality_bucket_new_logo_auc]
			var post_auc = [meas.quality_bucket_post_sales_auc]
			var exist_auc = [meas.quality_bucket_existing_customer_selling_auc]
			
			var step_name = CALCULATE(MAX(ssr_history[step_name]))
			
			var auc_score = SWITCH(
			    TRUE(),
			    step_name = "Prospecting" || step_name = "Untouched" ,pros_auc,
			    step_name = "New Logo Selling", new_auc,                        // condition 
			    step_name = "Post-Sales Support", post_auc,
			    step_name = "Existing Customer Selling", exist_auc
			)
			
			var _conf = ROUND(auc_score*100, 0)
			
			var _status_ = 
			    IF(
			    _conf >= 0 && _conf <= 49, "Limited",
			        IF(
			            _conf >=50 && _conf <= 74, "Fair",
			            IF(
			                _conf >=75 && _conf <= 84, "Good",
			                IF(
			                    _conf >=85 && _conf <= 94, "Great",
			                    "Excellent"
			                )
			            )
			        )
			)
			
			
			
			RETURN 
			IF(
			    _conf <>0,
			    _status_ & " (" & _conf & ")"  // Convert _conf to integer text format
			)
			```
		displayFolder: _quality_measures
		lineageTag: f907a2f8-5dd2-43ed-863b-29f52804383c

	column _sys_doc_id
		dataType: string
		lineageTag: 2f315d1c-946f-443c-83d4-9c4dd7536b0e
		summarizeBy: none
		sourceColumn: _sys_doc_id

		annotation SummarizationSetBy = Automatic

	column step_name
		dataType: string
		lineageTag: efcb5ddf-b15d-4d34-b13e-f0d16d07fd5f
		summarizeBy: none
		sourceColumn: step_name

		annotation SummarizationSetBy = Automatic

	column prob_lower_bound
		dataType: double
		lineageTag: 4b71e0f3-4ee3-497f-b291-d22996df7096
		summarizeBy: none
		sourceColumn: prob_lower_bound

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column prob_upper_bound
		dataType: double
		lineageTag: 93ec3add-ecdc-43a3-a929-725e08f3f985
		summarizeBy: none
		sourceColumn: prob_upper_bound

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column bucket
		dataType: string
		lineageTag: c4d16a3f-7805-4b53-9c3a-b915859f659b
		summarizeBy: none
		sourceColumn: bucket
		sortByColumn: bucket_num

		changedProperty = SortByColumn

		annotation SummarizationSetBy = Automatic

	column bucket_num
		dataType: int64
		formatString: 0
		lineageTag: 50b0465e-d300-4710-9d88-cbce3515570c
		summarizeBy: none
		sourceColumn: bucket_num

		changedProperty = SortByColumn

		annotation SummarizationSetBy = Automatic

	column step_name_bucket_num
		dataType: string
		lineageTag: a9d91316-bba5-4243-be8c-9ad92705a216
		summarizeBy: none
		sourceColumn: step_name_bucket_num

		annotation SummarizationSetBy = Automatic

	column 'col.qual_bucket_min_max_tier' = ```
			
			var bucket = CALCULATE(
			    MAX(
			        quality_buckets[bucket]  // get the quality bucket
			    )
			)
			
			VAR lower_prob =CALCULATE(
			    MAX(
			        quality_buckets[prob_lower_bound]       // get the lower bound of prob
			    )
			)
			
			VAR upper_prob =CALCULATE(
			    MAX(
			        quality_buckets[prob_upper_bound]       // get the upper bound of prob 
			    )
			)
			var res =bucket & " " & "(" & FORMAT(lower_prob, "0%") & "-" & FORMAT(upper_prob,"#%") & ")"  // adding min and max tier pct values with bucket name. for min and max tier, used format to get the % values ol.quality_bucket_min_max 
			
			RETURN
			res
			```
		lineageTag: c45c315c-0d17-4129-9524-de7c69f55cb2
		summarizeBy: none
		sortByColumn: bucket_num

		changedProperty = SortByColumn

		annotation SummarizationSetBy = Automatic

	partition quality_buckets = m
		mode: import
		source =
				let
				    Source = companies_history,
				    #"Sorted Rows" = Table.Sort(Source,{{"_sys_processed_as_of", Order.Descending}}),
				    #"Kept First Rows" = Table.FirstN(#"Sorted Rows",1),
				    newTable = Table.SelectColumns(#"Kept First Rows", {"_sys_doc_id", "di_pred_post_sales_qual_bucket_tiers", "di_pred_prospecting_qual_bucket_tiers", "di_pred_selling_new_logo_qual_bucket_tiers", "di_pred_selling_existing_customer_qual_bucket_tiers"}),
				    dbTableNoNull = Table.SelectRows(newTable, each [di_pred_post_sales_qual_bucket_tiers] <> null),
				    Parsed_JSON = Table.TransformColumns(dbTableNoNull,{{"di_pred_post_sales_qual_bucket_tiers", Json.Document}, {"di_pred_prospecting_qual_bucket_tiers", Json.Document}, {"di_pred_selling_new_logo_qual_bucket_tiers", Json.Document}, {"di_pred_selling_existing_customer_qual_bucket_tiers", Json.Document}}),
				
				
				    postsalesTable = Table.SelectColumns(Parsed_JSON, {"_sys_doc_id", "di_pred_post_sales_qual_bucket_tiers"}),
				    postSalesAddCol = Table.AddColumn(postsalesTable, "direction", each "Post-Sales Support"),
				    postSalesExpanded = Table.ExpandRecordColumn(postSalesAddCol, "di_pred_post_sales_qual_bucket_tiers", {"Lowest", "Low", "Mid", "High", "Highest"}, {"Lowest", "Low", "Mid", "High", "Highest"}),
				
				    ProsTable = Table.SelectColumns(Parsed_JSON, {"_sys_doc_id", "di_pred_prospecting_qual_bucket_tiers"}),
				    ProsAddCol = Table.AddColumn(ProsTable, "direction", each "Prospecting"),
				    ProsExpanded = Table.ExpandRecordColumn(ProsAddCol, "di_pred_prospecting_qual_bucket_tiers", {"Lowest", "Low", "Mid", "High", "Highest"}, {"Lowest", "Low", "Mid", "High", "Highest"}),
				
				    NewLogoTable = Table.SelectColumns(Parsed_JSON, {"_sys_doc_id", "di_pred_selling_new_logo_qual_bucket_tiers"}),
				    NewLogoAddCol = Table.AddColumn(NewLogoTable, "direction", each "New Logo Selling"),
				    NewLogoExpanded = Table.ExpandRecordColumn(NewLogoAddCol, "di_pred_selling_new_logo_qual_bucket_tiers", {"Lowest", "Low", "Mid", "High", "Highest"}, {"Lowest", "Low", "Mid", "High", "Highest"}),
				
				    UpsellingTable = Table.SelectColumns(Parsed_JSON, {"_sys_doc_id", "di_pred_selling_existing_customer_qual_bucket_tiers"}),
				    UpsellingAddCol = Table.AddColumn(UpsellingTable, "direction", each "Existing Customer Selling"),
				    UpsellingExpanded = Table.ExpandRecordColumn(UpsellingAddCol, "di_pred_selling_existing_customer_qual_bucket_tiers", {"Lowest", "Low", "Mid", "High", "Highest"}, {"Lowest", "Low", "Mid", "High", "Highest"}),
				
				    combinedTable = Table.Combine({postSalesExpanded, ProsExpanded, NewLogoExpanded, UpsellingExpanded}),
				
				    combineNoNull = Table.SelectRows(combinedTable, each [Lowest] <> null),
				    RenamedTable = Table.RenameColumns(combineNoNull,{{"direction", "step_name"}}),
				
				    LowestTable = Table.SelectColumns(RenamedTable, {"_sys_doc_id","step_name", "Lowest"}),
				    LowestAddCol = Table.AddColumn(LowestTable, "bucket", each "Lowest"),
				    LowestExpanded = Table.ExpandRecordColumn(LowestAddCol, "Lowest", {"l", "u"}, {"prob_lower_bound", "prob_upper_bound"}),
				
				
				    LowTable = Table.SelectColumns(RenamedTable, {"_sys_doc_id","step_name", "Low"}),
				    LowAddCol = Table.AddColumn(LowTable, "bucket", each "Low"),
				    LowExpanded = Table.ExpandRecordColumn(LowAddCol, "Low", {"l", "u"}, {"prob_lower_bound", "prob_upper_bound"}),
				
				
				    MidTable = Table.SelectColumns(RenamedTable, {"_sys_doc_id","step_name", "Mid"}),
				    MidAddCol = Table.AddColumn(MidTable, "bucket", each "Mid"),
				    MidExpanded = Table.ExpandRecordColumn(MidAddCol, "Mid", {"l", "u"}, {"prob_lower_bound", "prob_upper_bound"}),
				
				
				    HighTable = Table.SelectColumns(RenamedTable, {"_sys_doc_id","step_name", "High"}),
				    HighAddCol = Table.AddColumn(HighTable, "bucket", each "High"),
				    HighExpanded = Table.ExpandRecordColumn(HighAddCol, "High", {"l", "u"}, {"prob_lower_bound", "prob_upper_bound"}),
				
				    HighestTable = Table.SelectColumns(RenamedTable, {"_sys_doc_id","step_name", "Highest"}),
				    HighestAddCol = Table.AddColumn(HighestTable, "bucket", each "Highest"),
				    HighestExpanded = Table.ExpandRecordColumn(HighestAddCol, "Highest", {"l", "u"}, {"prob_lower_bound", "prob_upper_bound"}),
				
				    NewcombinedTable = Table.Combine({LowestExpanded, LowExpanded, MidExpanded, HighExpanded,HighestExpanded}),
				    finalTablewithBucketNumber = Table.AddColumn(NewcombinedTable, "bucket_num", each if [bucket] = "Lowest" then 1 else if [bucket] = "Low" then 2 else if [bucket] = "Mid" then 3 else if [bucket] = "High" then 4 else if [bucket] = "Highest" then 5 else null),
				    #"Sorted Rows1" = Table.Sort(finalTablewithBucketNumber,{{"step_name", Order.Ascending},{"bucket_num", Order.Ascending}}),
				    ChangedType = Table.TransformColumnTypes(#"Sorted Rows1",{{"prob_lower_bound", type number}, {"prob_upper_bound", type number}, {"bucket", type text}, {"bucket_num", Int64.Type}, {"step_name", type text}}),
				    AddedCombineCol = Table.AddColumn(ChangedType, "step_name_bucket_num", each Text.Combine({[step_name], "-", [bucket]}))
				in
				    AddedCombineCol

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

