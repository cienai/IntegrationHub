table metadata_ai_scores
	lineageTag: 080d003a-73c1-4455-bdea-735e2750dd7e

	measure 'meas.ai_scores_accts_industry' = ```
			
			var _avg = AVERAGE(accounts[trueai_industry_conf])      // get the avg accts industry conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: aed2cc30-bc21-47ae-a2f9-a543931093ae

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_accts_industry_text' = ```
			
			var _conf = [meas.ai_scores_accts_industry]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 5d609869-b248-474c-babe-6a7ca3e7fa61

	measure 'meas.ai_scores_accts_industry_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(accounts[trueai_industry_conf])         // get the accounts average industry conf
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: 5e8cefaa-6f91-4459-9456-f4723c7b2cf9

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_accts_industry_factor1_name' = ```
			
			
			VAR fact1 = "trueai_industry_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: fc050bfc-3d4e-4c0c-9024-edd19b903811

	measure 'meas.ai_scores_accts_leadsource_factor1_name' = ```
			
			
			VAR fact1 = "trueai_leadsource_conf" 
			
			RETURN
			    fact1 
			    
			```
		displayFolder: _factor1_name
		lineageTag: 933be031-cdd0-4e6d-9274-bdeb91b697bd

	measure 'meas.ai_scores_adj_duration_factor1_name' = ```
			
			VAR fact1 = "stkhlds_all_adj_dur_rule"
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: b2eb6384-25f7-4d4f-a2f6-20396d5d05e5

	measure 'meas.ai_scores_booking_calibration_factor1_name' = ```
			
			var fact1 = "ttm_ref_date_bookings"
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 06270f6c-31af-4ce4-a1f5-9c7a310384ea

	measure 'meas.ai_scores_ci_act_capt_lvl_factor1_name' = ```
			
			
			VAR fact1 ="ci_act_capt_lvl_conf"    
			     
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 1848f8dc-e2d7-4543-ac99-7b986064f047

	measure 'meas.ai_scores_ci_closing_ability_factor1_name' =
			
			var _avg ="ci_sb_close_ability_conf"
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: 076bad6f-23d8-480e-a3f5-64e7c0a75dae

	measure 'meas.ai_scores_ci_deal_maxing_factor1_name' =
			
			var _avg = "ci_sb_deal_maxing_conf"
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: c64e15d8-cb3f-447f-8ee6-839785e41342

	measure 'meas.ai_scores_ci_discovery_skill_factor1_name' =
			
			var _avg = "ci_sb_discov_skills_conf"
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: 96066a58-4e62-4f19-a3ce-89266cb2812b

	measure 'meas.ai_scores_ci_engagement_ability_factor1_name' =
			
			var _avg = "ci_sb_engmt_ability_conf"
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: 7b3bba3b-3d92-47dc-93bd-61d6731f37f8

	measure 'meas.ai_scores_ci_time_alloc_factor1_name' = ```
			
			VAR fact1 ="# Reps with Time Allocation"    
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: c10d5359-4f8a-4940-b162-af094c386628

	measure 'meas.ai_scores_ci_time_management_factor1_name' = ```
			
			
			var _avg = "ci_sb_time_mgmt_conf"
			
			RETURN 
			_avg
			```
		displayFolder: _factor1_name
		lineageTag: 55e1a139-83f8-4a04-b75f-cf1ac29cc467

	measure 'meas.ai_scores_ci_work_effort_factor1_name' =
			
			var _avg ="ci_sb_work_effort_conf"
			
			RETURN
			_avg
		displayFolder: _factor1_name
		lineageTag: a22c0660-a7cf-4da4-9ccc-693dfe8d97cf

	measure 'meas.ai_scores_existing_customer_factor1_name' = ```
			
			VAR fact1 ="di_pred_existing_customer_selling_auc"    
			       
			
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: a807ae0e-8810-4351-9944-c204e7a1015d

	measure 'meas.ai_scores_general_score_factor1_name' = ```
			
			
			VAR fact1 ="General AI Score"        
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 0c24ee1c-7fc2-4100-9ee3-1f08b296e5dc

	measure 'meas.ai_scores_leads_industry_factor1_name' = ```
			
			
			VAR fact1 = "trueai_industry_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 4e193695-e6b0-4173-ba5e-251628f1c765

	measure 'meas.ai_scores_leads_leadsource_factor1_name' = ```
			
			
			VAR fact1 = "trueai_leadsource_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: c54c8d18-21f1-414f-a165-6559f510ac3c

	measure 'meas.ai_scores_line_items_products_factor1_name' = ```
			
			VAR fact1 ="Won Deals"
			
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 739e4dad-e28d-41e5-9252-9b320edbf412

	measure 'meas.ai_scores_list_price_items_factor1_name' = ```
			
			VAR fact1 ="Count of trueai_list_price items"
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: e94806b4-9f49-4a03-a848-8386ee23b8e2

	measure 'meas.ai_scores_new_logo_selling_factor1_name' = ```
			
			VAR fact1 ="di_pred_new_logo_auc" 
			
			RETURN
			fact1
			```
		displayFolder: _factor1_name
		lineageTag: ccc0f557-e65b-4048-a19b-4b6d1c449cae

	measure 'meas.ai_scores_opps_histories_factor1_name' = ```
			
			VAR fact1 ="Total Opps Count"    
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: d8f34651-68e9-4ccf-b406-f02cf6e37ad0

	measure 'meas.ai_scores_opps_industry_factor1_name' = ```
			
			
			VAR fact1 = "trueai_industry_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 42cb4a46-d916-42c1-8c94-4df589be8e1a

	measure 'meas.ai_scores_opps_leadsource_factor1_name' = ```
			
			
			VAR fact1 = "trueai_leadsource_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 0d96aa59-3ed4-4895-adea-a5451824a76a

	measure 'meas.ai_scores_performance_tiers_factor1_name' =
			
			var perf_avg = "ci_perf_qtly_performance_tier_conf"
			RETURN
			perf_avg
		displayFolder: _factor1_name
		lineageTag: 20c67261-dfb0-4cdb-bfdb-461648691e61

	measure 'meas.ai_scores_post_sales_factor1_name' = ```
			
			VAR fact1 = "di_pred_post_sales_auc"    
			
			RETURN
			    fact1
			```
		displayFolder: _factor1_name
		lineageTag: 69d37a2b-0247-4c30-ad36-dfb4ada75619

	measure 'meas.ai_scores_potential_ACV_factor1_name' = ```
			
			VAR fact1 ="Potential ACV"          
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: a0801920-7624-4d19-9d9e-44a041b47048

	measure 'meas.ai_scores_prospecting_factor1_name' = ```
			
			VAR fact1 = "di_pred_prospecting_auc" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 983852ce-fd4f-45e6-96c3-ae549c59399b

	measure 'meas.ai_scores_ramping_factor1_name' = ```
			
			var fact1 = " Reps Ramping Rate"
			RETURN
			fact1 
			```
		displayFolder: _factor1_name
		lineageTag: a0c44ad0-132a-4f0b-8834-cf58a93d2469

	measure 'meas.ai_scores_rep_org_calibration_factor1_name' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))       // grt the most latest row
			var _total_users = MAXX(latest_table,companies_history[users])          // total users
			var users_match_hr_id = MAXX(latest_table, [users_match_hr_id])         
			var users_hr_file = MAXX(latest_table, companies_history[users_hr_file])           
			var users_non_match_hr_id_won_deals = MAXX(latest_table, companies_history[users_non_match_hr_id_won_deals])  
			var users_non_match_hr_id_pipeline = MAXX(latest_table, companies_history[users_non_match_hr_id_pipeline])          
			var users_non_match_hr_id_leads = MAXX(latest_table, companies_history[users_non_match_hr_id_leads])         
			var users_match_hr_id_nd_role = MAXX(latest_table, companies_history[users_match_hr_id_nd_role])                
			var users_match_hr_id_nd_group = 0
			
			var res = "
			var users_match_hr_id = " &  users_match_hr_id  & "        
			var users_hr_file = " &  users_hr_file  & "           
			var users_non_match_hr_id_won_deals = " &  users_non_match_hr_id_won_deals  & "   
			var users_non_match_hr_id_pipeline = " &  users_non_match_hr_id_pipeline  & "          
			var users_non_match_hr_id_leads = " &  users_non_match_hr_id_leads  & "          
			var users_match_hr_id_nd_role =" &  users_match_hr_id_nd_role  & " 
			"
			RETURN
			res
			```
		displayFolder: _factor1_name
		lineageTag: 5eabb899-fcef-4672-b008-b116069c624e

	measure 'meas.ai_scores_revenue_calibration_factor1_name' =
			
			var fact1 = "ttm_ref_date_revenue"
			
			RETURN
			fact1
		displayFolder: _factor1_name
		lineageTag: 4c63a8ac-06f2-4ae5-864b-03eca69e1331

	measure 'meas.ai_scores_ssr_industry_factor1_name' = ```
			
			
			VAR fact1 = "trueai_industry_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 53d53c04-5f09-4365-b1d9-816725321707

	measure 'meas.ai_scores_ssr_leadsource_factor1_name' = ```
			
			
			VAR fact1 = "trueai_leadsource_conf" 
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: 3f590ab3-16fc-43e5-b35a-7f8370225c1d

	measure 'meas.ai_scores_success_analysis_factor1_name' = ```
			
			VAR fact1 ="di_success_prob_training_score"       
			
			RETURN
			    fact1 
			```
		displayFolder: _factor1_name
		lineageTag: a603585c-eb09-4813-951b-845be5cef35d

	measure 'meas.ai_scores_vi_factor1_name' =
			
			var fact1 = "Difference in sales between New Logo and Existing Customer"
			RETURN
			fact1
		displayFolder: _factor1_name
		lineageTag: 61c6a956-0fc9-40d3-95e0-6d485a401f2f

	measure 'meas.ai_scores_accts_leadsource_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(accounts[trueai_leadsource_conf])         // get the accounts average leadsource conf
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: cd4c4662-39a9-4d4e-a00d-5c01d60f078a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_adj_duration_factor1_value' = ```
			
			VAR _tbl = CALCULATETABLE(ssr_history, ssr_history[step_name] in {"Prospecting", "New Logo Selling", "Post-Sales Support","Existing Customer Selling"}) // Get the current table context but exclude the unthcouded stage etc
			VAR res = AVERAGEX(
			    _tbl,
			     SWITCH(
			        ssr_history[stkhlds_all_adj_dur_rule],
			        "133002", 0.4,  // 133002 is industry avg, not reliable
			        "133001", 0.7,   // 133001 is peer avg, okay
			        "133003", 0.97,   // 133003 is the best info from the owner
			        "133004", 0.86    // 133004 is good data but not from the primary owner
			    )
			)
			
			RETURN 
			res
			```
		displayFolder: _factor_value1
		lineageTag: 89c72c3a-71ab-4f1e-beb2-abbc13189977

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_booking_calibration_factor1_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))  
			var _booking_amt = MAXX(latest_table,companies_history[ttm_ref_date_bookings]) 
			var fact1 = FORMAT(_booking_amt,"$#,0")
			RETURN
			fact1
			```
		displayFolder: _factor_value1
		lineageTag: dbe2ade8-a747-463d-8386-042d4e941693

	measure 'meas.ai_scores_ci_act_capt_lvl_conf_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_act_capt_lvl_conf])       // get the users_history average ci_act_capt_lvl conf
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: 697e95ac-09b0-4e1b-853d-c44a876b25b9

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_closing_ability_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_close_ability_conf]),        // get the avg closing ability conf
			    users[trueai_user_role_function] in {"AE", "AM"}
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: 1db8d9e9-a496-4584-bbc5-edb4f31dec85

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_deal_maxing_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_deal_maxing_conf])        // get the avg deal maximizing conf
			)
			RETURN
			_avg+0
		displayFolder: _factor_value1
		lineageTag: 836edda6-b925-4e80-bdb4-1c0292e8b84a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_discovery_skill_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_discov_skills_conf]),        // get the avg discovery skill conf
			    users[trueai_user_role_function] in {"AE", "AM", "SDR"}
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: 51ecdac7-4476-4fd2-ae14-cd7b5b4ee668

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_engagement_ability_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_engmt_ability_conf]),        // get the avg engagement ability conf
			    users[trueai_user_role_function] in  {"AE", "AM", "SDR"}
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: d906aded-8db2-4abc-9c5a-86dc89575dbe

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_time_allocation_factor1_value' = ```
			
			var fromDate =MIN(cal_end_dates[date]) 
			var toDate = MAX(cal_end_dates[date])
			
			var applicable_rows_tbl = CALCULATETABLE(
			    users_history, 
			    LASTNONBLANK(users_history[_sys_filt_start_date],users_history[_sys_filt_start_date]),  // get only the last entry in each filter context period (e.g. a year)
			     users_history[trueai_user_role_function] in {"AE", "AM", "SDR"}
			)
			
			var active_users_tbl =  filter(applicable_rows_tbl, [trueai_hire_date] <=  toDate   && if(isblank(users_history[trueai_termination_date]), date(2100,1,1),users_history[trueai_termination_date]) >=  toDate && users_history[ci_time_alloc_tot] >0 ) // make sure we only include reps that are in the active  and user having time allocation greater than 0
			
			var res = COUNTROWS(DISTINCT(SELECTCOLUMNS(active_users_tbl, [_sys_user_id]))) // get a disctinct count of users from that filter context 
			
			return res+0
			
			```
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: 7e811d64-865f-46f0-bd80-4286e09aafa1

	measure 'meas.ai_scores_ci_time_management_factor1_value' = ```
			
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_time_mgmt_conf])      // get the avg time mgmt conf
			)
			
			
			RETURN 
			_avg
			```
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: 08e25263-90a6-482c-9cc3-8b177e17b57d

	measure 'meas.ai_scores_ci_work_effort_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(users_history[ci_sb_work_effort_conf]),        // get the avg work effort conf for AE, AM and SDR role
			    users[trueai_user_role_function] in {"AE", "AM", "SDR"}
			)
			
			RETURN
			_avg
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: beda6704-6e1d-4c22-a3f2-b8b33b331d74

	measure 'meas.ai_scores_existing_customer_selling_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var existing_cust_auc = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_auc])     // get the latest auc for existing customer
			RETURN
			existing_cust_auc
		displayFolder: _factor_value1
		lineageTag: a9cf2d63-40a2-4fb6-bfd5-8767cd3e8deb

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_general_score_factor1_value' =
			
			var res = 1.0
			RETURN
			res
		displayFolder: _factor_value1
		lineageTag: 89ab3487-10b9-4015-9a1b-211965318070

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_leads_industry_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(leads[trueai_industry_conf])         // get the leads average industry conf
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: 968e7e33-6375-42cb-a2b6-06a8f5ea69b5

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_leads_leadsource_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(leads[trueai_leadsource_conf])         // get the leads average leadsource conf
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: a6fbf7e3-0d69-4289-8ced-aefb1e3b2229

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_new_logo_selling_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var new_logo_auc = MAXX(latest_row, companies_history[di_pred_new_logo_auc])     // get the latest auc for new_logo_selling
			RETURN
			new_logo_auc
		displayFolder: _factor_value1
		lineageTag: a4388957-e177-4966-92d2-85d9bc027369

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_opps_history_factor1_value' =
			
			var res = CALCULATE(COUNT(ssr_history[entity_opp_id]))         // get the count of the opp id
			
			RETURN
			res
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: 512e3883-a026-4256-92c0-15cd3de692a4

	measure 'meas.ai_scores_opps_industry_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(opps[trueai_industry_conf])         // get the opps average industry conf
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: 5944c7fd-16bf-43a5-b119-ad755463d480

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_opps_leadsource_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(opps[trueai_leadsource_conf])         // get the opps average leadsource conf
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: 98726544-e2ec-4e5b-9b29-356ccf6d59ae

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_performance_tiers_factor1_value' =
			
			var perf_avg = CALCULATE(AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]))        // get the avg performance tier conf
			RETURN
			perf_avg
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: 0aa9b88d-d730-4de1-b5c5-b4555902c05d

	measure 'meas.ai_scores_post_sales_support_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var post_sales_auc = MAXX(latest_row, companies_history[di_pred_post_sales_auc])     // get the latest auc for post sales support
			RETURN
			post_sales_auc
		displayFolder: _factor_value1
		lineageTag: 295daaea-a015-4ad1-88f4-031b8f7ceeef

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_potential_acv_factor1_value' =
			
			// as we don't have some field to calculate the factor I am using here temporary variable for visualization purpose. need to apply the actual field while available
			var temp = 0.80     // temp value for factor analysis
			RETURN
			temp
		displayFolder: _factor_value1
		lineageTag: bbec9119-145d-4080-bdcd-84f0b304c726

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_prospecting_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var prospect_auc = MAXX(latest_row, companies_history[di_pred_prospecting_auc])     // get the latest auc for prospecting
			RETURN
			prospect_auc
		displayFolder: _factor_value1
		lineageTag: 4b95e1b9-f186-42f8-9acd-4b40192031f5

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ramping_count_rate_factor1_value' = ```
			
			var fromDate =MIN(cal_end_dates[date])
			var toDate = MAX(cal_end_dates[date])
			
			var applicable_rows_tbl = CALCULATETABLE(users_history, users_history[ci_perf_ramping_status] ="Ramping" ,  LASTNONBLANK(users_history[_sys_filt_start_date],users_history[_sys_filt_start_date]))  // get only the last entry in each filter context period (e.g. a year)
			
			var active_users_tbl =  filter(applicable_rows_tbl, [trueai_hire_date] <  toDate   && if(isblank([trueai_termination_date]), date(2100,1,1),[trueai_termination_date]) >=  toDate) // make sure we only include reps that are in the active 
			
			var _cnt = COUNTROWS(DISTINCT(SELECTCOLUMNS(active_users_tbl, users_history[_sys_user_id]))) // get a disctinct count of users from that filter context 
			
			var res  = MIN(_cnt/3, 1)       // get the minimum if there is no ramping reps 
			RETURN
			res+0
			```
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: fbd853ed-ba35-46ac-950f-19e63cabe712

	measure 'meas.ai_scores_rep_org_calibration_factor1_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))       // grt the most latest row
			var _total_users = MAXX(latest_table,companies_history[users])          // total users
			var users_match_hr_id = MAXX(latest_table, [users_match_hr_id])         
			var users_hr_file = MAXX(latest_table, companies_history[users_hr_file])           
			var users_non_match_hr_id_won_deals = MAXX(latest_table, companies_history[users_non_match_hr_id_won_deals])  
			var users_non_match_hr_id_pipeline = MAXX(latest_table, companies_history[users_non_match_hr_id_pipeline])          
			var users_non_match_hr_id_leads = MAXX(latest_table, companies_history[users_non_match_hr_id_leads])         
			var users_match_hr_id_nd_role = MAXX(latest_table, companies_history[users_match_hr_id_nd_role])                
			var users_match_hr_id_nd_group = 0
			
			var res = "
			var users_match_hr_id = " &  users_match_hr_id  & "        
			var users_hr_file = " &  users_hr_file  & "           
			var users_non_match_hr_id_won_deals = " &  users_non_match_hr_id_won_deals  & "   
			var users_non_match_hr_id_pipeline = " &  users_non_match_hr_id_pipeline  & "          
			var users_non_match_hr_id_leads = " &  users_non_match_hr_id_leads  & "          
			var users_match_hr_id_nd_role =" &  users_match_hr_id_nd_role  & " 
			"
			RETURN
			res
			```
		displayFolder: _factor_value1
		lineageTag: 3c7f413e-82d5-4d38-b67f-3e6c0ff288e7

	measure 'meas.ai_scores_revenue_calibration_factor1_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC)) 
			var _booking_amt = MAXX(latest_table,companies_history[ttm_ref_date_revenue]) 
			RETURN
			_booking_amt
			```
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: 43e8b978-d0b2-47ae-a443-9e2071efa3bf

	measure 'meas.ai_scores_sales_process_value' =
			
			
			var total_rules_applied = [meas.ai_scores_sales_process_any_rules_count]
			var sdt_rules_applied =  [meas.ai_scores_sales_process_any_rules_std_count]
			var avg_conf_non_crm = .85  // get the avg non crm conf
			var diff = (total_rules_applied - sdt_rules_applied  ) * avg_conf_non_crm  // create a diff model
			var adjusted_ratio= divide (sdt_rules_applied +diff ,  total_rules_applied) // add the diff for the new ratio
			// return as an int between 0-100
			var res = adjusted_ratio
			return res
		displayFolder: _factor_value1
		lineageTag: 4d721ad7-9eff-45c8-a462-2b930c5508a4

	measure 'meas.ai_scores_ssr_industry_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_industry_conf])         // get the ssr average industry conf
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: e491d5b4-9799-4306-95fc-38f7ed3c420a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ssr_leadsource_factor1_value' =
			
			var _avg = CALCULATE(
			    AVERAGE(ssr[trueai_leadsource_conf])         // get the ssr average leadsource conf
			)
			RETURN
			_avg
		displayFolder: _factor_value1
		lineageTag: 5c254eed-ab4d-409b-975b-ba168b89a503

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_success_factor_analysis_factor1_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var  train_score= MAXX(latest_row, companies_history[di_success_prob_training_score])     // get the latest train score
			RETURN
			train_score
		displayFolder: _factor_value1
		lineageTag: 67a301e6-0aa1-47d3-bb29-8e6d48f2fd69

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_booking_calibration_factor2_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))  
			var _won_amt = MAXX(latest_table,companies_history[di_amt_won_last12months]) 
			var fact2 = FORMAT(_won_amt, "$#,0")
			RETURN
			fact2
			```
		displayFolder: _factor_value2
		lineageTag: 054be52c-6d86-41e3-954e-e96062f4db38

	measure 'meas.ai_scores_ci_time_allocation_factor2_value' = ```
			
			var fromDate =MIN(cal_end_dates[date]) 
			var toDate = MAX(cal_end_dates[date])
			
			var applicable_rows_tbl = CALCULATETABLE(users_history, LASTNONBLANK(users_history[_sys_filt_start_date],users_history[_sys_filt_start_date]), users_history[trueai_user_role_function] in {"AE", "AM", "SDR"})  // get only the last entry in each filter context period (e.g. a year)
			
			var active_users_tbl =  filter(applicable_rows_tbl, [trueai_hire_date] <=  toDate   && if(isblank(users_history[trueai_termination_date]), date(2100,1,1),users_history[trueai_termination_date]) >=  toDate) // make sure we only include reps that are in the active 
			
			var res = COUNTROWS(DISTINCT(SELECTCOLUMNS(active_users_tbl, [_sys_user_id]))) // get a disctinct count of users from that filter context 
			
			
			RETURN
			res
			```
		formatString: 0
		displayFolder: _factor_value2
		lineageTag: c35c6eda-ba2f-46f0-8c37-9728a0ddd4a0

	measure 'meas.ai_scores_existing_customer_selling_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var existing_cust_r2 = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_r2])     // get the latest r2 for existing customer
			RETURN
			existing_cust_r2
		displayFolder: _factor_value2
		lineageTag: f583a918-d870-4a38-b532-5cbc4e79149b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_new_logo_selling_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var new_logo_r2 = MAXX(latest_row, companies_history[di_pred_new_logo_r2])     // get the latest r2 for new_logo_selling
			RETURN
			new_logo_r2
		displayFolder: _factor_value2
		lineageTag: 518f8418-3da9-4bf6-8384-ccb7e41a5c21

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_opps_history_factor2_value' =
			
			var res = CALCULATE(DISTINCTCOUNT(opps_histories[crm_opp_id]))         // get the opps with Opp history
			RETURN
			res
		displayFolder: _factor_value2
		lineageTag: 47282301-d72e-43a0-8754-a1106eb5b140

	measure 'meas.ai_scores_post_sales_support_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var post_sales_r2 = MAXX(latest_row, companies_history[di_pred_post_sales_r2])     // get the latest r2 for post sales support
			RETURN
			post_sales_r2
		displayFolder: _factor_value2
		lineageTag: a322e2a9-b301-43a2-874d-89b8ab4446e0

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_prospecting_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var prospect_r2 = MAXX(latest_row, companies_history[di_pred_prospecting_r2])     // get the latest r2 for prospecting
			RETURN
			prospect_r2
		displayFolder: _factor_value2
		lineageTag: 7c6bdac5-f4c8-4e07-bb00-71acc2423344

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ramping_perf_conf_factor2_value' =
			
			var _perf = CALCULATE(
			    AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]),       // get the avg perf conf
			    users_history[ci_perf_ramping_status] ="Ramping"
			)
			RETURN
			_perf+0
		formatString: 0
		displayFolder: _factor_value2
		lineageTag: cdaeaf3e-e937-4f2e-8efe-392faa28d252

	measure 'meas.ai_scores_rep_org_calibration_factor2_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))       // grt the most latest row
			var users_hr_file = MAXX(latest_table, companies_history[users_hr_file])           // reps in hr file
			
			RETURN 
			users_hr_file
			```
		formatString: 0
		displayFolder: _factor_value2
		lineageTag: b339b57d-14e1-434e-9716-bd91dc0823a4

	measure 'meas.ai_scores_revenue_calibration_factor2_value' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))   
			var _booking_amt = MAXX(latest_table,companies_history[di_amt_won_last12months]) 
			RETURN
			_booking_amt
			```
		displayFolder: _factor_value2
		lineageTag: c2a479e8-e25f-4c23-a6f8-938cb61fc02a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_success_factor_analysis_factor2_value' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var  valid_score= MAXX(latest_row, companies_history[di_success_prob_validation_score])     // get the latest validation score
			RETURN
			valid_score
		displayFolder: _factor_value2
		lineageTag: bc43449e-929f-4d9b-aef3-1a68e583a305

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_line_items_products_factor2_value' = ```
			
			
			var lost_deals =CALCULATE(
			    COUNT(ssr_history[_sys_doc_id]),                // get the lost deals
			    opps[trueai_is_won]=False
			)
			
			
			var _lost_deals_w_line = CALCULATE(
			        DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			        opps[trueai_is_won] = False,                      // get the lost deals count with line items
			        FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			    )
			
			var _lost_ratio = DIVIDE(_lost_deals_w_line,lost_deals,0)          // lost ratio
			
			RETURN
			_lost_ratio
			```
		displayFolder: _factor_value2
		lineageTag: 5b7eb313-9450-4a50-8103-51c7e5223bca

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_list_price_items_non_default_factor2_value' =
			
			var total_list_items = CALCULATE(
			    count(opp_line_items[trueai_list_price]),      // non default list price items count
			    opp_line_items[trueai_list_price_rule] <> "103007"
			)
			
			RETURN
			total_list_items+0
		formatString: 0
		displayFolder: _factor_value2
		lineageTag: d203cbb2-89de-467d-a39b-43c1945b7549

	measure 'meas.ai_scores_sales_process_any_rules_count' =
			
			
			var total_rules_applied = CALCULATE(count(ssr_history[_sys_doc_id]) )
			var res=  If(IsBlank(total_rules_applied), 0,total_rules_applied)
			
			RETURN
			res
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: ca9a34a1-f6a5-42f1-89a9-ba16f9c05a00

	measure 'meas.ai_scores_sales_process_any_rules_std_count' = ```
			
			
			var tbl_crm_rules = calculateTable(SELECTCOLUMNS(filter(metadata_rule_list, metadata_rule_list[col.rule_is_std_crm] = true), "_sys_doc_id]", "" & [_sys_doc_id])) // get a list of just the CRM rules
			//var dd = COUNTROWS(tbl_crm_rules) // check the count
			var filt = filter(ssr_history, 
			 (
			     ssr_history[step_owner_rule] & "" IN tbl_crm_rules  &&  
			     ssr_history[step_outcome_rule] & "" IN tbl_crm_rules &&   
			      ssr_history[step_end_rule] & "" IN tbl_crm_rules  
			) 
			) // look for NONE crm rules and exclude lead gen 
			var sdt_rules_applied =  CALCULATE(count(ssr_history[_sys_doc_id]) , filt) // get the count based on correct filter
			var res = sdt_rules_applied // return the res
			
			
			return If(IsBlank(res), 0,res)
			```
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: ec6937ab-fd5f-4973-a761-1f8243301e52

	measure 'meas.ai_scores_accts_leadsource' = ```
			
			var _avg = AVERAGE(accounts[trueai_leadsource_conf])        // get the accounts average leadsource conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 6d30d622-6257-40c9-9e50-3ebc395db0b3

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_accts_leadsource_text' = ```
			
			var _conf = [meas.ai_scores_accts_leadsource]         // get the accounts average leadsource conf  
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 3db2c4a4-23de-4fd8-86af-936706fd596b

	measure 'meas.ai_scores_adj_duration' = ```
			
			VAR _tbl = CALCULATETABLE(ssr_history, ssr_history[step_name] in {"Prospecting", "New Logo Selling", "Post-Sales Support","Existing Customer Selling"}) // Get the current table context but exclude the unthcouded stage etc
			VAR _avg = AVERAGEX(
			    _tbl,
			     SWITCH(
			        ssr_history[stkhlds_all_adj_dur_rule],
			        "133002", 0.4,  // 133002 is industry avg, not reliable
			        "133001", 0.7,   // 133001 is peer avg, okay
			        "133003", 0.97,   // 133003 is the best info from the owner
			        "133004", 0.86    // 133004 is good data but not from the primary owner
			    )
			)
			
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)^ boost_expo               // get the expo value to enhance output
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 49e180a0-27b1-4d09-a630-a4364e278ddb

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_adj_duration_text' = ```
			
			var _conf = [meas.ai_scores_adj_duration]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: e1a816e1-9e93-471e-b327-742c6ceb1915

	measure 'meas.ai_scores_booking_calibration' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))  
			var factor1 = VALUE(MAXX(latest_table,companies_history[ttm_ref_date_bookings])) 
			VAR factor2 = VALUE(MAXX(latest_table,companies_history[di_amt_won_last12months]))
			var score = (factor1 - ABS(factor1 - factor2))/factor1
			
			var res = IF(
			    factor1=BLANK() || factor1=0,
			    0,
			    ROUND(score*100, 0)
			)
			
			RETURN
			res
			```
		displayFolder: _ai_scores
		lineageTag: af2b1434-c9e7-4dd2-9db5-88b5bc48a445

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_booking_calibration_text' = ```
			
			var _conf = [meas.ai_scores_booking_calibration]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 26aea183-3840-4073-bfaa-c87e28c73b4d

	measure 'meas.ai_scores_ci_act_capt_lvl_conf' = ```
			
			var _avg = CALCULATE(
			           AVERAGE(users_history[ci_act_capt_lvl_conf])// get the users_history average ci_act_capt_lvl conf
			)
			var boost_expo = 0.90           // exponent value 
			var _boosted_avg = (_avg)^ boost_expo     // pushes up the score slightly 
			var _conf = ROUND(_boosted_avg*100,0)  // round the number and for integar value  
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 1304c12c-11cf-4104-99d4-6658051d65d9

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_act_capt_lvl_conf_text' = ```
			
			
			var _conf = [meas.ai_scores_ci_act_capt_lvl_conf]  // act capt lvl score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 4863ecd5-40e4-438f-adf0-22a2ffad19aa

	measure 'meas.ai_scores_ci_closing_ability' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_close_ability_num])     // get the avg closing ability conf
			var boost_expo = 0.90
			var _new_avg = (_avg)^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be  
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: a9f5237d-77e1-41ad-b86d-1c1fd0bf3f09

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_closing_ability_text' = ```
			
			
			var _avg = [meas.ai_scores_ci_closing_ability]     // get the avg closing ability conf
			
			var boost_expo = 0.90
			var _new_avg = (_avg)^ boost_expo   // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 3be32d0d-50f2-432a-8905-cbfed223e1de

	measure 'meas.ai_scores_ci_deal_maxing' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_deal_maxing_num])     // get the avg deal maximizing conf
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_avg,2)*100  // round the number and for integar value
			
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 08c67e59-0757-41d3-9f44-0f03abf71aad

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_deal_maxing_text' = ```
			
			var _conf = [meas.ai_scores_ci_deal_maxing]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 1986f46d-82aa-4779-83ad-05cd1d7cb584

	measure 'meas.ai_scores_ci_discovery_skill' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_disc_skills_num])     // get the avg discovery skill conf
			var boost_expo = 0.90
			var _new_avg = (ABS(_avg))^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_avg*100 ,0) // round the number and for integar value
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 06e29052-44f1-4661-93dc-60f70765c604

	measure 'meas.ai_scores_ci_discovery_skill_text' = ```
			
			
			var _avg = [meas.ai_scores_ci_discovery_skill]     // get the avg discovery skill conf
			
			var boost_expo = 0.90
			var _new_avg = (ABS(_avg))^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: a8afd11f-8977-465e-8002-3a0235bda026

	measure 'meas.ai_scores_ci_engagement_ability' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_engmt_ability_num])     // get the avg engagement ability conf
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)^ boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_avg,2)*100  // round the number and for integar value
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: 1db68818-c9df-41e2-aa60-93b218e74c1a

	measure 'meas.ai_scores_ci_engagement_ability_text' = ```
			
			var _conf = [meas.ai_scores_ci_engagement_ability]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 97936120-6e1a-4a9c-9fbf-7fcd4b404d78

	measure 'meas.ai_scores_ci_time_alloc' = ```
			
			var fromDate =MIN(cal_end_dates[date]) 
			var toDate = MAX(cal_end_dates[date])
			
			var applicable_rows_tbl = CALCULATETABLE(users_history, LASTNONBLANK(users_history[_sys_filt_start_date],users_history[_sys_filt_start_date]))  // get only the last entry in each filter context period (e.g. a year)
			var active_users_tbl =  filter(applicable_rows_tbl, [trueai_hire_date] <=  toDate   && if(isblank(users_history[trueai_termination_date]), date(2100,1,1),users_history[trueai_termination_date]) >=  toDate && users_history[ci_time_alloc_tot] >0 ) // make sure we only include reps that are in the active  and user having time allocation greater than 0
			var reps_w_ta = COUNTROWS(DISTINCT(SELECTCOLUMNS(active_users_tbl, [_sys_user_id]))) // get a disctinct count of users from that filter context 
			
			var applicable_rows = CALCULATETABLE(users_history, LASTNONBLANK(users_history[_sys_filt_start_date],users_history[_sys_filt_start_date]))  // get only the last entry in each filter context period (e.g. a year)
			var active_users =  filter(applicable_rows, [trueai_hire_date] <=  toDate   && if(isblank(users_history[trueai_termination_date]), date(2100,1,1),users_history[trueai_termination_date]) >=  toDate) // make sure we only include reps that are in the active 
			var reps_tot = COUNTROWS(DISTINCT(SELECTCOLUMNS(active_users, [_sys_user_id]))) // get a disctinct count of users from that filter context 
			
			var _avg =DIVIDE(reps_w_ta, reps_tot)        // get the % of reps w TA
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)*boost_expo  // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_new_avg,2)*100  // round the number and for integar value  
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 93cd381a-97c6-4745-8641-c996cd9af450

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_time_alloc_text' = ```
			
			var _conf = [meas.ai_scores_ci_time_alloc]          // get the time alloc score 
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 95937f1f-7af0-4b27-97ff-62d045fe5ff7

	measure 'meas.ai_scores_ci_time_management' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_time_mgmt_num])
			var boost_expo = 0.90
			var _new_avg = (_avg)^ boost_expo   // pushes up the score slightly to make sure we get some “Excellent” scores when data is as good as it can be 
			var _conf = ROUND(_new_avg*100,0)  // round the number and for integar value
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 8a06eae1-71ea-4598-8063-b5c1b9a5f2bf

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_time_management_text' = ```
			
			var _conf = [meas.ai_scores_ci_time_management]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: d22f6d7c-40e1-4737-9051-b5f1b149943a

	measure 'meas.ai_scores_ci_work_effort' = ```
			
			var _avg = AVERAGE(users_history[ci_sb_work_effort_num])     // get the factor1
			var boost_expo = 0.90           // exponent value 
			var _new_avg = (_avg)^ boost_expo               // get the expo value to enhance output
			var _conf = ROUND(_avg,2)*100  // round the number and for integar value
			RETURN 
			_conf
			```
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: bc9b6b1f-7821-4538-9845-b8964c41f8ee

	measure 'meas.ai_scores_ci_work_effort_text' = ```
			
			
			var _conf = [meas.ai_scores_ci_work_effort]     // get the avg work effort conf
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 3586ddac-3c2b-4a94-9e31-01a6bbdabe76

	measure 'meas.ai_scores_general_score' =
			
			var factor1 = 1.0            // get the factor value 1
			var res = ROUND(factor1*100,0)
			RETURN
			res
		displayFolder: _ai_scores
		lineageTag: 82032e23-2dfc-46db-8391-56e05ab0c676

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_general_score_text' = ```
			
			
			var _conf = [meas.ai_scores_general_score]
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: a8ea373f-25f8-4d6e-9ea8-206f0613eec5

	measure 'meas.ai_scores_leads_industry' = ```
			
			var _avg = AVERAGE(leads[trueai_industry_conf])         // get the leads average leadsource conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 6ef0fdcc-e12e-4c29-b699-140f2bfacb81

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_leads_industry_text' = ```
			
			var _conf = [meas.ai_scores_leads_industry_factor1_value]       // get the leads average industry conf  
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 180a0b36-775d-40af-b1f0-4169e007ca54

	measure 'meas.ai_scores_leads_leadsource' = ```
			
			var _avg = AVERAGE(leads[trueai_leadsource_conf])        // get the leads average lead source conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: ba1939ac-dad5-4b53-bf04-1f87a98828cf

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_leads_leadsource_text' = ```
			
			var _conf = [meas.ai_scores_leads_leadsource]   
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 247a14d2-b631-42c8-a378-c6ab3b58de86

	measure 'meas.ai_scores_line_items_products' = ```
			
			var won_deals = CALCULATE(
			    COUNT(ssr_history[_sys_doc_id]),                // get the won deals
			    opps[trueai_is_won]=True
			)
			VAR _won_deals_w_line = CALCULATE(
			        DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			        opps[trueai_is_won] = True,                      // get the won deals count with line items
			        FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			    )
			
			var _won_ratio = DIVIDE(_won_deals_w_line,won_deals,0)         // won ratio
			
			var lost_deals =CALCULATE(
			    COUNT(ssr_history[_sys_doc_id]),                // get the lost deals
			    opps[trueai_is_won]=False
			)
			
			var _lost_deals_w_line = CALCULATE(
			        DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			        opps[trueai_is_won] = False,                      // get the lost deals count with line items
			        FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			    )
			
			var _lost_ratio = DIVIDE(_lost_deals_w_line,lost_deals,0)          // lost ratio
			
			var _won_weight = 0.70           // won weight
			var _lost_weight = 0.30         // lost deals ratio
			
			var score = (_won_ratio*_won_weight+_lost_ratio*_lost_weight)
			var res = ROUND(score*100,0)
			
			RETURN
			res
			```
		displayFolder: _ai_scores
		lineageTag: c41207d5-c4f9-4445-966b-a2af3558fe48

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_line_items_products_factor1_value' = ```
			
			var won_deals = CALCULATE(
			    COUNT(ssr_history[_sys_doc_id]),                // get the won deals
			    opps[trueai_is_won]=True
			)
			
			VAR _won_deals_w_line = CALCULATE(
			        DISTINCTCOUNT(opp_line_items[crm_opp_id]), 
			        opps[trueai_is_won] = True,                      // get the won deals count with line items
			        FILTER(opp_line_items, NOT(ISBLANK(opp_line_items[crm_opp_id])))
			    )
			
			var _won_ratio = DIVIDE(_won_deals_w_line,won_deals,0)         // won ratio
			
			// var _won_weight = 0.70           // won weight
			// var _lost_weight = 0.30         // lost deals ratio
			
			
			RETURN
			_won_ratio
			```
		displayFolder: _factor_value1
		lineageTag: 2d1f8053-c685-415a-bf0b-77fc6299b82a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_line_items_products_text' = ```
			
			var _conf = [meas.ai_scores_line_items_products]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: c1565ad8-a7cf-448f-bde3-639c94d8a198

	measure 'meas.ai_scores_list_price' = ```
			
			var factor1 = CALCULATE(count(opp_line_items[trueai_list_price]))      // get all the list_price count 
			var factor2 = CALCULATE(
			    count(opp_line_items[trueai_list_price]),      // non default list price items count
			    opp_line_items[trueai_list_price_rule] <> "103007"
			)
			
			VAR score =
			    IF(
			        factor2 = 0,
			        0.49,  // Force fixed score to show 49 if there is no non default count
			        ( factor2 * 0.49 + (factor2 - factor1) * 1 ) / factor1
			    )
			
			var res = MIN(MAX(ROUND(score*100, 0),0),100)           // get the rounded value not less then 0 and not greater then 100
			RETURN
			res
			```
		displayFolder: _ai_scores
		lineageTag: 3bc9c490-ebb5-4202-9843-34faa6c4904b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_list_price_items_factor1_value' = ```
			
			var total_list_items = CALCULATE(count(opp_line_items[trueai_list_price]))      // get all the list_price count 
			
			RETURN
			total_list_items+0
			```
		formatString: 0
		displayFolder: _factor_value1
		lineageTag: d5321504-73f1-41de-bec5-75f52ea967da

	measure 'meas.ai_scores_list_price_text' = ```
			
			
			var _conf = [meas.ai_scores_list_price]         // get the list price score number
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 105365db-011d-426c-b19a-923cb12196db

	measure 'meas.ai_scores_new_logo_existing_customer_selling' =
			
			var _new_logo = [meas.ai_scores_pred_new_logo_selling]      // new logo sellign score
			var _existing = [meas.ai_scores_pred_existing_customer_selling]         // existing customer selling score
			var res = (_new_logo+_existing)/2
			
			RETURN
			res
		displayFolder: _ai_scores
		lineageTag: 35d3120c-5156-4171-827a-4a864b72cc13

	measure 'meas.ai_scores_opps_history' = ```
			
			var factor1 = CALCULATE(COUNT(ssr_history[entity_opp_id]))         // get the count of the opp id
			var factor2 = CALCULATE(DISTINCTCOUNT(opps_histories[crm_opp_id]))         // get the opps with Opp history
			var _conf = DIVIDE(factor2, factor1,0)
			var res = ROUND(_conf*100,0)
			RETURN 
			res
			```
		displayFolder: _ai_scores
		lineageTag: f214dba1-0a42-4c29-9898-0d3dbd51cbe1

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_opps_history_text' = ```
			
			var _conf = [meas.ai_scores_opps_history]      // get the opps history score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: e4c26ccf-d96a-4c1e-88a8-f880c78ddaae

	measure 'meas.ai_scores_opps_industry' = ```
			
			var _avg =  AVERAGE(opps[trueai_industry_conf])         // get the opps average industry conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 8da4b17b-a8dd-4bf3-acf2-b6bbbd975a7c

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_opps_industry_text' = ```
			
			
			var _conf = [meas.ai_scores_opps_industry]   
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: b33f721c-918a-46e0-ac84-4d9fd036188f

	measure 'meas.ai_scores_opps_leadsource' = ```
			
			var _avg =  AVERAGE(opps[trueai_leadsource_conf])         // get the opps average industry conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 82bde667-3bb7-4ca6-9d2d-166956b0290c

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_opps_leadsource_text' = ```
			
			
			var _conf = [meas.ai_scores_opps_leadsource]   
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 8c3cf9dd-980f-4068-b051-061764464b98

	measure 'meas.ai_scores_performance_tiers' =
			
			var score =  CALCULATE(AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]))        // get the avg performance tier conf
			var res = ROUND(score*100, 0)       // get the int number
			RETURN
			res
		formatString: 0
		displayFolder: _ai_scores
		lineageTag: c16b7bdb-464c-42fd-a18d-da6af2ac402e

	measure 'meas.ai_scores_performance_tiers_text' = ```
			
			var _conf = [meas.ai_scores_performance_tiers]
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 29e80e3f-79c3-4373-9459-6581d22ccda8

	measure 'meas.ai_scores_potential_acv' = ```
			
			// as we don't have some field to calculate the factor I am using here temporary variable for visualization purpose. need to apply the actual field while available
			var temp = 0.80     // temp value for factor analysis
			var boost_expo = 0.9            // we uyse this to get the closer one value
			var score = temp^boost_expo     // boosting the actual 
			var res = ROUND(score*100, 0)
			RETURN
			res
			```
		displayFolder: _ai_scores
		lineageTag: dc351db3-95f5-4491-a907-7447411d654f

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_potential_acv_text' = ```
			
			
			var _conf = [meas.ai_scores_potential_acv]      // getb potential acv score
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: d286bf08-11f1-4d97-b1e2-36dbf861d4a3

	measure 'meas.ai_scores_pred_existing_customer_selling' = ```
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var factor1 = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_auc])     // get the latest auc for existing customer
			var factor2 = MAXX(latest_row, companies_history[di_pred_existing_customer_selling_r2])     // get the latest r2
			var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			var normalized_factor1  = (MAX((factor1-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var normalized_factor2  = MAX(factor2, 0) // avoid neg numbers from factor2
			
			var score  = ((normalized_factor2 + factor1)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 06489173-1c0d-4369-b961-33a5e09b27ac

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_pred_existing_customer_selling_text' = ```
			
			
			var _conf = [meas.ai_scores_pred_existing_customer_selling] // get the existing customer selling score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 8e71ca17-df28-4dc2-afa6-91f77e929f65

	measure 'meas.ai_scores_pred_new_logo_selling' = ```
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var factor1 = MAXX(latest_row, companies_history[di_pred_new_logo_auc])     // get the latest auc for existing customer
			var factor2 = MAXX(latest_row, companies_history[di_pred_new_logo_r2])     // get the latest r2
			
			var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			var normalized_factor1  = (MAX((factor1-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var normalized_factor2  = MAX(factor2, 0) // avoid neg numbers from factor2
			
			var score  = ((normalized_factor2 + factor1)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 1addb1e4-af83-4bdf-a923-b0622aca39cd

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_pred_new_logo_selling_text' = ```
			
			var _conf = [meas.ai_scores_pred_new_logo_selling] // get the new logo selling score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 5b99ef74-063c-4fd0-9ed0-c8e12406b3e6

	measure 'meas.ai_scores_pred_post_sales_support' = ```
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var factor1 = MAXX(latest_row, companies_history[di_pred_post_sales_auc])     // get the latest auc for existing customer
			var factor2 = MAXX(latest_row, companies_history[di_pred_post_sales_r2])     // get the latest r2
			
			var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			var normalized_factor1  = (MAX((factor1-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var normalized_factor2  = MAX(factor2, 0) // avoid neg numbers from factor2
			
			var score  = ((normalized_factor2 + factor1)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: c95df0f5-d150-4b05-8f21-68a783ddd579

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_pred_post_sales_support_text' = ```
			
			var _conf = [meas.ai_scores_pred_post_sales_support]        // get the score 
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 81fbf8fd-6984-44da-a73a-1b8088c84d53

	measure 'meas.ai_scores_pred_prospecting' = ```
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var factor1 = MAXX(latest_row, companies_history[di_pred_prospecting_auc])     // get the latest auc for existing customer
			var factor2 = MAXX(latest_row, companies_history[di_pred_prospecting_r2])     // get the latest r2
			
			var boost_expo = 0.65 // to get closer to one if good score after the scor has been calcualted
			var normalized_factor1  = (MAX((factor1-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var normalized_factor2  = MAX(factor2, 0) // avoid neg numbers from factor2
			
			var score  = ((normalized_factor2 + factor1)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 25abb222-376b-4d2f-90ec-7ce8fb199f7b

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_pred_prospecting_text' = ```
			
			var _conf = [meas.ai_scores_pred_prospecting] // get the prospecting pred score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 05af2312-44ac-4f8c-beaa-a46b1a08f53a

	measure 'meas.ai_scores_ramping' = ```
			
			var fromDate = MIN(cal_end_dates[date]) 
			var toDate = MAX(cal_end_dates[date])
			
			var applicable_rows_tbl = CALCULATETABLE(users_history, users_history[ci_perf_ramping_status] ="Ramping" ,  LASTNONBLANK(users_history[_sys_filt_start_date],users_history[_sys_filt_start_date]))  // get only the last entry in each filter context period (e.g. a year)
			
			var active_users_tbl =  filter(applicable_rows_tbl, [trueai_hire_date] <  toDate   && if(isblank([trueai_termination_date]), date(2100,1,1),[trueai_termination_date]) >=  toDate) // make sure we only include reps that are in the active 
			
			var _cnt = COUNTROWS(DISTINCT(SELECTCOLUMNS(active_users_tbl, users_history[_sys_user_id]))) // get a disctinct count of users from that filter context 
			
			var ramp_rate  = MIN(_cnt/3, 1)       // get the minimum if there is no ramping reps 
			
			var perf_score =  CALCULATE(
			    AVERAGE(users_history[ci_perf_qtly_performance_tier_conf]),       // get the avg perf conf
			    users_history[ci_perf_ramping_status] ="Ramping"
			)
			var boost_expo = 0.5            // we use this to get the closer one value
			var score = (ramp_rate * perf_score)^boost_expo     // boosting the actual 
			var res = ROUND(score*100, 0)+0
			RETURN
			res
			```
		displayFolder: _ai_scores
		lineageTag: 6be9ea40-9799-4e02-bc1e-2a56961b27c5

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ramping_text' = ```
			
			var _conf = [meas.ai_scores_ramping]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 8f9400bd-77e5-47dc-95e2-0496802901e8

	measure 'meas.ai_scores_rep_org_calibration' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC))       // grt the most latest row
			var _total_users = MAXX(latest_table,companies_history[users])          // total users
			
			var users_match_hr_id = MAXX(latest_table, [users_match_hr_id])         // total matched reps
			var users_hr_file = MAXX(latest_table, companies_history[users_hr_file])           // reps in hr file
			
			var users_non_match_hr_id_won_deals = MAXX(latest_table, companies_history[users_non_match_hr_id_won_deals])            // non match won deals reps
			var users_non_match_hr_id_pipeline = MAXX(latest_table, companies_history[users_non_match_hr_id_pipeline])          // non match pipeline gen reps
			var users_non_match_hr_id_leads = MAXX(latest_table, companies_history[users_non_match_hr_id_leads])          // non match lead gen reps count
			var users_match_hr_id_nd_role = MAXX(latest_table, companies_history[users_match_hr_id_nd_role])                  // non match reps with role
			var users_match_hr_id_nd_group = 0
			
			var matched_reps_score = DIVIDE(users_match_hr_id,users_hr_file,0)
			var won_deals_score = (1 - DIVIDE(users_non_match_hr_id_won_deals, _total_users, 0))
			var pipeline_gen_score = (1 - DIVIDE(users_non_match_hr_id_pipeline, _total_users, 0))
			var lead_gen_score = (1 - DIVIDE(users_non_match_hr_id_leads, _total_users, 0))               //raw score calculation for each
			var reps_w_role_score = (1 - DIVIDE(users_match_hr_id_nd_role,users_hr_file,0))
			//var reps_w_group_ratio = DIVIDE(reps_group,_hr_file_users,0)
			
			VAR Row1 = ROW ( "Value", matched_reps_score, "Weight", 3 )
			VAR Row2 = ROW ( "Value", won_deals_score, "Weight", 2 )
			VAR Row3 = ROW ( "Value", pipeline_gen_score, "Weight", 1 )          //raw score and weight  added in the table  for each reps count
			VAR Row4 = ROW ( "Value", lead_gen_score, "Weight", 1 )
			VAR Row5 = ROW ( "Value", reps_w_role_score, "Weight", 2 )
			VAR temp_tbl =
			    UNION ( Row1, Row2, Row3, Row4, Row5 )          //creating the table
			
			var _adj_calib = SUMX(temp_tbl, [Value]*[Weight])           // get the adjusted raw score
			var _importance = SUMX(temp_tbl, [Weight])                  // sum of the total weight
			var raw_score = DIVIDE(_adj_calib, _importance,0)                 // get the score
			
			var boost_expo = 0.9            // we use this to get the closer one value
			var score = raw_score^boost_expo     // boosting the actual 
			var res = MIN(MAX(ROUND(score*100,0),0),100)
			RETURN
			res
			```
		displayFolder: _ai_scores
		lineageTag: 7d6d7790-5bbc-4ae0-8506-5f1b9894526e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_rep_org_calibration_text' = ```
			
			var _conf = [meas.ai_scores_rep_org_calibration]
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 0a4fccaf-aa1c-4e26-9e5c-399fc7f42159

	measure 'meas.ai_scores_revenue_calibration' = ```
			
			var latest_table = CALCULATETABLE(TOPN(1,companies_history,companies_history[_sys_processed_as_of],DESC)) 
			var factor1 = VALUE(MAXX(latest_table,companies_history[ttm_ref_date_revenue])) 
			
			var factor2 = VALUE(MAXX(latest_table,companies_history[di_amt_won_last12months])) 
			
			var score = (factor1 - ABS(factor1 - factor2))/factor1
			var res = IF(
			    factor1=BLANK() || factor1=0,
			    0,
			    ROUND(score*100, 0)
			)
			RETURN
			res
			```
		displayFolder: _ai_scores
		lineageTag: 344f767a-2690-4e3b-ab4e-12741f7f149e

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_revenue_calibration_text' = ```
			
			var _conf = [meas.ai_scores_revenue_calibration]
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 36cbcde2-4517-4a9a-b9ae-b8551ff406ca

	measure 'meas.ai_scores_sales_process' = ```
			
			var _count = CALCULATE(count(ssr_history[_sys_doc_id]) )
			var total_rules_applied=  If(IsBlank(_count), 0,_count)
			
			var tbl_crm_rules = calculateTable(SELECTCOLUMNS(filter(metadata_rule_list, metadata_rule_list[col.rule_is_std_crm] = true), "_sys_doc_id]", "" & [_sys_doc_id])) // get a list of just the CRM rules
			//var dd = COUNTROWS(tbl_crm_rules) // check the count
			var filt = filter(ssr_history, 
			 (
			     ssr_history[step_owner_rule] & "" IN tbl_crm_rules  &&  
			     ssr_history[step_outcome_rule] & "" IN tbl_crm_rules &&   
			      ssr_history[step_end_rule] & "" IN tbl_crm_rules  
			) 
			) // look for NONE crm rules and exclude lead gen 
			var sdt_rules_applied =  CALCULATE(count(ssr_history[_sys_doc_id]) , filt) // get the count based on correct filter
			
			
			var avg_conf_non_crm = .85  // get the avg non crm conf
			var diff = (total_rules_applied - sdt_rules_applied  ) * avg_conf_non_crm  // create a diff model
			var adjusted_ratio= divide (sdt_rules_applied +diff ,  total_rules_applied) // add the diff for the new ratio
			// return as an int between 0-100
			var res = ROUND(adjusted_ratio*100, 0)
			return res
			```
		displayFolder: _ai_scores
		lineageTag: 5f7a6047-4cdb-43a1-8ced-98f74bed7b05

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_sales_process_text' = ```
			
			
			var temp =[meas.ai_scores_sales_process_value]    // get the ADE sales process score
			
			var _conf = ROUND(temp*100, 0)
			
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: c3439397-3b9c-4207-950c-666a3dba0f61

	measure 'meas.ai_scores_ssr_industry' = ```
			
			var _avg = AVERAGE(ssr[trueai_industry_conf])         // get the ssr average industry conf
			var _conf = ROUND(_avg,2)*100    
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: df8f40e1-a92e-4c7b-a0b5-4dd5b855744a

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ssr_industry_text' = ```
			
			var _conf = [meas.ai_scores_ssr_industry]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: bb85fc7e-bca6-4813-b2cd-d5c2548605a9

	measure 'meas.ai_scores_ssr_leadsource' = ```
			
			var _avg = AVERAGE(ssr[trueai_leadsource_conf])        // get the ssr average lead source conf
			var _conf = ROUND(_avg*100,0)
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: fd163dcf-c88e-4da1-8ec2-0f3e7f4d41cd

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ssr_leadsource_text' = ```
			
			var _conf = [meas.ai_scores_ssr_leadsource]
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 7c87c077-7a51-4415-86cb-b4caf35a3521

	measure 'meas.ai_scores_success_factor_analysis' =
			
			var latest_row  = CALCULATETABLE(TOPN(1,companies_history, companies_history[_sys_processed_as_of], DESC))  // get the latest row
			var  train_score= MAXX(latest_row, companies_history[di_success_prob_training_score])     // get the latest train score
			var  validation_score= MAXX(latest_row, companies_history[di_success_prob_validation_score])     // get the latest validation score
			
			var boost_expo = 0.65 // to get closer to one if good score after the score has been calcualted
			var train_score_norm  = MAX(train_score, 0) // avoid neg
			var validation_score_norm  = (MAX((validation_score-0.5),0)) + 0.5  // realize that 0.5 is useless, but boost back up so good is not 0.5
			var score  = ((train_score_norm + validation_score_norm)/2) ^ boost_expo  // avg of both normalized score + boosting
			var _conf = round(score * 100 ,0) // make it an integer score
			
			RETURN
			_conf
		displayFolder: _ai_scores
		lineageTag: 32c41762-b2f6-4a2f-ae3a-f33a5ac33bad

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_success_factor_analysis_text' = ```
			
			var _conf = [meas.ai_scores_success_factor_analysis] // get the success factor analysis
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 984a8bb8-d8e9-4ec5-ac04-4b5ca8f9597a

	measure 'meas.ai_score' = ```
			
			var score_name = MAX(metadata_ai_scores[score_name])
			
			var res = SWITCH(
			    score_name,
			    "Prospecting Success Predictions", [meas.ai_scores_pred_prospecting],    // score_id 1
			    "New Logo Selling Success Predictions", [meas.ai_scores_pred_new_logo_selling],    // score_id 2
			    "Post-Sales Support Success Predictions", [meas.ai_scores_pred_post_sales_support],    // score_id 3
			    "Existing Customer Selling Success Predictions", [meas.ai_scores_pred_existing_customer_selling],    // score_id 4
			    "Success Factor Analysis", [meas.ai_scores_success_factor_analysis],                      // score id 5
			    "Potential ACV", [meas.ai_scores_potential_acv],                      // score id 6
			    "List Price", [meas.ai_scores_list_price],                      // score id 7
			    "Line Item Products", [meas.ai_scores_line_items_products],                      // score id 8
			    "Accounts Industry Consolidation", [meas.ai_scores_accts_industry],                // score id 9 
			    "Accounts Lead Source Consolidation", [meas.ai_scores_accts_leadsource],                // score id 10 
			    "Leads Industry Consolidation", [meas.ai_scores_leads_industry],                // score id 11 
			    "Leads Lead Source Consolidation", [meas.ai_scores_leads_leadsource],                // score id 12 
			    "Opps Industry Consolidation", [meas.ai_scores_opps_industry],                // score id 13 
			    "Opps Lead Source Consolidation", [meas.ai_scores_opps_leadsource],                // score id 14 
			    "SSR Industry Consolidation", [meas.ai_scores_ssr_industry],                // score id 15 
			    "SSR Lead Source Consolidation", [meas.ai_scores_ssr_leadsource],                // score id 16 
			    "Opportunities History", [meas.ai_scores_opps_history],                // score id 17 
			    "Activity Capture Level", [meas.ai_scores_ci_act_capt_lvl],                // score id 18 
			    "Activity Capture Level Confidence", [meas.ai_scores_ci_act_capt_lvl_conf],
			    "Time Allocation", [meas.ai_scores_ci_time_alloc],                // score id 19 
			    "Adjusted Duration", [meas.ai_scores_adj_duration],                // score id 20 
			    "Closing Ability", [meas.ai_scores_ci_closing_ability],                  // score_id 21 
			    "Discovery Skill", [meas.ai_scores_ci_discovery_skill],               // score_id 22 
			    "Engagement Ability", [meas.ai_scores_ci_engagement_ability],                      // score_id 23 
			    "Work Effort", [meas.ai_scores_ci_work_effort],                      // score_id 24 
			    "Deal Maximizing", [meas.ai_scores_ci_deal_maxing],                        // score_id 25 
			    "Performance Tiers", [meas.ai_scores_performance_tiers],                            // score_id 26 
			    "Ramping Success", [meas.ai_scores_ramping],                                  // score_id 27 
			    "Time Management", [meas.ai_scores_ci_time_management],                // score_id 28 
			    "Rep Organization Calibration", [meas.ai_scores_rep_org_calibration],
			    "Bookings Calibration", [meas.ai_scores_booking_calibration],
			    "Revenue Calibration", [meas.ai_scores_revenue_calibration],
			    "Leads & Accounts Completeness  Data Present",[meas.ai_scores_general_score],
			    BLANK()
			)
			RETURN
			res+0
			```
		formatString: 0
		lineageTag: 432d9e8d-81a5-4998-8f5c-3588b6380807

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.average_ai_score' =
			
			AVERAGEX(
			    metadata_ai_scores,
			    [meas.ai_score]
			)
		formatString: 0
		lineageTag: b12cdcbf-d399-4855-b356-3f9402c5215c

		annotation PBI_FormatHint = {"isDecimal":true}

	measure 'meas.ai_scores_ci_act_capt_lvl' = ```
			
			var _avg = CALCULATE(
			           AVERAGE(users_history[ci_act_capt_lvl])// get the users_history average ci_act_capt_lvl
			)
			var boost_expo = 0.90           // exponent value 
			var _boosted_avg = (_avg)^ boost_expo     // pushes up the score slightly 
			var _conf = ROUND(_boosted_avg*100,0)  // round the number and for integar value  
			RETURN 
			_conf
			```
		displayFolder: _ai_scores
		lineageTag: 85b91857-4258-4858-ab3e-caab92d02dc5

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'meas.ai_scores_ci_act_capt_lvl_text' = ```
			
			
			var _conf = [meas.ai_scores_ci_act_capt_lvl]  // act capt lvl score
			
			var _status_ = IF(
			    _conf > 94, "Excellent", 
			        If(_conf > 84,  "Great", 
			            If(_conf > 74 ,"Good", 
			                if(_conf> 49, "Fair", "Limited" 
			            )
			        )
			    )
			)  // use the legend
			
			RETURN 
			_status_
			```
		displayFolder: _ai_scores
		lineageTag: 14326d25-cac6-4c9e-a345-8e91845e18c9

	column category
		dataType: string
		lineageTag: c2d5cb78-f46a-493e-b40a-b1914ab2548b
		summarizeBy: none
		sourceColumn: category

		annotation SummarizationSetBy = Automatic

	column score_name
		dataType: string
		lineageTag: 249a4a1c-f955-4815-b788-90b9bd64857a
		summarizeBy: none
		sourceColumn: score_name

		annotation SummarizationSetBy = Automatic

	column description
		dataType: string
		lineageTag: 76cc6dda-d8f7-4c66-b491-85d761b65121
		summarizeBy: none
		sourceColumn: description

		annotation SummarizationSetBy = Automatic

	column factor_1_name
		dataType: string
		lineageTag: 2ba59f9b-5d9b-4899-aa0f-9d902cd09588
		summarizeBy: none
		sourceColumn: factor_1_name

		annotation SummarizationSetBy = Automatic

	column factor_2_name
		dataType: string
		lineageTag: 0c19c675-11d3-4059-8c22-5afb6fd4e672
		summarizeBy: none
		sourceColumn: factor_2_name

		annotation SummarizationSetBy = Automatic

	column factor_3_name
		dataType: string
		lineageTag: 53bf93f5-328a-48da-b6e9-306a9af9a9bc
		summarizeBy: none
		sourceColumn: factor_3_name

		annotation SummarizationSetBy = Automatic

	column _sys_doc_id
		dataType: string
		lineageTag: 6bbc64a9-bb3c-4d6e-a1b1-52474b2c531e
		summarizeBy: none
		sourceColumn: _sys_doc_id

		annotation SummarizationSetBy = Automatic

	column _sys_is_active
		dataType: boolean
		formatString: """TRUE"";""TRUE"";""FALSE"""
		lineageTag: 6989f60d-d162-4a6c-88ae-4709e680d73e
		summarizeBy: none
		sourceColumn: _sys_is_active

		annotation SummarizationSetBy = Automatic

	column _sys_modified_on
		dataType: dateTime
		formatString: General Date
		lineageTag: ff701209-0b38-4c76-b7e0-f95b473cb19e
		summarizeBy: none
		sourceColumn: _sys_modified_on

		variation Variation
			isDefault
			relationship: bdb4ea68-8fba-4c6c-9563-25236177cb70
			defaultHierarchy: LocalDateTable_fedec804-f827-40df-a95f-eafad828a8c3.'Date Hierarchy'

		annotation SummarizationSetBy = Automatic

	column sort
		dataType: int64
		formatString: 0
		lineageTag: 7e1b6982-e927-40cf-b5bb-61e015a7b509
		summarizeBy: sum
		sourceColumn: sort

		annotation SummarizationSetBy = Automatic

	column notes
		dataType: string
		lineageTag: e23e3b09-25e8-4d82-8925-57be1c64304e
		summarizeBy: none
		sourceColumn: notes

		annotation SummarizationSetBy = Automatic

	partition metadata_ai_scores = m
		mode: import
		source = ```
				let
				    dbTable = getDBTable("metadata_ai_scores"),      // get the right table
				    dbTableTyped = Table.TransformColumnTypes(dbTable,{
				        {"_sys_doc_id", type text}, 
				        {"_sys_is_active", type logical}, 
				        {"_sys_modified_on", type datetime}, 
				        {"category", type text}, 
				        {"score_name", type text}, 
				        {"description", type text}, 
				        {"sort", Int64.Type}, 
				        {"factor_1_name", type text}, 
				        {"factor_2_name", type text}, 
				        {"factor_3_name", type text}, 
				        {"notes", type text}
				        
				        })
				   
				in
				   dbTableTyped
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

